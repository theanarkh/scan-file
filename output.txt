hello
import { i18n } from '@tea/app';
import { Entry as CNEntry } from './cn/Entry';
import { Entry as INTLEntry } from './intl/Entry';

const { site } = i18n;

export const DeveloperAuth = site === 1 ? CNEntry : INTLEntry;
import React from 'react';
import { user } from '@tea/app/bridge';
import { app, useHistory } from '@tea/app';
import { Layout, PageTitle, Dialog } from '@src/components';
import { connect } from 'react-redux';
import { developerService, commonService, authService } from '@src/services';
import * as utils from '@src/utils';
import { mapDisppatchToProps } from './react-redux/reducer/helper';
import { t, Trans } from '@tea/app/i18n';
import classnames from 'classnames';
import { Input } from '@tea/component/input';
import { Button } from '@tea/component/button';
import { Checkbox } from '@tea/component/checkbox';
import { BackBtn } from '@src/components/BackBtn';
import cookie from 'js-cookie';
import _ from 'underscore';
import { Step1 } from './components/Step1';
import { Step2 } from './components/Step2';
import { Step3 } from './components/Step3';
import { Step4 } from './components/Step4';
import { Provider } from 'react-redux';
import { store } from './react-redux/store';

const mapStateToProps = state => {
	return state;
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class Delete extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			noPermit: false,
			loading: true,
		};
	}
	render() {
		const { loading, noPermit } = this.state;
		if (loading) {
			return null;
		}
		if (noPermit) {
			return <utils.NOT_PERMISSION></utils.NOT_PERMISSION>;
		}

		const { step } = this.props;

		return [
			<Layout
				title={<BackBtn title={t('账号注销__mark__')} url={'/developer/security'}></BackBtn>}
				className={'page-logout developer'}
			>
				<Layout.Body>
					<div className="tc-panel">
						{step == 1 ? <Step1></Step1> : null}
						{step == 2 ? <Step2></Step2> : null}
						{step == 3 ? <Step3></Step3> : null}
						{step == 4 ? <Step4></Step4> : null}
					</div>
				</Layout.Body>
			</Layout>,
			<Dialog
				{...this.props.dialogInfo}
				onClose={() => {
					this.props.resetDialogInfo({ visible: false });
				}}
			></Dialog>,
		];
	}

	async componentDidMount() {
		const { isOwner } = await app.user.current();
		if (!isOwner) {
			this.setState({ noPermit: true, loading: false });
			return;
		}

		const verifyOK = await app.mfa['verify']('account:ApplyAccountDeactivation');
		if (!verifyOK) {
			this.props.history.push('/developer/security');
			return;
		}

		try {
			const [authInfo, accountDeactivationInfo] = await Promise.all([
				authService.getAuthInfo(),
				developerService.getAccountDeactivationInfo(),
			]);
			this.setState({ loading: false });

			// if (!_.includes([0,3], +authInfo['authState'])) {
			//     utils.showErrorTips('实名状态无效');
			//     this.props.history.push('/developer/security');
			//     return;
			// }
			// status==0 审核中__mark__ step=3 status==2 已驳回 step=4
			let step =
				accountDeactivationInfo.status == 0 ? 3 : accountDeactivationInfo.status == 2 ? 4 : 1;
			this.props.updateGlobalInfo({
				authInfo,
				accountDeactivationInfo,
				step,
				router: this.props.history,
				isIntl: utils.isIntl(),
			});
		} catch (e) {
			utils.showErrorTips(t('获取数据失败__mark__'));
			this.props.history.push('/developer/security');
		}
	}

	componentWillUnmount() {
		this.props.clearState();
	}
}

export const DeveloperDelete = function(props) {
	return (
		<Provider store={store}>
			<Delete {...props}></Delete>
		</Provider>
	);
};

// 账号中心页面

import React from 'react';
import { user } from '@tea/app/bridge';
import { app } from '@tea/app';
import { Layout } from '@src/components';
import { Owner, Cooperator, SubAccount, Wechatcorp } from './components';
import { connect } from 'react-redux';
import { developerService, commonService } from '@src/services';
import * as utils from '@src/utils';
import { mapDisppatchToProps } from './react-redux/reducer/helper';
import { Dialog, BeforeRenderHOC } from '@src/components';
import { ErrorPage } from '@src/components/ErrorPage';
import { NotPermission } from '@src/components/NotPermission';
import { TencentCloudHelper } from '@src/components/TencentCloudHelper';

import Guide from './components/Guide';
import cookie from 'js-cookie';
import { t, Trans } from '@tea/app/i18n';
import { resolve } from 'path';
import objectPath from 'object-path';
import { TopTips } from './components/TopTips';

const mapStateToProps = state => {
	return state;
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
@BeforeRenderHOC
export default class DeveloperContainer extends React.Component {
	render() {
		const { userInfo, lang } = this.props;

		// loading态，先不显示，由BeforeRenderHOC注入的props
		if (this.props.loading) {
			return null;
		}

		// 加载数据失败，显示错误，由BeforeRenderHOC注入的props
		if (this.props.haveError) {
			return <ErrorPage />;
		}

		// 屏蔽IDP用户
		if (this.props.forbidden) {
			return <NotPermission />;
		}

		// 先区分身份，在身份组件里再区分站点
		return (
			<>
				<Layout title={t('账号信息__mark__')} extra={<TencentCloudHelper />} className={'auth-info-page'}>
					<Layout.Body>
						<TopTips />
						{userInfo.role == 'owner' ? (
							<Owner></Owner>
						) : userInfo.role == 'cooperator' ? (
							<Cooperator></Cooperator>
						) : userInfo.role == 'subaccount' ? (
							<SubAccount></SubAccount>
						) : userInfo.role == 'wechatcorp' ? (
							<Wechatcorp></Wechatcorp>
						) : null}
					</Layout.Body>
				</Layout>
				{/* 右侧用户指引 */}
				<Guide></Guide>
				{/* 页面全局弹框 */}
				<Dialog
					{...this.props.dialogInfo}
					onClose={() => {
						this.props.resetDialogInfo({ visible: false });
					}}
				></Dialog>
			</>
		);
	}

	async componentDidMount() {
		// 渲染右侧工单智能助手
		utils.renderHelper();
		let role;
		try {
			const [data, whiteList, bindInfo] = await Promise.all([
				developerService.getCurrentUserInfoV2(),
				this.queryWhiteList(),
				this.getAccountBindInfo(),
			]);

			// 判断是否是idp用户，是的话就屏蔽
			if (data.userInfo.srcPlatform && utils.isIdpUser(data.userInfo.srcPlatform)) {
				return this.props.forbid();
			}

			// 注入一__mark__些字段
			const { isOwner, ownerUin, nickName: nickname } = await app.user.current();

			if (isOwner) {
				role = 'owner';
			} else if (data.userInfo.subSystemType == 'WechatCorp') {
				role = 'wechatcorp';
			} else if (data.userInfo.subSystemType == 'SubAccount') {
				role = 'subaccount';
			} else {
				role = 'cooperator';
			}

			const wechatBindPolicy = objectPath.get(data, 'accountBindPolicy.weixin', 1);
			const canBindWechat = isOwner || role == 'subaccount' || bindInfo.weixin;

			Object.assign(data.userInfo, {
				isOwner,
				ownerUin,
				role,
				nickname,
				appId: data.appId ? data.appId[0] : '-',
				isIntl: utils.isIntl(),
				canBindWechat,
				wechatBindPolicy,
			});

			// 更新到redux中
			this.props.updateUserInfo(data.userInfo);
			this.props.updateGlobalInfo({ router: this.props.history, lang: cookie.get('language') });

			if (role != 'cooperator') {
				this.props.updateGlobalInfo({ whiteList: whiteList });
			}

			if (bindInfo) {
				this.props.updateBindInfo(bindInfo);
			}

			// 通知上层组件数据加载成功
			this.props.done();
		} catch (e) {
			// 通知上层组件数据加载失败
			this.props.fail();
		}
	}

	queryWhiteList() {
		return new Promise(async (resolve, reject) => {
			try {
				const whiteList = await commonService.checkWhitelistBatch([
					'LOGIN_TYPE_UNBIND_WHTELIST',
					'VIP_WHITELIST',
				]);
				resolve(whiteList);
			} catch (err) {
				resolve({});
			}
		});
	}

	getAccountBindInfo() {
		return new Promise(async (resolve, reject) => {
			try {
				const bindInfo = await developerService.getAccountBindInfo();
				resolve(bindInfo);
			} catch (err) {
				resolve();
			}
		});
	}

	componentWillUnmount() {
		// 移除工单智能助手
		utils.removeHelper();
		// 清除redux的状态
		this.props.clearState();
	}
}

import React from 'react';
import { Provider } from 'react-redux';
import DeveloperContainer from './DeveloperContainer';
import { store } from './react-redux/store';
import { useHistory, useDocumentTitle } from '@tea/app';
import { Router, Route } from 'react-router-dom';
import { t } from '@tea/app/i18n';

export function DeveloperIndex() {
	useDocumentTitle(t('账号信息__mark__'));
	const history = useHistory();
	return (
		<Provider store={store}>
			<Router history={history}>
				<Route path="/developer/:action?" component={DeveloperContainer} />
			</Router>
		</Provider>
	);
}

export * from './DeveloperIndex';
export const TOKEN_STATUS = {
    BINDING: 1,     // 绑定__mark__中
    FORZEN: 2,      // 禁用
    UNBINDING: 3,   // 未绑定__mark__
};

export const TOKEN_TYPE = {
    HARDWARE: 1,
    SOFTWARE: 2
};

import React, { useState } from 'react';
import { RadioGroup, Radio } from '@tea/component/radio';
import { CheckboxGroup, Checkbox } from '@tea/component/checkbox';
import { app } from '@tea/app';
import { connect } from 'react-redux';
import { developerService, commonService } from '@src/services';
import * as utils from '@src/utils';
import { mapDisppatchToProps } from './react-redux/reducer/helper';
import { t, Trans, site } from '@tea/app/i18n';
import { Button, Segment, Switch, InputNumber, Form, Input, Text } from '@tea/component';
import { Layout, Card } from '@tencent/tea-component/lib';
import { ExternalLink } from '@tencent/tea-component/lib/link';

import * as HardToken from './components/HardToken';
import * as SoftToken from './components/SoftToken';
import cookie from 'js-cookie';
import _ from 'underscore';
import { TOKEN_STATUS, TOKEN_TYPE } from './constants';
import pify from 'pify';
import { BeforeRenderHOC } from '@src/components';
import { ErrorPage } from '@src/components/ErrorPage';
import { Provider } from 'react-redux';
import { store } from './react-redux/store';
const { Body, Content } = Layout;

const QRCODE_URL = location.protocol + '//' + window['QCMAIN_HOST'] + '/wechat/genSoftTempSnQrImg';

const FLAG = {
	LOGIN: 'loginFlag',
	ACTION: 'actionFlag',
};

const mapStateToProps = state => {
	return state;
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
@BeforeRenderHOC
class MFA extends React.Component {
	timerId = null;
	softTokenFormRef = null;
	hardTokenFormRef = null;

	// 切换tab处理
	onTypeChange(type) {
		this.props.updateGlobalInfo({
			select__mark__edType: type,
		});
	}

	render() {
		const {
			whiteList,
			select__mark__edType,
			tokenInfo = {},
			flag,
			isSuccess,
			second,
			qrcodeUrl,
			uin,
			lang,
		} = this.props;
		if (this.props.loading) {
			return null;
		}

		// 加载数据失败，显示错误，由BeforeRenderHOC注入的props
		if (this.props.haveError) {
			return <ErrorPage />;
		}

		const showHardToken = select__mark__edType == TOKEN_TYPE.HARDWARE;
		const showSoftToken = select__mark__edType == TOKEN_TYPE.SOFTWARE;

		return (
			<div>
				<Layout>
					<Body>
						<Content>
							<Content.Header
								showBackButton
								onBackButtonClick={() => {
									this.props.router.push('/developer/security');
								}}
								title={
									tokenInfo.status == TOKEN_STATUS.BINDING
										? t('修改/重新绑定MFA设备__mark__')
										: t('绑定MFA设备__mark__')
								}
								operation={
									<ExternalLink
										href={
											showHardToken
												? HardToken.HARD_TOKEN_HELP_LINK
												: SoftToken.SOFT_TOKEN_HELP_LINK
										}
										weak
									>
										<Trans>帮助文档__mark__</Trans>
									</ExternalLink>
								}
							/>
							<Content.Body>
								<Card>
									<Card.Body>
										<div className="mc-token-layout">
											<div className="mc-token-con">
												<Form>
													<Form.Item label={t('设备类型__mark__')}>
														<Segment
															value={showSoftToken ? '2' : showHardToken ? '1' : ''}
															onChange={layout => this.onTypeChange(layout)}
															options={
																whiteList.MFA_WHITELIST
																	? [
																			{ value: '1', text: t('硬件 MFA 设备__mark__') },
																			{ value: '2', text: t('虚拟 MFA 设备__mark__') },
																	  ]
																	: [{ value: '2', text: t('虚拟 MFA 设备__mark__') }]
															}
														/>
													</Form.Item>
													<Form.Item
														label={t('二维码__mark__')}
														style={{ display: showSoftToken ? '' : 'none' }}
													>
														{lang == 'en' ? (
															<SoftToken.Goggle uin={uin} />
														) : (
															<SoftToken.Webapp
																qrcodeUrl={qrcodeUrl}
																onRefresh={() => {
																	this.props.updateGlobalInfo({
																		qrcodeUrl: QRCODE_URL + `?t=${Date.now()}`,
																	});
																}}
															/>
														)}
													</Form.Item>
													<Form.Item label={t('验证码__mark__')} required>
														{showHardToken ? (
															<HardToken.HardTokenForm
																ref={node => {
																	this.hardTokenFormRef = node;
																}}
															/>
														) : null}
														{showSoftToken ? (
															<SoftToken.SoftTokenForm
																ref={node => {
																	this.softTokenFormRef = node;
																}}
															/>
														) : null}
													</Form.Item>
													<Form.Item label={t('启用范围__mark__')}>
														<CheckboxGroup
															value={flag}
															onChange={value => {
																this.props.updateGlobalInfo({
																	flag: value,
																});
															}}
														>
															<Checkbox name={FLAG.LOGIN}>
																<Trans>登录保护（在登录时须验证MFA设备上的6位动态验证码）__mark__</Trans>
															</Checkbox>
															<Checkbox name={FLAG.ACTION}>
																<Trans>
																	操作保护（在控制台进行敏感操作时须验证MFA设备上的6位动态验证码）__mark__
																</Trans>
															</Checkbox>
														</CheckboxGroup>
													</Form.Item>
												</Form>
											</div>
											<div
												className="mc-token-aside"
												style={{ display: showSoftToken && lang !== 'en' ? '' : 'none' }}
											>
												<img
													src="https://imgcache.qq.com/open_proj/proj_qcloud_v2/mc_2014/account/html/token/css/token.png"
													alt="token"
													className="mc-token-aside-img"
												/>
											</div>
										</div>
									</Card.Body>
									<Card.Footer>
										<p className="tea-pa-5n">
											{isSuccess ? (
												<div>
													<Button
														style={{ marginLeft: '70px' }}
														onClick={() => {
															this.props.history.push('/developer/security');
														}}
													>
														<Trans>立即返回__mark__</Trans>
													</Button>
													<span className="token-valid success" style={{ marginLeft: '10px' }}>
														<i className="token-valid-flag"></i>
														<Trans>绑定成功，__mark__</Trans>
														{flag.length === 0 ? (
															<span>
																<Trans>建议尽快开启安全设置，__mark__</Trans>
															</span>
														) : null}
														<span>{second}</span>
														<Trans>秒后回到安全设置页__mark__</Trans>
													</span>
												</div>
											) : (
												<div>
													<Button
														type="primary"
														style={{ marginRight: '10px', marginLeft: '70px' }}
														onClick={() => {
															this.submit();
														}}
													>
														<Trans>提交__mark__</Trans>
													</Button>
													<Button
														onClick={() => {
															this.props.history.push('/developer/security');
														}}
													>
														<Trans>取消__mark__</Trans>
													</Button>
												</div>
											)}
										</p>
									</Card.Footer>
								</Card>
							</Content.Body>
						</Content>
					</Body>
				</Layout>
			</div>
		);
	}

	getInterFace() {
		// 默认是绑定__mark__token
		let apiName = 'BindToken';
		// 已绑定__mark__
		if (this.props.tokenInfo.status == TOKEN_STATUS.BINDING) {
			// 当前绑定__mark__类型
			apiName =
				this.props.tokenInfo.tokenType == TOKEN_TYPE.HARDWARE ? 'ModifyToken' : 'ModifyStoken';
		}
		return `cam:${apiName}`;
	}

	async submit() {
		const { flag, uin, select__mark__edType } = this.props;

		let data = {
			uin: uin,
			tokenType: +select__mark__edType,
			skey: cookie.get('skey'),
		};

		const loginFlag = +_.includes(flag, FLAG.LOGIN);
		const actionFlag = +_.includes(flag, FLAG.ACTION);

		let bindInfo = {};
		if (select__mark__edType == TOKEN_TYPE.HARDWARE) {
			try {
				bindInfo = await pify(this.hardTokenFormRef.validateFields)();
				data = {
					...data,
					tokenSn: bindInfo.num,
					tokenSeed: bindInfo.random,
					loginFlag: [
						{
							phone: 0,
							token: loginFlag,
							stoken: 0,
						},
					],
					actionFlag: [
						{
							phone: 0,
							token: actionFlag,
							stoken: 0,
						},
					],
				};
			} catch (e) {
				return;
			}
		} else {
			try {
				bindInfo = await pify(this.softTokenFormRef.validateFields)();
				// 有一__mark__个不符合规则则报错
				if (!/^\d{6}$/.test(bindInfo.random.random1) || !/^\d{6}$/.test(bindInfo.random.random2)) {
					return this.softTokenFormRef.setFields({
						random: { value: bindInfo.random, errors: [new Error(t('请输入两组6位动态安全码__mark__'))] },
					});
				}
				bindInfo = { random1: bindInfo.random.random1, random2: bindInfo.random.random2 };
				data = {
					...data,
					tokenSeed: bindInfo.random1,
					tokenSeed2: bindInfo.random2,
					loginFlag: [
						{
							phone: 0,
							token: 0,
							stoken: loginFlag,
						},
					],
					actionFlag: [
						{
							phone: 0,
							token: 0,
							stoken: actionFlag,
						},
					],
				};
			} catch (e) {
				return;
			}
		}

		const [serviceType, apiName] = this.getInterFace().split(':');
		let params = {
			serviceType: serviceType,
			cmd: apiName,
			data: data,
		};
		let options = { secure: true, withClientIP: true, withClientUA: true, version: 2 };
		try {
			await commonService.mfaRequest(params, options);
			let second = 5;
			this.props.updateGlobalInfo({ isSuccess: true, second: second-- });
			this.timerId = setInterval(() => {
				if (this.timerId === null) {
					return;
				}
				if (second == 0) {
					clearInterval(this.timerId);
					this.timerId = null;
					this.props.history.push('/developer/security');
					return;
				}
				this.props.updateGlobalInfo({ second: second-- });
			}, 1000);
		} catch (e) {
			switch (e.code) {
				case 11006:
					utils.showErrorTips(t('用户不存在__mark__'));
					break;
				case 11010:
					this.hardTokenFormRef.setFields({
						num: { value: bindInfo.num, errors: [new Error(t('该MFA设备已经被其他人绑定过__mark__'))] },
					});
					break;
				case 11011:
					this.hardTokenFormRef.setFields({
						num: { value: bindInfo.num, errors: [new Error(t('您已经绑定过该MFA设备__mark__'))] },
					});
					break;
				case 11014:
					if (select__mark__edType == TOKEN_TYPE.HARDWARE) {
						this.hardTokenFormRef.setFields({
							num: {
								value: bindInfo.num,
								errors: [new Error(t('序列号或安全码错误，请重新输入__mark__'))],
							},
						});
						this.hardTokenFormRef.setFields({
							random: {
								value: bindInfo.random,
								errors: [new Error(t('序列号或安全码错误，请重新输入__mark__'))],
							},
						});
					} else {
						this.softTokenFormRef.setFields({
							random: {
								value: { random1: bindInfo.random1, random2: bindInfo.random2 },
								errors: [new Error(t('安全码错误，请重新输入__mark__'))],
							},
						});
					}
					break;
				case 11018:
					this.softTokenFormRef.setFields({
						random1: {
							value: { random1: bindInfo.random1, random2: bindInfo.random2 },
							errors: [new Error(t('密钥已失效，请重新扫描二维码并输入两组安全码__mark__'))],
						},
					});
					this.props.updateGlobalInfo({ qrcodeUrl: `${QRCODE_URL}?t=${Date.now()}` });
					break;
				default:
					utils.showErrorTips(e.msg || t('MFA设备绑定失败__mark__'));
			}
		}
	}

	async componentDidMount() {
		const { loginUin } = await app.user.current();
		let authFlagInfo;
		let tokenInfo;
		let whiteList;
		try {
			[authFlagInfo, tokenInfo, whiteList] = await Promise.all([
				developerService.getSafeAuthFlag(), // 安全配置
				developerService.getMFADevice(), // token信息
				commonService.checkWhitelistBatch([
					'MFA_WHITELIST',
					'GOOGLE_AUTH_WHITELIST',
					'CONSOLE_ZH_WHITELIST',
				]),
			]);
		} catch (e) {
			this.props.fail();
			return;
		}

		// 默认是绑定__mark__token
		let apiName = 'BindToken';
		// 已绑定__mark__
		if (tokenInfo.status == TOKEN_STATUS.BINDING) {
			// 当前绑定__mark__类型
			apiName = tokenInfo.tokenType == TOKEN_TYPE.HARDWARE ? 'ModifyToken' : 'ModifyStoken';
		}
		// 校验mfa
		const verifyOK = await app.mfa['verify'](`cam:${apiName}`);
		if (!verifyOK) {
			return this.props.history.push('/developer/security');
		}

		// 开启了哪些flag
		let loginFlag = _.some(_.values(authFlagInfo.loginFlag));
		let actionFlag = _.some(_.values(authFlagInfo.actionFlag));
		let flag = [];
		if (loginFlag) {
			flag.push(FLAG.LOGIN);
		}
		if (actionFlag) {
			flag.push(FLAG.ACTION);
		}
		this.props.updateGlobalInfo({
			router: this.props.history,
			uin: loginUin,
			select__mark__edType: whiteList.MFA_WHITELIST ? TOKEN_TYPE.HARDWARE : TOKEN_TYPE.SOFTWARE,
			flag: flag,
			qrcodeUrl: `${QRCODE_URL}?t=${Date.now()}`,
			whiteList: whiteList,
			// 和翻译无关，只是用于判断软token时，展示google还是小程序码
			lang: whiteList.GOOGLE_AUTH_WHITELIST
				? 'en'
				: site == 1
				? cookie.get('language') === 'zh'
					? 'zh'
					: 'en'
				: 'en',
		});

		this.props.updateAuthFlagInfo(authFlagInfo);
		this.props.updateTokenInfo(tokenInfo);
		this.props.done();
	}

	componentWillUnmount() {
		this.props.clearState();
		clearInterval(this.timerId);
		this.timerId = null;
	}
}

export const DeveloperMfa = function(props) {
	return (
		<Provider store={store}>
			<MFA {...props}></MFA>
		</Provider>
	);
};

export const TOKEN_STATUS = {
	BINDING: 1, // 绑定__mark__中
	FORZEN: 2, // 禁用
	UNBINDING: 3, // 未绑定__mark__
};

export const TOKEN_TYPE = {
	HARDWARE: 1,
	SOFTWARE: 2,
};

export const ACCOUNT_BIND_TYPE = {
	/* eslint-disable @tencent/tea-i18n/no-bare-zh-in-js */
	wechat: '微信公众号',
	weixin: '微信',
	qq: 'QQ',
	mail: '邮箱',
	/* eslint-enable @tencent/tea-i18n/no-bare-zh-in-js */
};

import React from 'react';

import { useHistory, useDocumentTitle } from '@tea/app';
import { Router, Route } from 'react-router-dom';
import { t, Trans } from '@tea/app/i18n';
import { app } from '@tea/app';
import { MainPage } from './MainPage';
import { DeveloperMfa } from '@src/routes/developer-mfa';
import { DeveloperDelete } from '@src/routes/developer-delete';

export function DeveloperSecurity() {
	useDocumentTitle(t('安全设置__mark__'));
	const history = useHistory();
	return (
		<Router history={history}>
			<>
				<Route exact path="/developer/security" component={MainPage} />
				<Route exact path="/developer/security/mfa" component={DeveloperMfa} />
				<Route exact path="/developer/security/delete" component={DeveloperDelete} />
			</>
		</Router>
	);
}

import React from 'react';
import { Layout, PageTitle } from '@src/components';
import { Owner, Cooperator, SubAccount } from './components';
import { connect } from 'react-redux';
import { developerService, commonService } from '@src/services';
import * as utils from '@src/utils';
import { mapDisppatchToProps } from './react-redux/reducer/helper';
import { Dialog, BeforeRenderHOC } from '@src/components';
import cookie from 'js-cookie';
import { app } from '@tea/app';
import { TopTips, TYPE } from './components/TopTips';
import { t, Trans } from '@tea/app/i18n';
import Guide from './components/Guide';
import { ErrorPage } from '@src/components/ErrorPage';
import { NotPermission } from '@src/components/NotPermission';
import { Provider } from 'react-redux';
import { store } from './react-redux/store';
import objectPath from 'object-path';

const GuideLink = () => {
	return (
		<a
			href="https://cloud.tencent.com/document/product/378/8392"
			target="_blank"
			className="guide-link"
		>
			<Trans>账号安全使用指南__mark__</Trans>
			<b className="external-link-icon"></b>
		</a>
	);
};

const mapStateToProps = state => {
	return state;
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
@BeforeRenderHOC
class Security extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			codeUrl: null,
			type: 'empty',
		};
	}
	render() {
		const { userInfo, lang } = this.props;

		// loading态，先不显示，由BeforeRenderHOC注入的props
		if (this.props.loading) {
			return null;
		}

		// 加载数据失败，显示错误，由BeforeRenderHOC注入的props
		if (this.props.haveError) {
			return <ErrorPage />;
		}

		// 屏蔽IDP用户
		if (this.props.forbidden) {
			return <NotPermission />;
		}

		const extra = lang == 'zh' ? <GuideLink></GuideLink> : null;

		return (
			<>
				<Layout title={t('安全设置__mark__')} extra={extra}>
					<Layout.Body>
						{<TopTips {...this.state} userInfo={userInfo}></TopTips>}
						{userInfo.role == 'owner' ? (
							<Owner></Owner>
						) : userInfo.role == 'cooperator' ? (
							<Cooperator></Cooperator>
						) : userInfo.role == 'subaccount' || userInfo.role == 'wechatcorp' ? (
							<SubAccount></SubAccount>
						) : null}
					</Layout.Body>
				</Layout>
				<Guide></Guide>
				<Dialog
					{...this.props.dialogInfo}
					onClose={() => {
						this.props.resetDialogInfo({ visible: false });
					}}
				></Dialog>
			</>
		);
	}

	async componentDidMount() {
		// 渲染右侧工单智能助手
		utils.renderHelper();
		this.props.updateGlobalInfo({ router: this.props.history, lang: cookie.get('language') });

		let data;
		try {
			data = await developerService.getCurrentUserInfoV2();

			// 判断是否是idp用户，是的话就屏蔽
			if (data.userInfo.srcPlatform && utils.isIdpUser(data.userInfo.srcPlatform)) {
				return this.props.forbid();
			}

			this.props.done();
		} catch (e) {
			this.props.fail();
			return;
		}

		// 注入一__mark__些字段
		const { isOwner, ownerUin } = await app.user.current();
		let role;
		if (isOwner) {
			role = 'owner';
		} else if (data.userInfo.subSystemType == 'WechatCorp') {
			role = 'wechatcorp';
		} else if (data.userInfo.subSystemType == 'SubAccount') {
			role = 'subaccount';
		} else {
			role = 'cooperator';
		}

		let isIntl = utils.isIntl();

		Object.assign(data.userInfo, {
			isOwner,
			ownerUin,
			role,
			isIntl,
		});

		if (!isOwner) {
			const collInfo = data.collInfo;

			Object.assign(data.userInfo, {
				coll_tel: utils.maskPhoneNumber(objectPath.get(collInfo, 'phoneNumber', '')),
				coll_countryCode: objectPath.get(collInfo, 'countryCode', ''),
				coll_mail: utils.maskMail(objectPath.get(collInfo, 'mail', '')),
			});
		}

		this.props.updateUserInfo(data.userInfo);

		// 查询白名单
		commonService.checkWhitelistBatch(['THIRDPARTY_MFA_VERIFY']).then(whiteList => {
			this.props.updateGlobalInfo({ whiteList: whiteList });
		});

		developerService.getMFADevice().then(data => {
			this.props.updateTokenInfo(data);
		});

		developerService.getWechatBindInfo().then((wechatBindInfo = {}) => {
			this.props.updateSafeAuthFlag({ wechatUnionId: wechatBindInfo.unionid || '' });
		});

		Promise.all([
			developerService.getSafeAuthFlag(),
			developerService.checkReceiverInfo().catch(() => {
				return {};
			}),
		]).then(async resp => {
			const [data, contactInfo__mark__] = resp;
			const { PhoneEqual, MailEqual } = contactInfo__mark__;

			this.props.updateSafeAuthFlag(data);
			if (!PhoneEqual || !MailEqual) {
				return this.setState({ type: TYPE.phoneOrMailTpl });
			}
			const { offsiteFlag = {} } = data;
			const { tips } = offsiteFlag;
			if (isOwner) {
				if (isIntl) {
					this.setState({ type: TYPE.ownerTpl });
				} else {
					if (tips == 0) {
						try {
							const isFollow = await developerService.queryIsFollowMP();
							if (isFollow) {
								this.setState({ type: TYPE.loginExceptionTpl });
							} else {
								const codeUrl = await developerService.createSubscribeQRCode({
									from: 'console_developer_security',
								});
								if (codeUrl) {
									this.setState({ codeUrl: codeUrl, type: TYPE.focusMPTpl });
								} else {
									this.setState({ type: TYPE.ownerTpl });
								}
							}
						} catch (e) {
							this.setState({ type: TYPE.ownerTpl });
						}
					} else {
						this.setState({ type: TYPE.ownerTpl });
					}
				}
			} else {
				this.setState({ type: TYPE.subuserTpl });
			}
		});
	}

	// 重置state
	componentWillUnmount() {
		utils.removeHelper();
		this.props.clearState();
	}
}

export const MainPage = function(props) {
	return (
		<Provider store={store}>
			<Security {...props}></Security>
		</Provider>
	);
};

import React from 'react';
import { app } from '@tea/app';
import { Layout } from '@src/components';
import { developerService } from '@src/services';
import { t, Trans } from '@tea/app/i18n';
import classnames from 'classnames';
import _ from 'underscore';
import { BeforeRenderHOC } from '@src/components';
import { ErrorPage } from '@src/components/ErrorPage';
import { NotPermission } from '@src/components/NotPermission';
import { BackBtn } from '@src/components/BackBtn';
@BeforeRenderHOC
export class DeveloperContainer extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			data: {},
		};
	}
	async componentDidMount() {
		const { isOwner } = await app.user.current();
		if (!isOwner) {
			this.props.forbid();
			return;
		}
		try {
			const data = await developerService.getCredit();
			this.setState({ data: data });
			this.props.done();
		} catch (e) {
			this.props.fail();
		}
	}

	render() {
		const { data } = this.state;
		if (this.props.loading) {
			return null;
		}

		// 加载数据失败，显示错误，由BeforeRenderHOC注入的props
		if (this.props.haveError) {
			return <ErrorPage />;
		}
		if (this.props.forbidden) {
			return <NotPermission />;
		}
		return (
			<Layout title={<BackBtn title={t('账号信息__mark__')} url={'/developer'}></BackBtn>}>
				<Layout.Body>
					<div className="tc-unit-panel">
						<div className="tc-panel">
							<div className="tc-panel-bd">
								<div className="tc-g">
									<div className="tc-g-u-1-3">
										<div className="tc-data-card">
											<div className="tc-data-card-hd">
												<div className="text-label">
													<Trans>会员等级__mark__</Trans>
													<div className="tc-15-bubble-icon">
														<i className="tc-icon icon-what"></i>
														<div className="tc-15-bubble tc-15-bubble-left">
															<div className="tc-15-bubble-inner">
																<p>
																	<Trans>月消耗和会员等级关系__mark__</Trans>
																</p>
																<p>
																	<Trans>1星会员：大于0__mark__</Trans>
																</p>
																<p>
																	<Trans>2星会员：大于1000__mark__</Trans>
																</p>
																<p>
																	<Trans>3星会员：大于5000__mark__</Trans>
																</p>
															</div>
														</div>
													</div>
												</div>
											</div>
											<div className="tc-data-card-bd">
												<div className="mini-star-rating">
													<span
														className={classnames('mini-star-icon', { active: data.level >= 1 })}
													></span>
													<span
														className={classnames('mini-star-icon', { active: data.level >= 2 })}
													></span>
													<span
														className={classnames('mini-star-icon', { active: data.level >= 3 })}
													></span>
												</div>
												<span className="msg">
													{['0', t('一__mark__'), t('二__mark__'), t('三__mark__')][data.level]}
													<Trans>星__mark__</Trans>
												</span>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div className="tc-unit-panel">
						<div className="tc-panel">
							<div className="tc-panel-hd">
								<h3 className="title">
									<Trans>会员特权__mark__</Trans>
								</h3>
							</div>
							<div className="tc-panel-bd">
								<div className=" panel-table">
									<div className="tc-15-table-panel table-type-card">
										<div className="tc-15-table-fixed-head">
											<table className="tc-15-table-box">
												<colgroup>
													<col></col>
													<col></col>
												</colgroup>
												<thead>
													<tr>
														<th title={t('特权__mark__')}>
															<div>
																<span className="text-overflow">
																	<Trans>特权__mark__</Trans>
																</span>
															</div>
															<i className="resize-line-icon"></i>
														</th>
														<th title={t('1星会员__mark__')}>
															<div>
																<span className="text-overflow">
																	<Trans>1星会员__mark__</Trans>
																</span>
															</div>
															<i className="resize-line-icon"></i>
														</th>
														<th title={t('2星会员__mark__')}>
															<div>
																<span className="text-overflow">
																	<Trans>2星会员__mark__</Trans>
																</span>
															</div>
															<i className="resize-line-icon"></i>
														</th>
														<th title={t('3星会员__mark__')}>
															<div>
																<span className="text-overflow">
																	<Trans>3星会员__mark__</Trans>
																</span>
															</div>
															<i className="resize-line-icon"></i>
														</th>
													</tr>
												</thead>
											</table>
										</div>
										<div className="tc-15-table-fixed-body">
											<table className="tc-15-table-box tc-15-table-rowhover">
												<colgroup>
													<col></col>
													<col></col>
												</colgroup>
												<tbody>
													<tr>
														<td title={t('特权__mark__')}>
															<div>
																<span className="text-overflow">
																	<Trans>免费套餐__mark__</Trans>
																</span>
															</div>
														</td>
														<td title={t('1星会员__mark__')}>
															<div>
																<p>
																	<span className="text-overflow">
																		<Trans>每邀请一个用户__mark__</Trans>
																	</span>
																</p>
																<p>
																	<span className="text-overflow">
																		<Trans>奖励15天CVM时长__mark__</Trans>
																	</span>
																</p>
															</div>
														</td>
														<td title={t('2星会员__mark__')}>
															<div>
																<p>
																	<span className="text-overflow">
																		<Trans>每邀请一个用户__mark__</Trans>
																	</span>
																</p>
																<p>
																	<span className="text-overflow">
																		<Trans>奖励15天CVM时长__mark__</Trans>
																	</span>
																</p>
															</div>
														</td>
														<td title={t('3星会员__mark__')}>
															<div>
																<p>
																	<span className="text-overflow">
																		<Trans>每邀请一个用户__mark__</Trans>
																	</span>
																</p>
																<p>
																	<span className="text-overflow">
																		<Trans>奖励15天CVM时长__mark__</Trans>
																	</span>
																</p>
															</div>
														</td>
													</tr>
													<tr>
														<td title={t('特权__mark__')}>
															<div>
																<span className="text-overflow">
																	<Trans>云审计-操作记录__mark__</Trans>
																</span>
															</div>
														</td>
														<td title={t('1星会员__mark__')}>
															<div>
																<span className="text-overflow">/</span>
															</div>
														</td>
														<td title={t('2星会员__mark__')}>
															<div>
																<span className="text-overflow">
																	<Trans>由7天延长至30天__mark__</Trans>
																</span>
															</div>
														</td>
														<td title={t('3星会员__mark__')}>
															<div>
																<span className="text-overflow">
																	<Trans>由7天延长至30天__mark__</Trans>
																</span>
															</div>
														</td>
													</tr>
													<tr>
														<td title={t('特权__mark__')}>
															<div>
																<span className="text-overflow">
																	<Trans>更多特权__mark__</Trans>
																</span>
															</div>
														</td>
														<td title={t('1星会员__mark__')}>
															<div>
																<span className="text-overflow">
																	<Trans>敬请期待__mark__</Trans>
																</span>
															</div>
														</td>
														<td title={t('2星会员__mark__')}>
															<div>
																<span className="text-overflow">
																	<Trans>敬请期待__mark__</Trans>
																</span>
															</div>
														</td>
														<td title={t('3星会员__mark__')}>
															<div>
																<span className="text-overflow">
																	<Trans>敬请期待__mark__</Trans>
																</span>
															</div>
														</td>
													</tr>
												</tbody>
											</table>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</Layout.Body>
			</Layout>
		);
	}
}

import React from 'react';
import { DeveloperContainer } from './DeveloperContainer';
import { useHistory, useDocumentTitle } from '@tea/app';
import { t, Trans } from '@tea/app/i18n';
import { app } from '@tea/app';
export function DeveloperVip() {
	useDocumentTitle(t('账号信息__mark__'));
	return <DeveloperContainer />;
}

export * from './DeveloperVip';
import React, { useEffect } from 'react';
import { Provider, useSelector, useDispatch } from 'react-redux';
import { Router, Route } from 'react-router-dom';
import { useHistory } from '@tea/app';
import { SessionProvider } from '@src/decorators';
import { store } from '@src/store';
import Main from './Main';
import Modify from './Modify';
import { AuthContextProvider } from './contexts/AuthContext';

export function Entry() {
	const history = useHistory();

	return (
		<SessionProvider>
			<Provider store={store}>
				<Router history={history}>
					<AuthContextProvider>
						<Route path="/developer/auth/modify" component={Modify} />
						<Route path="/developer/auth" component={Main} exact />
					</AuthContextProvider>
				</Router>
			</Provider>
		</SessionProvider>
	);
}

import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { AuthScene, AuthState, AuthFlag } from '@src/instances/auth';
import { ChooseType, Enterprise, Personal, Result } from './scenes';
import { Error } from '../_shared/components';
import { useHistory } from '@tencent/tea-app';

export default () => {
	const history = useHistory();
	const { currentScene } = useSelector(state => state.auth);
	const { authInfo } = useSelector(state => state.auth);
	const { auth } = useDispatch();
	const [ready, setReady] = useState(false);

	useEffect(() => {
		async function init() {
			await auth.loadMain();
			setReady(true);
		}
		init();
	}, []);

	// 兼容老逻辑
	useEffect(() => {
		// 由于 authInfo 是共享的，因此 ready 来确保 authInfo 是最新的
		if (
			ready &&
			authInfo &&
			authInfo.authState !== AuthState.SUCC &&
			authInfo.authFlag === AuthFlag.STALE
		) {
			history.replace('/developer/auth/modify');
		}
	}, [authInfo, ready]);

	switch (currentScene) {
		case AuthScene.Error:
			return <Error message="加载异常" />;
		case AuthScene.ChooseAuthType:
			return <ChooseType />;
		case AuthScene.AuthEnterprise:
			return <Enterprise />;
		case AuthScene.AuthPersonal:
			return <Personal />;
		case AuthScene.Result:
			return <Result />;
		default:
			return null;
	}
};

import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { useHistory } from '@tea/app';
import { AuthScene, AuthFlag, AuthType } from '@src/instances/auth';
import { Error } from '../_shared/components';
import {
	ModifyIdentityGuide,
	ModifyIdentity,
	ModifyPersonalIdentityGuide,
	ModifyPersonalIdentity,
} from './scenes';

export default () => {
	const history = useHistory();
	const { authInfo, modifyLimit, currentScene } = useSelector(state => state.auth);
	const { auth } = useDispatch();
	const [ready, setReady] = useState(false);

	useEffect(() => {
		async function init() {
			try {
				await auth.loadModify();
				setReady(true);
			} catch (e) {
				console.error(e);
			}
		}
		init();
	}, []);

	useEffect(() => {
		if (!ready || !authInfo) {
			return;
		}

		if (
			// 从未认证__mark__过无法进入__mark__修改__mark__页面
			authInfo.authFlag === AuthFlag.FRESH ||
			// 当前主体为企业并且有时间限制
			(modifyLimit === 'LimitExceeded.TimeTooShort' && AuthType.Enterprise === authInfo.authType)
		) {
			history.replace('/developer/auth');
		}
	}, [ready, authInfo, modifyLimit]);

	switch (currentScene) {
		case AuthScene.Error:
			return <Error message="加载异常" />;
		case AuthScene.ModifyIdentityGuide:
			return <ModifyIdentityGuide />;
		case AuthScene.ModifyIdentity:
			return <ModifyIdentity />;
		case AuthScene.ModifyPersonalIdentityGuide:
			return <ModifyPersonalIdentityGuide />;
		case AuthScene.ModifyPersonalIdentity:
			return <ModifyPersonalIdentity />;
		default:
			return null;
	}
};

import React from 'react';
import { connect } from 'react-redux';
import { Redirect } from 'react-router-dom';
import { ChooseType, Personal, Enterprise, ModifyIdentity, Result, Error } from './scenes';
import { AuthScene, AuthFlag, AuthState } from '@src/instances/auth';
import { withSession } from '@src/decorators';
import { Button, Modal } from '@tencent/tea-component';
import { app } from '@tencent/tea-app';
import { t } from '@tea/app/i18n';
import { INTERNATIONAL_CREDIT_CARD } from '@src/instances/whitelist';
import { setDocumentTitle } from '@tencent/tea-app/lib/bridge';

const mapStateToProps = state => ({ current: state.auth });
const mapDispatchToProps = dispatch => dispatch.auth;
// @ts-ignore
@connect(
	mapStateToProps,
	mapDispatchToProps,
)
@withSession()
export class Page extends React.Component {
	render() {
		const { current, session, match } = this.props;
		const { currentScene, authInfo } = current;
		const {
			params: { action = 'auth' },
		} = match;

		if (!session.isOwner) {
			return this.renderForibiden();
		}

		if (currentScene === AuthScene.Error) {
			return this.renderPageError();
		}

		if (currentScene === AuthScene.INIT || !authInfo) {
			return null;
		}

		const { authState, authFlag } = authInfo;

		if (action === 'auth') {
			if (authState !== AuthState.SUCC && authFlag === AuthFlag.STALE) {
				return <Redirect to="/developer/auth/modify" />;
			} else {
				switch (currentScene) {
					case AuthScene.ChooseAuthType:
						return <ChooseType />;
					case AuthScene.AuthEnterprise:
						return <Enterprise />;
					case AuthScene.AuthPersonal:
						return <Personal />;
					case AuthScene.Result:
						return <Result />;
					default:
						return null;
				}
			}
		} else if (action === 'modify') {
			if (authState !== AuthState.SUCC && authFlag === AuthFlag.FRESH) {
				return <Redirect to="/developer/auth" />;
			} else {
				return <ModifyIdentity />;
			}
		} else {
			return <Redirect to="/developer/auth" />;
		}
	}

	renderForibiden() {
		const { history } = this.props;

		return <Error history={history} message="协作者__mark__或子账号无权限查看实名认证__mark__信息" />;
	}

	renderPageError() {
		const { init, history } = this.props;

		return (
			<Error
				history={history}
				message="页面加载失败, 请稍后重试"
				buttons={[
					<Button type="primary" onClick={() => init()}>
						刷新重试
					</Button>,
				]}
			/>
		);
	}

	componentDidMount() {
		const { init, session } = this.props;

		if (session.isOwner) {
			init();
		}

		this.checkIntlCreditCardUserAccess();

		setDocumentTitle(t('实名认证__mark__'));
	}

	/**
	 * 查询是否是存量国际信用卡认证用户
	 * 如果是，则需要显示阻断弹窗
	 */
	async checkIntlCreditCardUserAccess() {
		let match = true;

		try {
			match = Boolean(await app.user.checkWhitelist(INTERNATIONAL_CREDIT_CARD));
		} catch (e) {
			return;
		}

		if (!match) {
			return;
		}

		Modal.alert({
			type: 'error',
			message: '实名认证__mark__信息补充提醒',
			description:
				'当前账号实名信息__mark__不完整，请提交__mark__工单补充资料。个人用户请提供护照__mark__首页和护照__mark__号， 企业用户请提供营业执照。',
			buttons: [
				<Button
					type="primary"
					onClick={() =>
						(location.href =
							'https://console.cloud.tencent.com/workorder/category?level1_id=1&level2_id=41&source=0&data_title=账号中心&step=1')
					}
				>
					提交__mark__工单
				</Button>,
				<Button
					onClick={() => {
						const referrer = document.referrer;
						const current = location.href.split('?')[0];

						// 跳回原来页面
						if (referrer !== current) {
							location.href = referrer;
						} else {
							location.href = '/';
						}
					}}
				>
					取消__mark__
				</Button>,
			],
		});
	}
}

import React from 'react';
import { Provider as ReduxProvider } from 'react-redux';
import { Page } from './Page';
import { store } from '@src/store';
import { SessionProvider } from '@src/decorators';

export function Entry() {
	return (
		<SessionProvider>
			<ReduxProvider store={store}>
				<Page />
			</ReduxProvider>
		</SessionProvider>
	);
}

import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { app, i18n } from '@tea/app';
import useAsync from 'react-use/lib/useAsync';
import { AuthScene } from '@src/instances/auth';
import { Personal } from './scene/Personal';
import { Enterprise } from './scene/Enterprise';
import { ChooseType } from './scene/ChooseType';
import { Result } from './scene/Result';
import { Error } from '../_shared/components';
import { AgreemeentModal } from './components/AgreementModal';
import { Interceptor } from './components/Interceptor';

const { t } = i18n;

export function Page() {
	const initState = useAsync(() => init());
	const { scene } = useSelector(state => state.auth);
	const {
		auth: { init },
	} = useDispatch();

	useEffect(() => {
		if (initState.error) {
			app.tips.error(initState.error.message);
		}
	}, [initState]);

	let sceneEle;

	switch (scene) {
		case AuthScene.ChooseAuthType:
			sceneEle = <ChooseType />;
			break;
		case AuthScene.Result:
			sceneEle = <Result />;
			break;
		case AuthScene.AuthPersonal:
			sceneEle = <Personal />;
			break;
		case AuthScene.AuthEnterprise:
			sceneEle = <Enterprise />;
			break;
		default:
			sceneEle = null;
			break;
	}

	return <Interceptor>{sceneEle}</Interceptor>;
}

export * from './Owner';
export * from './Cooperator';
export * from './SubAccount';
export * from './Wechatcorp';
export * from './TopTips';

export * from './Owner';
export * from './Cooperator';
export * from './SubAccount';
import React, { Fragment, useState, useEffect } from 'react';
import { Text } from '@tea/component/text';
import { autotip } from '@tea/component/table/addons/autotip';
import { usePollingTask } from '@src/hooks';
import { QRCode } from '@src/components';
import { createFacialDetectUrl } from '@src/utils';
import { FaceDetectStatus } from '@src/instances/common/face';

export function DetectQRCode({
	name,
	fetchApi,
	pollingApi,
	onStateChange,
	naked = false,
	bordered = true,
}) {
	const [qrcodeUrl, setQRCodeUrl] = useState(null);
	const { loading, error, result, stop, retry } = usePollingTask({
		fetchApi,
		pollingApi: result => {
			return pollingApi(result)
				.then(({ status }) => {
					if (status === FaceDetectStatus.Success) {
						return true;
					} else if (status === FaceDetectStatus.Fail) {
						// 如果返回__mark__了失败，则重新刷新二维码__mark__
						retry();
					}

					return false;
				})
				.catch(e => {
					// 二维码__mark__过期
					if (e.code === 'FailedOperation.TokenExpired') {
						setExpired(true);
						setQRCodeUrl(null);
						stop();
					}
					return false;
				});
		},
		onStateChange,
	});
	const [expired, setExpired] = useState(false);
	// 二维码__mark__加载失败
	const [loadError, setLoadError] = useState(null);

	useEffect(() => {
		if (result) {
			setQRCodeUrl(createFacialDetectUrl({ token: result.detectToken }));
		}
	}, [result]);

	function handleRetry() {
		if (error) {
			retry();
		} else if (loadError) {
			setLoadError(null);
			setQRCodeUrl(createFacialDetectUrl({ token: result.detectToken }));
		}
	}

	function renderBottomTip() {
		if (error) {
			return (
				<span className="text-danger">
					二维码__mark__生成失败，您可以 <a onClick={handleRetry}>刷新重试</a>
				</span>
			);
		} else if (loadError) {
			return (
				<span className="text-danger">
					二维码__mark__加载失败，您可以 <a onClick={handleRetry}>刷新重试</a>
				</span>
			);
		} else if (expired) {
			return (
				<span className="text-danger">
					二维码__mark__已过期，
					<a
						onClick={() => {
							setExpired(false);
							retry();
						}}
					>
						刷新二维码__mark__
					</a>
				</span>
			);
		}

		return <span>系统将自动审核，并实时反馈审核结果</span>;
	}

	return (
		<Fragment>
			{!naked && (
				<>
					<p>
						为了验证您的身份（<Text theme="warning">{name}</Text>），请使用微信扫码进行人脸识别
					</p>
					<p>验证过程中请勿关闭此页面</p>
				</>
			)}
			<QRCode
				className="tea-mt-2n"
				sourceFormat="url"
				source={qrcodeUrl}
				size={160}
				loading={loading}
				status={expired || loadError ? 'error' : null}
				message={expired ? '二维码__mark__已过期' : null}
				onError={e => setLoadError(e)}
				bordered={bordered}
			/>
			<p className="text-label tea-mt-2n">{renderBottomTip()}</p>
		</Fragment>
	);
}

import React, { Component, Fragment } from 'react';
import _ from 'underscore';
import objectPath from 'object-path';
import pify from 'pify';
import { Input, Button } from '@tencent/tea-component';
import { Segment } from '@tea/component/segment';
import { Form, Location, Phone, Textarea, TradeSelector, CountDown } from '@src/components';
import { ValidateRules } from '@src/instances/validate-rules';
import { convertToEntityList } from '@src/utils';
import { AuthArea, AuthAreaCollection } from '@src/instances/auth';
import tcaptcha from '@src/libs/tcaptcha';
import { commonService } from '@src/services';
import { app } from '@tencent/tea-app';

const FormItem = Form.Item;

const AuthAreaEntityList = convertToEntityList(AuthAreaCollection).map(({ id, name }) => {
	const disabled = id !== AuthArea.Mainland;
	const tooltip = disabled ? '非大陆地区__mark__用户，请前往国际站注册认证' : null;
	return {
		text: name,
		value: String(id),
		disabled,
		tooltip,
	};
});

@Form.create()
export class EnterpriseBaseForm extends Component {
	render() {
		const { form, formData, formFields, onToggleContactField } = this.props;
		const { getFieldDecorator } = form;
		const contact = formData.contact || {};

		return (
			<div>
				<Form>
					{formFields.includes('area') && (
						<FormItem label="认证地区__mark__" required>
							<Segment options={AuthAreaEntityList} value={String(AuthArea.Mainland)} />
						</FormItem>
					)}
					{formFields.includes('name') && (
						<FormItem label="企业名称__mark__" required>
							{getFieldDecorator('name', {
								initialValue: formData.name || '',
								rules: [
									{ required: true, message: '企业名称__mark__不能为空__mark__' },
									ValidateRules['company-name-with-whitelist'],
								],
								clearErrorTrigger: 'onChange',
							})(<Input placeholder="请填写企业名称__mark__" size="l" />)}
						</FormItem>
					)}
					{formFields.includes('phoneInfo') && (
						<Fragment>
							<FormItem label="安全手机__mark__" className="list-3" required>
								{getFieldDecorator('phoneInfo', {
									initialValue: { countryCode: 86, phoneNumber: '' },
									rules: [{ required: true, message: '安全手机__mark__不能为空__mark__' }, ValidateRules['phone']],
									clearErrorTrigger: 'onChange',
								})(<Phone placeholder="请补充安全手机__mark__" />)}
							</FormItem>
							<FormItem label="手机验证码__mark__" className="list-3" required>
								{getFieldDecorator('captcha', {
									initialValue: '',
									rules: [
										{ required: true, message: '验证码不能为空__mark__' },
										ValidateRules['numeric_captcha'],
									],
									clearErrorTrigger: 'onChange',
								})(<Input placeholder="请填写6位数字验证码__mark__" />)}
								<CountDown total={60}>
									{({ count, round, isRunning, start }) => {
										let buttonText;
										if (isRunning) {
											buttonText = `${count}秒后重发`;
										} else {
											buttonText = round === 0 ? '发送验证码__mark__' : '重新发送验证码__mark__';
										}
										return (
											<Button
												className="ml-5"
												disabled={isRunning}
												onClick={() => this.handleFetchVCode(start)}
											>
												{buttonText}
											</Button>
										);
									}}
								</CountDown>
							</FormItem>
						</Fragment>
					)}
					{formFields.includes('tradeInfo') && (
						<FormItem label="行业信息" className="list-3" required>
							{getFieldDecorator('tradeInfo', {
								initialValue: { tradeOne: '', tradeTwo: '' },
								rules: [ValidateRules['trade']],
								clearErrorTrigger: 'onChange',
							})(<TradeSelector />)}
						</FormItem>
					)}
					{formFields.includes('location') && (
						<Fragment>
							<FormItem label="通讯地址__mark__" className="list-3" required>
								{getFieldDecorator('location', {
									initialValue: _.pick(formData.location || {}, [
										'provinceId',
										'cityId',
										'districtId',
									]),
									rules: [
										{ required: true, message: '请选择__mark__通讯地址__mark__' },
										ValidateRules['province_city_disrict'],
									],
									clearErrorTrigger: 'onChange',
								})(<Location />)}
							</FormItem>
							<FormItem>
								{getFieldDecorator('address', {
									initialValue: objectPath.get(formData, 'location.address', ''),
									rules: [{ required: true, message: '详细通讯地址__mark__不能为空__mark__' }],
									clearErrorTrigger: 'onChange',
								})(<Textarea type="text" placeholder="请填写详细的通讯地址__mark__" />)}
							</FormItem>
						</Fragment>
					)}
					{formFields.includes('contactHint') && (
						<Form.Pure label="选填信息">
							<div className="form-text">
								<p>应国家规定，企业使用CDN服务需要补充企业联系人信息</p>
								<p>
									<span
										className="text-primary"
										style={{ cursor: 'pointer' }}
										onClick={() => onToggleContactField(!formFields.includes('contact'))}
									>
										{formFields.includes('contact')
											? '隐藏企业联系人信息（选填）'
											: '显示企业联系人信息（选填）'}
									</span>
								</p>
							</div>
						</Form.Pure>
					)}
					{formFields.includes('contact') && (
						<Fragment>
							<FormItem label="真实姓名" required>
								{getFieldDecorator('contact.name', {
									initialValue: contact.name || '',
									rules: [
										{ required: true, message: '真实姓名不能为空__mark__' },
										ValidateRules['personal-name-mainland'],
									],
									clearErrorTrigger: 'onChange',
								})(<Input />)}
							</FormItem>
							<FormItem label="身份证号">
								{getFieldDecorator('contact.idcard', {
									initialValue: contact.idcard || '',
									rules: [
										{ required: true, message: '身份证号码不能为空__mark__' },
										ValidateRules['idcard-mainland'],
									],
									clearErrorTrigger: 'onChange',
								})(<Input placeholder="请填写18位二__mark__代身份证号码" />)}
							</FormItem>
							<FormItem label="联系手机__mark__">
								{getFieldDecorator('contact.phoneInfo', {
									initialValue: {
										countryCode: contact.countryCode || '86',
										phoneNumber: contact.phoneNumber,
									},
									rules: [{ required: true, message: '联系手机__mark__不能为空__mark__' }, ValidateRules['phone']],
									clearErrorTrigger: 'onChange',
								})(<Phone placeholder="请填写联系手机__mark__" />)}
							</FormItem>
						</Fragment>
					)}
				</Form>
			</div>
		);
	}

	handleFetchVCode = async onSuccess => {
		const { form } = this.props;
		const { validateFields } = form;
		let result;

		try {
			result = await pify(validateFields)(['phoneInfo']);
		} catch (e) {
			return;
		}

		const ticket = await tcaptcha.verify();

		const { countryCode, phoneNumber } = result.phoneInfo;

		commonService
			.sendVerifyCode({
				action: 'modifyPhone',
				countryCode,
				phoneNum: phoneNumber,
				type: 1, // 验证码__mark__类型
				...ticket,
			})
			.catch(e => {
				if (e.code === 711001) {
					app.tips.error('操作过于频繁，请稍后重试');
				}
				console.error(e);
			});

		onSuccess();
	};
}

export * from './DetectQRCode';
export * from './EnterpriseBaseForm';
export * from './PersonalBaseForm';
export * from './RadioSelector';
export * from './StepAlert';

import React, { Component, Fragment } from 'react';
import _ from 'underscore';
import objectPath from 'object-path';
import pify from 'pify';
import { app } from '@tea/app';
import { Input, Button } from '@tencent/tea-component';
import { Segment } from '@tea/component/segment';
import { Form, Location, Phone, Textarea, TradeSelector, CountDown } from '@src/components';
import { ValidateRules } from '@src/instances/validate-rules';
import { convertToEntityList } from '@src/utils';
import { AuthArea, AuthAreaCollection } from '@src/instances/auth';
import tcaptcha from '@src/libs/tcaptcha';
import { commonService } from '@src/services';

const FormItem = Form.Item;

const AuthAreaEntityList = convertToEntityList(AuthAreaCollection).map(({ id, name }) => {
	const disabled = id !== AuthArea.Mainland;
	const tooltip = disabled ? '非大陆地区__mark__用户，请前往国际站注册认证' : null;
	return {
		text: name,
		value: String(id),
		disabled,
		tooltip,
	};
});

@Form.create()
export class PersonalBaseForm extends Component {
	render() {
		const { form, formData, formFields } = this.props;
		const { getFieldDecorator } = form;

		return (
			<div>
				<Form>
					{formFields.includes('area') && (
						<FormItem label="认证地区__mark__" required>
							<Segment options={AuthAreaEntityList} value={String(AuthArea.Mainland)} />
						</FormItem>
					)}
					{formFields.includes('name') && (
						<FormItem label="真实姓名" required>
							{getFieldDecorator('name', {
								initialValue: formData.name || '',
								rules: [
									{ required: true, message: '真实姓名不能为空__mark__' },
									ValidateRules['personal-name-mainland'],
								],
								clearErrorTrigger: 'onChange',
							})(<Input placeholder="请填写身份证上的真实姓名" style={{ width: 330 }} />)}
						</FormItem>
					)}
					{formFields.includes('idcard') && (
						<FormItem label="身份证号" required>
							{getFieldDecorator('idcard', {
								initialValue: formData.idcard || '',
								rules: [
									{ required: true, message: '身份证号不能为空__mark__' },
									ValidateRules['idcard-mainland'],
								],
								clearErrorTrigger: 'onChange',
							})(<Input placeholder="请填写18位二__mark__代身份证号码" style={{ width: 330 }} />)}
						</FormItem>
					)}
					{formFields.includes('phoneInfo') && (
						<Fragment>
							<FormItem label="安全手机__mark__" className="list-3" required>
								{getFieldDecorator('phoneInfo', {
									initialValue: { countryCode: 86, phoneNumber: '' },
									rules: [{ required: true, message: '安全手机__mark__不能为空__mark__' }, ValidateRules['phone']],
									clearErrorTrigger: 'onChange',
								})(<Phone placeholder="请补充安全手机__mark__" />)}
							</FormItem>
							<FormItem label="手机验证码__mark__" className="list-3" required>
								{getFieldDecorator('captcha', {
									initialValue: '',
									rules: [
										{ required: true, message: '验证码不能为空__mark__' },
										ValidateRules['numeric_captcha'],
									],
									clearErrorTrigger: 'onChange',
								})(<Input placeholder="请填写6位数字验证码__mark__" />)}
								<CountDown total={60}>
									{({ count, round, isRunning, start }) => {
										let buttonText;
										if (isRunning) {
											buttonText = `${count}秒后重发`;
										} else {
											buttonText = round === 0 ? '发送验证码__mark__' : '重新发送验证码__mark__';
										}
										return (
											<Button
												className="ml-5"
												disabled={isRunning}
												onClick={() => this.handleFetchVCode(start)}
											>
												{buttonText}
											</Button>
										);
									}}
								</CountDown>
							</FormItem>
						</Fragment>
					)}
					{formFields.includes('tradeInfo') && (
						<FormItem label="行业信息" className="list-3" required>
							{getFieldDecorator('tradeInfo', {
								initialValue: { tradeOne: '', tradeTwo: '' },
								rules: [ValidateRules['trade']],
								clearErrorTrigger: 'onChange',
							})(<TradeSelector />)}
						</FormItem>
					)}
					{formFields.includes('location') && (
						<Fragment>
							<FormItem label="通讯地址__mark__" className="list-3" required>
								{getFieldDecorator('location', {
									initialValue: _.pick(formData.location || {}, [
										'provinceId',
										'cityId',
										'districtId',
									]),
									rules: [
										{ required: true, message: '请选择__mark__通讯地址__mark__' },
										ValidateRules['province_city_disrict'],
									],
									clearErrorTrigger: 'onChange',
								})(<Location />)}
							</FormItem>
							<FormItem>
								{getFieldDecorator('address', {
									initialValue: objectPath.get(formData, 'location.address', ''),
									rules: [
										{ required: true, message: '详细通讯地址__mark__不能为空__mark__' },
										ValidateRules['address'],
									],
									clearErrorTrigger: 'onChange',
								})(<Textarea type="text" placeholder="请填写详细的通讯地址__mark__" />)}
							</FormItem>
						</Fragment>
					)}
				</Form>
			</div>
		);
	}

	handleFetchVCode = async onSuccess => {
		const { form } = this.props;
		const { validateFields } = form;
		let result;

		try {
			result = await pify(validateFields)(['phoneInfo']);
		} catch (e) {
			return;
		}

		const ticket = await tcaptcha.verify();

		const { countryCode, phoneNumber } = result.phoneInfo;

		commonService
			.sendVerifyCode({
				action: 'modifyPhone',
				countryCode,
				phoneNum: phoneNumber,
				type: 1, // 验证码__mark__类型
				...ticket,
			})
			.catch(e => {
				if (e.code === 711001) {
					app.tips.error('操作过于频繁，请稍后重试');
				}
				console.error(e);
			});

		onSuccess();
	};
}

import React from 'react';
import classNames from 'classNames';
import { Tooltip } from '@tea/component';

export function RadioSelector({ options, value, onChange }) {
	return (
		<div className="rich-radiogroup" role="radiogroup">
			{options.map((item, index) => (
				<RadioSelectorOption
					key={index}
					{...item}
					select__mark__ed={item.value === value}
					onSelect={value => onChange(value)}
				/>
			))}
		</div>
	);
}

export function RadioSelectorOption({
	name,
	description,
	value,
	select__mark__ed,
	disabled = false,
	tooltip = null,
	onSelect,
}) {
	return (
		<Tooltip title={tooltip}>
			<div
				className={classNames('item', { checked: select__mark__ed, disabled })}
				role="radio"
				aria-checked="true"
				onClick={() => {
					!disabled && onSelect(value);
				}}
			>
				<strong>{name}</strong>
				{description}
			</div>
		</Tooltip>
	);
}

RadioSelector.Option = RadioSelectorOption;

import { useRef, useEffect } from 'react';
import ReactDOM from 'react-dom';

export const StepAlertContainerId = 'deveploer-step-alert-container';

export const StepAlert = ({ children }) => {
	const ref = useRef(document.getElementById(StepAlertContainerId));

	if (!ref.current) {
		return null;
	}

	return ReactDOM.createPortal(children, ref.current);
};

import React from 'react';

export function StepController({ current, flowName, data, actions, registry }) {
	const StepComponent = current ? registry[current] : null;
	if (!StepComponent) {
		return null;
	}
	return (
		<StepComponent
			flowName={flowName}
			stepInfo={data[current] || {}}
			stepData={data}
			onNext={actions.next}
			onPrev={actions.prev}
			onGoto={actions.goto}
			onUpdate={actions.update}
			onRestart={actions.restart}
		/>
	);
}

import React, { useState } from 'react';
import classNames from 'classnames';
import Dropzone from 'react-dropzone';
import { humanReadable } from '@src/utils';
import dateformat from 'dateformat';
import objectPath from 'object-path';
import { Icon } from '@tencent/tea-component';

const Placeholder = {
	File: 'https://imgcache.qq.com/open_proj/proj_qcloud_v2/mc_2014/user/auth/css/mod/img/file.svg',
	Image: 'https://imgcache.qq.com/open_proj/proj_qcloud_v2/bee-v2/css/img/upload-img.png',
};

/**
 * @param {*} props
 */
export function UploadBox({
	fileName,
	accept = '*',
	maxFileSize = 2 * 1024 * 1024,
	upload,
	onChange,
	help = '',
	exampleUrl = null,
}) {
	const [uploading, setUploading] = useState(false);
	const [file, setFile] = useState(null);
	const [placeholder, setPlaceholder] = useState(null);
	const [uploadInfo, setUploadInfo] = useState(null);
	const [error, setError] = useState(null);

	const onFileAccepted = async (acceptedFiles, originalFiles) => {
		setError(null);

		// 优先取 accepted，没有则取 orginal
		const file = acceptedFiles[0] || originalFiles[0];

		if (!file) {
			return;
		}

		const extname = file.name
			.split('.')
			.pop()
			.toLowerCase();
		const isImage = /\.(jpe?g|png)$/i.test(file.name);

		if (accept !== '*' && accept.indexOf(extname) === -1) {
			setError(`仅支持上传${humanReadable.fileTypes(accept)}文件`);
			return;
		}

		if (maxFileSize < file.size) {
			setError(`文件大小不能超过${humanReadable.bytes(maxFileSize)}`);
			return;
		}

		setFile(file);
		setPlaceholder(isImage ? '' : Placeholder.File);
		setUploadInfo(null);
		setUploading(true);

		try {
			const { url } = await upload({
				file,
				fileName: file.name,
			});
			onChange(url);
			setUploadInfo({
				url,
				createTime: dateformat(new Date(), 'yyyy-mm-dd HH:MM:ss'),
				previewUrl: isImage ? URL.createObjectURL(file) : null,
			});
		} catch (e) {
			console.error(e);
			setError('上传失败');
			setFile(null);
			setPlaceholder(null);
		} finally {
			setUploading(false);
		}
	};

	const onFileDelete = () => {
		onChange(null);
		setUploadInfo(null);
		setFile(null);
	};

	return (
		<div className={classNames('upload-box', { 'is-error': Boolean(error) })}>
			<div className="upload-box-tit">{fileName}</div>
			<div className="upload-box-con form-unit form-upload-img">
				<Dropzone accept={accept} maxSize={maxFileSize} onDrop={onFileAccepted}>
					{({ getRootProps, getInputProps, isDragActive }) => {
						return file ? (
							<div className="tc-upload-box">
								<div className="col">
									<img src={objectPath.get(uploadInfo, 'previewUrl') || placeholder} alt="" />
								</div>
								<div className="col">
									<div className="file-name">
										<span>{file.name}</span>
										{uploading && <Icon type="loading" style={{ margin: 4 }} />}
										{uploadInfo && <Icon type="success" style={{ margin: 4 }} />}
									</div>
									<div className="text-weak">
										文件大小：__mark__{humanReadable.bytes(file.size)}
										<br />
										上传日期：__mark__{uploadInfo ? uploadInfo.createTime : '-'}
									</div>
									{uploadInfo && (
										<div className="btn-box">
											<a {...getRootProps({ className: 'tc-upload-text' })}>
												<input {...getInputProps()} />
												重新上传__mark__
											</a>
											<a href="javascript:;" onClick={onFileDelete}>
												删除__mark__
											</a>
										</div>
									)}
								</div>
							</div>
						) : (
							<div
								{...getRootProps({
									className: classNames('tc-upload-box box-border', { hover: isDragActive }),
								})}
							>
								{isDragActive && <div className="tc-upload-mask">释放鼠标__mark__</div>}
								<div className="tc-upload-null">
									<a href="javascript:;" className="tc-upload-text">
										<input {...getInputProps()} />
										点击上传__mark__
									</a>
									<span className="text-weak"> / 拖拽到此区域__mark__</span>
								</div>
							</div>
						);
					}}
				</Dropzone>
				<p className="form-input-help">
					{error || help}
					{exampleUrl && (
						<a href={exampleUrl} target="__blank" style={{ marginLeft: 4 }}>
							示意图__mark__
						</a>
					)}
				</p>
			</div>
		</div>
	);
}

export * from './AuthContext';

export const getModifyDetectToken = ownerUin => {
	const [token, expiredTime] = (sessionStorage.getItem(`auth/modify/${ownerUin}`) || '').split('_');

	if (!token) {
		return null;
	}

	if (Number(expiredTime) < Date.now()) {
		return null;
	}

	return token;
};

export const setModifyDetectToken = (ownerUin, token) => {
	// 正常1小时过期，提前5分钟过期, 防止操作一__mark__半过期
	const tokenAndExpiredTime = `${token}_${Date.now() + 55 * 60 * 1000}`;

	sessionStorage.setItem(`auth/modify/${ownerUin}`, tokenAndExpiredTime);
};

import { WXOALink, WXOAAuthCallback } from '@src/instances/auth';

export function gotoWXOAAuthPage() {
	const authLink = `${WXOALink}?s_url=${encodeURIComponent(WXOAAuthCallback)}&passthruCallback=1`;
	window.open(authLink);
}

export * from './gotoWXOAAuthPage';
export * from './submitErrorHandler';

import React from 'react';
import { app } from '@tencent/tea-app';
import { Button, Modal } from '@tencent/tea-component';
import { AuthType } from '@src/instances/auth';

export const submitErrorHandler = (e, context = {}) => {
	const { code, message } = e;

	if (code === 'LimitExceeded.Identity') {
		const isPersonal = context && context.authType === AuthType.Personal;
		const description = isPersonal ? (
			<p>
				此身份信息已经为3个腾讯云账号完成认证，无法继续为当前账号进行实名，请更换其他身份进行认证__mark__。如需查看已认证__mark__的账号，请前往
				<a
					href="https://cloud.tencent.com/services/forgotAccount"
					className="tea-ml-1n tea-mr-1n"
					target="_blank"
				>
					查找账号
				</a>
			</p>
		) : (
			<p>
				此身份信息已经为3个腾讯云账号完成认证，无法继续为当前账号进行实名，请更换其他身份进行认证__mark__。如有任何疑问，请
				<a
					href="https://console.cloud.tencent.com/workorder/category"
					className="tea-ml-1n tea-mr-1n"
					target="_blank"
				>
					提交__mark__工单
				</a>
				咨询
			</p>
		);

		Modal.error({
			message: '认证失败',
			description,
		});
		return;
	}

	if (code === 'FailedOperation.TokenExpired') {
		Modal.error({
			message: '身份验证失效',
			description: '由于您长时间未操作，身份验证已过期，请您重新验证身份。',
			buttons: [
				<Button type="primary" onClick={() => location.reload()}>
					重新验证
				</Button>,
			],
		});
		return;
	}

	if (code === 'LimitExceeded.InBlack') {
		Modal.error({
			message: '实名认证__mark__失败',
			description: (
				<>
					当前账号存在安全风险，暂时无法实名认证__mark__。更多帮助，请查看
					<a href="https://cloud.tencent.com/document/product/378/3629" target="_blank">
						实名指引
					</a>
					或联系
					<a href="https://cloud.tencent.com/act/event/smarty-service" target="_blank">
						智能客服
					</a>
				</>
			),
			size: 's',
		});
		return;
	}

	app.tips.error(message);
};

import useAsyncFn from 'react-use/lib/useAsyncFn';
import { authService } from '@src/services';
import { useHistory } from '@tencent/tea-app';

export function useRevoke() {
	const history = useHistory();
	const [revokeState, revoke] = useAsyncFn(cb => {
		return authService
			.revokeModifyAuthIdentity()
			.then(() => {
				cb();
			})
			.catch(e => {
				if (e.code === 'FailedOperation.RevokeIllegal') {
					setTimeout(() => {
						history.replace('/developer/auth');
					}, 2000);
				}

				throw e;
			});
	});

	return {
		loading: revokeState.loading,
		error: revokeState.error,
		revoke,
	};
}

import React, { Component } from 'react';
import { Layout, Panel } from '@src/components';

export class Error extends Component {

	render() {
		const { message, buttons, history } = this.props;
		return (
			<Layout>
				<Layout.Header title="实名认证__mark__" onBack={() => { history.push('/developer') }}></Layout.Header>
				<Layout.Body>
					<Panel>
						<Panel.Blank className="media">
							<div className="media-left media-middle">
								<div className="media-object error-media">
									<div className="inner">
										<span className="img-gif" />
									</div>
								</div>
							</div>
							<div className="media-body media-middle">
								{message && <h4 className="media-heading">{message}</h4>}
								<div className="op-area">
									{buttons}
								</div>
							</div>
						</Panel.Blank>
					</Panel>
				</Layout.Body>
			</Layout>
		)
	}
}
export * from './ChooseType';
export * from './Enterprise';
export * from './Error';
export * from './ModifyIdentity';
export * from './ModifyPersonalIdentity';
export * from './Personal';
export * from './Result';

import { AuthStep } from '@src/instances/auth';
import { SubmitPersonalBaseInfo } from './SubmitPersonalBaseInfo';
import { SubmitPersonalAuthInfo } from './SubmitPersonalAuthInfo';
import { SubmitEnterpriseBaseInfo } from './SubmitEnterpriseBaseInfo';
import { ChooseEnterpriseAuthMethod } from './ChooseEnterpriseAuthMethod';
import { SubmitEnterpriseTopupInfo } from './SubmitEnterpriseTopupInfo';
import { SubmitEnterpriseBankInfo } from './SubmitEnterpriseBankInfo';
import { CheckIdentity } from './CheckIdentity';
import { ChooseModifyAuthType } from './ChooseModifyAuthType';
import { SubmitModifyBaseInfo } from './SubmitModifyBaseInfo';
import { SubmitModifyAuthInfo } from './SubmitModifyAuthInfo';
import { WaitForAudit } from './WaitForAudit';

export const registry = {
	[AuthStep['submit-personal-base-info']]: SubmitPersonalBaseInfo,
	[AuthStep['submit-personal-auth-info']]: SubmitPersonalAuthInfo,
	[AuthStep['submit-enterprise-base-info']]: SubmitEnterpriseBaseInfo,
	[AuthStep['choose-enterprise-auth-method']]: ChooseEnterpriseAuthMethod,
	[AuthStep['submit-enterprise-topup-info']]: SubmitEnterpriseTopupInfo,
	[AuthStep['submit-enterprise-bank-info']]: SubmitEnterpriseBankInfo,
	[AuthStep['check-identity']]: CheckIdentity,
	[AuthStep['choose-modify-auth-type']]: ChooseModifyAuthType,
	[AuthStep['submit-modify-base-info']]: SubmitModifyBaseInfo,
	[AuthStep['submit-modify-auth-info']]: SubmitModifyAuthInfo,
	[AuthStep['wait-for-audit']]: WaitForAudit,
};

import React, { useState } from 'react';
import { i18n, useHistory } from '@tea/app';
import { Modal, Button, Checkbox } from '@tea/component';
import { useDispatch } from 'react-redux';

const { t, Trans } = i18n;

export function AgreemeentModal({ visible }) {
	const history = useHistory();
	const {
		auth: { updateAgreementState },
	} = useDispatch();
	const [checked, setChecked] = useState(false);
	const onClose = () => history.push('/developer');

	return (
		<Modal visible={visible} caption={t('中华人民共和国服务协议__mark__')} onClose={onClose}>
			<Modal.Body>
				<Trans>
					如果您希望购买中国大陆的节点资源，您需要验证身份。
					中华人民共和国服务协议__mark__将应用于您使用中国大陆节点资源的场景。
					如果您不想使用此类服务，请选择__mark__“取消__mark__
				</Trans>
				<div
					style={{
						maxHeight: 300,
						overflow: 'auto',
						padding: '20px 0',
						margin: '20px 0',
						borderTop: '1px solid #e5e5e5',
						borderBottom: '1px solid #e5e5e5',
					}}
				>
					Important Notice:
					<br />
					1. This English version of the Tencent Cloud Service Agreement is for your information and
					reference only.
					<br />
					2. This document is also available in&nbsp;
					<a href="https://intl.cloud.tencent.com/document/product/301/13617" target="_blank">
						Chinese version
					</a>
					. In case of any discrepancy or inconsistency, the Chinese version of this document shall
					prevail.
					<br />
					<br />
					Welcome to Tencent Cloud Services!
					<br />
					In order to use Tencent Cloud Services (which may also be referred to as the "Services"),
					you must read and comply with this Tencent Cloud Service Agreement (this "Agreement").
					Please read the terms carefully and make sure that you fully understand the same,
					especially the provisions on limitation or exemption of liability, as well as those in
					relation to separate agreements and rules fior activating or using certain services. The
					provisions on limitation or exemption of liability may be bolded or underlined for your
					special attention.
					<br />
					Unless you have read and accepted all of the terms of this Agreement as well as all
					related agreements and rules, you shall not have the right to use the Services. By
					acknowledging and agreeing to accept this Agreement, or otherwise using the Services, you
					acknowledge that you have read and agreed to be bound by the foregoing agreements and
					rules.
					<br />
					If you commit any breach of this Agreement, Tencent Cloud shall have the right to
					unilaterally restrict, suspend or terminate the provision of services to you or take other
					such measures at any time depending on the nature of your breach, and shall have the right
					to pursue liability against you, in accordance with this Agreement. This Agreement applies
					to your registration for and use of the products and services in the mainland of the
					People's Republic of China.
					<br />
					<br />
					Section 1 General Provisions
					<br />
					1.1 "Tencent Cloud Services" refers to the system services comprised of various types of
					products and services created for the purpose of catering to the different product/service
					needs of various websites, applications and so forth, including computing and networking;
					storage and CDN; cloud databases; cloud security; monitoring and management; domain name
					services; mobile and communications; video services; big data and AI.
					<br />
					1.2 The types, service standards, rules of use, settlement methods (including but not
					limited to pre-payment, post-payment and so forth, similarly hereinafter), rates and other
					details concerning Tencent Cloud Services (collectively referred to as "Service Rules")
					shall be subject to the specifications found on Tencent Cloud's official website (
					<a href="https://intl.cloud.tencent.com" target="_blank">
						https://intl.cloud.tencent.com
					</a>
					) and the instructions indicated on the webpage when purchasing the specific services,
					unless this Agreement or the parties agree otherwise.
					<br />
					1.3 Tencent Cloud shall be entitled to make adjustments to the Tencent Cloud Service Rules
					at any time by publishing such changes by way of a public announcement on its website,
					email notification, text message notification or other such means without further consent
					from you.
					<br />
					1.4 As a neutral provider of internet services and technical support services, Tencent
					Cloud is merely providing you with various technical services. You shall be the sole
					developer and operator of, and shall assume full liability for, your websites,
					applications and any other of your products, services, related content and so forth.
					<br />
					1.5 Both parties warrant that they have obtained the qualifications for lawful operations
					in accordance with relevant PRC regulations, and that they have the relevant
					qualifications to deal in their products and services in accordance with law. You shall
					submit filings with respect to your website access in accordance with national and local
					requirements; otherwise, Tencent Cloud shall be entitled to refuse to provide internet
					access and other such services pursuant to national laws and regulations.
					<br />
					<br />
					Section 2 Account
					<br />
					2.1 You may use a QQ number or other means supported by Tencent Cloud Services to complete
					the registration process as instructed on the registration page of Tencent Cloud's
					official website, and obtain a Tencent Cloud Services account ("Tencent Cloud Account").
					<br />
					2.2 You must comply with the QQ Number Rules if you use a QQ number to register. In order
					to safeguard the security and independence of the Tencent Cloud Account, you must apply
					for a new QQ number to be used for Tencent Cloud Services only.
					<br />
					2.3 You shall provide truthful, legitimate and valid information (the "Information") in
					accordance with the registration procedures for Tencent Cloud Services, including but not
					limited to your name, contact, email, telephone, mailing address, industrial and
					commercial registration documents and so forth. If any change occurs to the Information,
					you shall promptly notify Tencent Cloud of such change in writing or update such
					information in accordance with Tencent Cloud system rules.
					<br />
					2.4 This Agreement is applicable to all Tencent Cloud Accounts under your name. As the
					Tencent Cloud Account(s) will serve as the means of identifying you in regard to your use
					of the Tencent Cloud Services, you shall adopt all necessary and effective measures to
					protect the confidentiality your Tencent Cloud Account(s), and shall be responsible for
					all activities carried out under such account(s).
					<br />
					2.5 To ensure account and transaction security, Tencent Cloud shall be entitled to require
					you to carry out real-name authentication at any time, and you shall cooperate
					accordingly. You agree that Tencent Cloud may authenticate you by verifying your identity,
					credentials and other such information with third parties, and you authorize Tencent Cloud
					to obtain all necessary information relating to your use of the services.
					<br />
					2.6 Real-name authentication serves as the basis for determining ownership of a Tencent
					Cloud Account, and any requests for withdrawals or the issuance of official tax invoices
					("fapiao") under an account will be processed with respect to the party corresponding to
					the account that has undergone real-name authentication. You shall conduct the
					authentication process seriously by approaching it with caution and understanding and
					observing the following rules:
					<br />
					 2.6.1 It must be ensured that the authenticated party and account user remain consistent,
					and refrain from authenticating corporate accounts under the names of individuals,
					authenticating the Tencent Cloud Account of a specific individual under the name of
					others, or engaging in any other form of improper authentication.
					<br />
					 2.6.2 If a business authorizes an individual to manage a Tencent Cloud Account
					authenticated in the name of such business due to business needs, it is requested to set
					up access control, and to promptly complete the internal handover procedures and take
					account security protection measures (such as changing login passwords and so forth) when
					undergoing personnel changes.
					<br />
					 2.6.3 The party subject to real-name authentication shall be deemed as undertaking
					responsibility for all activities carried out under its account and will be held fully
					liable for any disputes concerning the account or the activities carried out thereunder
					(including but not limited to illegal activities, late payment of service fees and so
					forth).
					<br />
					 2.6.4 You must establish a sound internal management system to regulate your own use and
					management of your Tencent Cloud Account(s).
					<br />
					<br />
					Section 3 Service Rules
					<br />
					3.1 Service Activation
					<br />
					 3.1.1 You may select__mark__ and purchase the services you require online via Tencent Cloud's
					official website based on your own needs. Prior to purchasing any services, you must
					carefully read the corresponding Service Rules and then decide whether or not to purchase
					such services based on your needs. Orders generated online by you to purchase services
					shall be called "electronic orders"; and the parties may also enter into separate
					agreements based on the actual needs for their collaboration.
					<br />
					 3.1.2 The parties may be required to enter into separate service agreements for the
					activation of certain Tencent Cloud Services. Separate service agreements may manifest in
					the form of electronic files or in the form of separate paper-based documents. You may
					decide whether or not to accept a service agreement and activate services at your own
					discretion.
					<br />
					3.2 Service Fees
					<br />
					 3.2.1 The means of settlement for or and rates of Tencent Cloud Services shall be subject
					to the prices and currencies posted on Tencent Cloud's official website. Tencent Cloud
					shall be entitled to direct that you make payment of fees and other amounts payable in
					respect of the Tencent Cloud Services to any Tencent Cloud affiliate company notified to
					you from time to time.
					<br />
					 3.2.2 Settlement rules for Tencent Cloud Services may be categorized into pre-payment
					rules, post-payment rules and so forth. You must comply with the settlement rules for the
					services you purchase; otherwise, services activated by you may be suspended or
					terminated. In the case of services subject to pre-payment rules, you must promptly top up
					your Tencent Cloud Account(s) to guarantee successful use of services. In the case of
					services subject to post-payment rules, you must promptly make payment within the time
					period specified in the Service Rules.
					<br />
					 3.2.3 Since certain Tencent Cloud Services will continue to take up resources following
					their activation (such as cloud servers, cloud databases and so forth), they will continue
					to incur fees even if you do not add any new service items or resources, or do not perform
					any new operations; you shall therefore promptly renew or deactivate such services
					accordingly.
					<br />
					 3.2.4 You may purchase services by making online payments through your Tencent Cloud
					Account(s) directly, or by paying service fees through your corporate account to Tencent
					Cloud's designated account. Please make the note "Cloud service fee + Tencent Cloud
					Account" when you make a payment in order for Tencent Cloud to verify and confirm the
					payment in a timely manner; otherwise, your use of the Services may be affected.
					<br />
					3.3 Service Guarantees
					<br />
					 3.3.1 Tencent Cloud shall provide to you 24/7 after-sale services, and answer and resolve
					any questions and issues encountered by you while using Tencent Cloud Services.
					<br />
					 3.3.2 Tencent Cloud shall provide you with data backup and ensure data reliability to the
					extent specified under the service level agreement (SLA); beyond this, however, you shall
					back up your data based on your own needs.
					<br />
					 3.3.3 Tencent Cloud shall provide availability assurance to the extent specified under
					the service level agreement (SLA). In the event that Tencent Cloud fails to meet the
					service guarantees under the service level agreement corresponding to the services
					purchased by you, Tencent Cloud shall be liable to compensate you in accordance with such
					service level agreement. Tencent Cloud's total liability for compensation shall not exceed
					the amount of service fees Tencent Cloud charges you for the services in respect of which
					Tencent Cloud fails to meet the relevant service guarantees.
					<br />
					 3.3.4 If your availability requirements are higher than those specified under the SLA,
					you will need to configure your system for high availability and Tencent Cloud shall
					extend all necessary assistance. Any assistance needed from Tencent Cloud with respect to
					design shall be negotiated and determined by the parties separately.
					<br />
					 3.3.5 If you are a non-Chinese company contracting for Tencent Cloud Services from
					outside of the mainland of the People's Republic of China with a Service Region that is in
					the mainland of the People's Republic of China, then the service commitments set out in
					Clauses 3.3.1 to 3.3.4 shall be deleted and replaced with any Service Level Agreements
					applicable to the Tencent Cloud Services you have procured.
					<br />
					3.4 Service Suspension or Termination
					<br />
					 3.4.1 In order to provide better services to you, Tencent Cloud shall be entitled to
					check, repair, service, maintain or upgrade the service platform or related equipment on a
					regular or irregular basis (collectively, "Routine Maintenance"). Tencent Cloud assumes no
					liability to you for any interruption or suspension of Tencent Cloud Services for any
					reasonable time periods caused by Routine Maintenance, provided that Tencent Cloud
					notifies you at least 24 hours in advance of such Routine Maintenance. Tencent Cloud shall
					promptly notify you of any non-Routine Maintenance attributable to force majeure, faults
					on the part of infrastructure operators or other such reasons.
					<br />
					 3.4.2 In order to guarantee service security and stability, Tencent Cloud may upgrade or
					relocate the machine rooms, servers, bandwidth, databases and other products used by you
					from time to time, and you shall cooperate accordingly. If a major change is involved
					(such as relocating the machine room), Tencent Cloud shall give you at least 30 days'
					advance notice.
					<br />
					 3.4.3 Any data and other information saved by you on Tencent Cloud's server as a result
					of using Tencent Cloud Services shall be retained by Tencent Cloud for you for a period of
					15 days (the "Retention Period") upon expiration or termination of Tencent Cloud Services.
					Cloud service fees (if any) incurred during the Retention Period shall be borne by you.
					You shall settle all fees and fully migrate all data prior to the expiration of the
					Retention Period. The Tencent Cloud Services system will automatically delete all of your
					data upon expiration of the Retention Period.
					<br />
					 3.4.4 If you use prepaid services and unilaterally request to terminate the collaboration
					prior to the expiration of the service period, the fees paid by you for any unused period
					of service will not be refunded, but you may continue to use the relevant services until
					the expiration of the service period, whereupon this Agreement shall terminate.
					<br />
					 3.4.5 Tencent Cloud shall be entitled to adjust or terminate certain services (including
					but not limited to service upgrades, integrations and so forth) at any time based on its
					operational arrangements, provided that Tencent Cloud must give 30 days' advance notice to
					allow you to transfer and back up the relevant data, make adjustments to your business and
					so forth, so as to protect your legitimate rights and interests.
					<br />
					3.5 Third Party Products or Services
					<br />
					 3.5.1 If you obtain or use any products or services provided by a third party via Tencent
					Cloud Services (including but not limited to products or services provided by service
					providers and other third parties on the market of Tencent Cloud Services), you shall
					assess whether or not such products or services meet your requirements.
					<br />
					 3.5.2 The activation of third party products or services may require the conclusion of
					separate service agreements between you and the third party. Separate service agreements
					may manifest in the form of electronic files or in the form of separate paper-based
					documents. You may decide whether or not to accept a service agreement and use the
					products or services at your own discretion.
					<br />
					 3.5.3 Any dispute arising from your use of third party products or services shall be
					resolved through consultations between you and the third party.
					<br />
					<br />
					Section 4 Client's Rights and Obligations
					<br />
					4.1 You shall be entitled to use the Tencent Cloud Services you purchase and receive
					Tencent Cloud's technical support and after-sales services as agreed hereunder.
					<br />
					4.2 When using Tencent Cloud Services, you must comply with all applicable laws,
					regulations, rules and policies, keep the internet in good order and safeguard internet
					security; you must not engage in, or facilitate, any activities that constitute a
					violation of laws and regulations, including but not limited to:
					<br />
					 4.2.1 activities that: jeopardize national security, reputation or interests; incite
					subversion of state power; overthrow the socialist system; incite division of state and
					sabotage national unity; advocate terrorism or extremism; incite ethnic hatred or
					discrimination;
					<br />
					 4.2.2 deceptive, false or misleading practices, or practices that infringe the
					intellectual property rights or legitimate rights and interests of others, such as using
					"private servers" or "plug-ins";
					<br />
					 4.2.3 the posting or dissemination of spam or unlawful content that disrupt national
					order, jeopardize national security, or advocate feudal superstitions, obscenity,
					pornography or vulgarity;
					<br />
					 4.2.4 violation of operating rules relating to networks, devices or services linked to
					the Tencent Cloud network; unlawful or unauthorized access, misappropriation, interference
					or surveillance;
					<br />
					 4.2.5 any actual or attempted sabotage of network security, including but not limited to
					performing malicious scanning of websites and servers, hacking into a system, or
					unlawfully accessing data by using viruses, Trojans or malicious codes, phishing and so
					forth;
					<br />
					 4.2.6 any actual or attempted modification of system configuration set by Tencent Cloud
					Services or any actual or attempted sabotage of system security; using technological means
					to undermine or disrupt the operation or others' use of Tencent Cloud Services; any actual
					or attempted disruption of the normal operation of any products of Tencent Cloud or any
					part or functions thereof in any way, or the production, posting or dissemination of such
					tools or methods;
					<br />
					 4.2.7 your being frequently attacked (including but not limited to DDoS attacks) as a
					result of the provision of services, including but not limited to "DNS resolution",
					"security services", "domain name proxy" and "reverse proxy", and failing to correct your
					practices in a timely manner, or failing to eliminate the effects as requested by Tencent
					Cloud, thereby causing an impact on the Tencent Cloud Services platform or on others;
					<br />
					 4.2.8 other illegal or non-compliant practices, including but not limited to illegal
					activities such as gambling.
					<br />
					4.3 You shall not install or use any pirated software on Tencent Cloud Services, and shall
					take security measures to protect your computer information systems as required under
					applicable PRC rules, including but not limited to installing State-approved security
					products specifically designed for computer information systems.
					<br />
					4.4 You shall make payments in a timely manner. If you default on payments for post-paid
					services, then in addition to the overdue amount, you shall pay Tencent Cloud a late fee
					in the amount of 3‰ of the overdue amount for each day of default until all fees are
					settled in full. If you fail to pay any amount that has fallen due for a period of 15
					days, Tencent Cloud shall be entitled to unilaterally terminate this Agreement. If you
					also use prepaid service at the same time, the service fees for any unused service period
					shall be credited to Tencent Cloud as liquidated damages.
					<br />
					<br />
					Section 5 Tencent Cloud's Rights and Obligations
					<br />
					5.1 Tencent Cloud shall provide to you Tencent Cloud Services and after-sales support as
					agreed hereunder.
					<br />
					5.2 Tencent Cloud is only responsible for providing operational and maintenance services
					relating to Tencent Cloud Services; you shall ensure the security and stability of your
					own network and devices. You shall timely resolve the following issues and prevent them
					from affecting Tencent Cloud Services:
					<br />
					 5.2.1 any issue with your internal network, including but not limited to overload;
					<br />
					 5.2.2 any failure of your own devices or third party devices used by you;
					<br />
					 5.2.3 any network interruption caused the dismantling of devices or other operations
					performed by yourself;
					<br />
					 5.2.4 any failure, network interruption or other such issues attributable to you.
					<br />
					5.3 If Tencent Cloud discovers, on its own or based on information provided by the
					competent authorities or complaints filed by right holders, that you have violated
					applicable laws, regulations or rules, or breached this Agreement, Tencent Cloud shall be
					entitled to take any one or more of the following steps at its own discretion:
					<br />
					 5.3.1 demanding that you immediately remove or modify the content in question;
					<br />
					 5.3.2 directly removing or blocking the content in question or disabling the links in
					question;
					<br />
					 5.3.3 restricting or suspending the provision of Tencent Cloud Services to you (including
					but not limited to directly taking some of your services offline and withdrawing the
					relevant resources; setting restrictions on your operations under your Tencent Cloud
					Account(s));
					<br />
					 5.3.4 in case of serious violations or breaches, Tencent Cloud shall have the right to
					terminate the provision of Tencent Cloud Services to you and terminate this Agreement
					(including but not limited to directly taking all of your services offline and withdrawing
					the relevant resources). The fees already paid by you for any unused service period shall
					be credited to Tencent Cloud as liquidated damages;
					<br />
					 5.3.5 pursuing other liabilities against you in accordance with law.
					<br />
					5.4 Tencent Cloud may transfer its rights and obligations hereunder, in whole or in part,
					to a third party, provided that you shall be given a 90 days' advance written notice. The
					parties agree to execute all documents and take all measures reasonably necessary for this
					Section to take effect.
					<br />
					<br />
					Section 6 Intellectual Property Rights, Confidentiality and Privacy
					<br />
					6.1 Trademarks, copyright or other intellectual property rights solely owned by each party
					shall remain the sole property of such party, and shall not be transferred to or shared
					with the other party by reason of the parties' entry into or performance of this
					Agreement.
					<br />
					6.2 Each party shall respect the intellectual property rights of the other party or any
					third party. If a third party files a lawsuit or makes claims against a party for the
					other party's infringement of such third party's intellectual property rights or other
					legitimate rights and interests, the responsible party shall resolve such dispute
					independently and indemnify and hold harmless the other party from and against all direct
					economic losses.
					<br />
					6.3 Information received by a party (the "Recipient") from the other party (the
					"Disclosing Party") that is marked or can reasonably be understood to be the confidential
					or proprietary information belonging to the Disclosing Party (hereinafter referred to as
					"Confidential Information"), including but not limited to any content that is not publicly
					available such as discounts offered by Tencent Cloud to you, shall be kept confidential by
					the Recipient and shall not be used by the Recipient for any purposes other than this
					Agreement without the written consent of the Disclosing Party. The Recipient shall treat
					the Disclosing Party's Confidential Information with the same degree of care, but no less
					than a reasonable degree of care, it uses for its own confidential information.
					<br />
					6.4 Without your authorization, Tencent Cloud shall not access your content stored on
					Tencent Cloud, provided that Tencent Cloud may access your stored content with your prior
					authorization to facilitate your successful use of Tencent Cloud Services.
					<br />
					6.5 Notwithstanding the foregoing, the Recipient shall not subject to any confidentiality
					obligation if:
					<br />
					 6.5.1 the disclosure is consented to by the Disclosing Party;
					<br />
					 6.5.2 the Confidential Information becomes publicly known through no fault of the
					Recipient;
					<br />
					 6.5.3 the Confidential Information was known to the Recipient prior to the Disclosing
					Party's disclosure through a legal source not subject to similar confidentiality
					restrictions;
					<br />
					 6.5.4 the Recipient is required by legal proceedings or a competent authority to make the
					disclosure.
					<br />
					6.6 The confidentiality obligations of the parties shall remain in force during the term
					of this Agreement and after expiration thereof, until it is no longer necessary to keep
					the relevant information confidential.
					<br />
					6.7 Tencent Cloud shall be entitled to cooperate with any inquiry made by the judicial
					authorities, administrative authorities or other competent authorities of the PRC, and
					provide the information, so as to resolve complaints and disputes in timely manner and
					protect the legitimate rights and interests of all parties concerned.
					<br />
					6.8 In order to reasonably protect your interests and those of your users and other right
					holders, Tencent Cloud shall be entitled to put in place processes and systems
					specifically devoted to dealing with infringement and complaints, and you shall comply
					with such processes and systems. If Tencent Cloud receives a complaint or report from a
					third party against you, Tencent Cloud shall be entitled to disclose your information
					(including but not limited to your registered name, identification, contacts, telephone
					number and so forth) to the complainant as necessary and urge you to consult with the
					complainant, with a view to promptly resolving such complaint or dispute and protecting
					the legitimate rights and interests of all parties concerned. You shall extend your
					cooperation; failure to do so may affect your use of Tencent Cloud Services.
					<br />
					6.9 Tencent Cloud has formulated corresponding privacy protection policies which only
					apply to the information generated during your use of the Services, and do not apply to
					the data you store on Tencent Cloud. Tencent Cloud shall use and disclose relevant
					information in accordance with its privacy policies as published. You may access Tencent
					Cloud's most updated privacy policies on Tencent Cloud's official website.
					<br />
					<br />
					Section 7 Limitation of Liability
					<br />
					7.1 You understand and agree that services may be interrupted during your use of Tencent
					Cloud Services due to any of the reasons set out below. Upon occurrence of any of the
					following, Tencent Cloud shall promptly cooperate with the entities involved to carry out
					rectifications, and Tencent Cloud disclaims any liability for any loss so caused to you:
					<br />
					 7.1.1 force majeure, including but not limited to natural disasters, acts of government,
					promulgation or change of policies, promulgation or change of laws and regulations,
					strikes and unrest;
					<br />
					 7.1.2 causes attributable to infrastructure operators, including but not limited to
					technical adjustments made by telecommunications operators, damage to
					telecommunications/power lines, installation, modification or maintenance of
					telecommunications networks/power resources by telecommunications/power operators;
					<br />
					 7.1.3 cyber security incidents, such as sabotage by computer viruses, Trojans or other
					malicious programs or hacker attacks.
					<br />
					 7.1.4 your use of Tencent Cloud Services in a manner not authorized by Tencent Cloud;
					improper operation on your part or failures in your computer software, systems, hardware
					or telecommunications lines;
					<br />
					 7.1.5 any other circumstances not attributable to the fault of, outside the control of,
					or not reasonably foreseeable by, Tencent Cloud.
					<br />
					7.2 If the performance of this Agreement is delayed or either party breaches this
					Agreement due to force majeure, reasons attributable to infrastructure operators, cyber
					security incidents or events beyond the reasonable control of the parties concerned,
					neither party shall be liable for the breach, provided that the affected party shall
					notify the other party as soon as practicable. If any of the foregoing events prevents the
					performance of this Agreement for more than 30 calendar days, either party may terminate
					this Agreement by giving a 15 days' advance written notice to the other party. Neither
					party shall assume any liability for breach of contract if this Agreement is terminated by
					virtue of this Section.
					<br />
					7.3 You understand and agree that Tencent Cloud's services are provided "as-is" as
					existing technologies and conditions allow. Tencent Cloud will use its best efforts to
					ensure the continuity and security of its services, but cannot guarantee that its services
					will be free from any defect. Accordingly, you agree that in the event of any defect in
					Tencent Cloud's services that is unavoidable in the context of existing technologies
					within the sector, Tencent Cloud will not be deemed to be in breach of this Agreement. The
					parties shall work together in good faith to resolve the issue.
					<br />
					7.4 Under no circumstances shall any party be liable to the other party for any indirect,
					incidental or special damages and losses, including but not limited to loss of anticipated
					profits or expenses paid by the other party to a third party (even if such party has been
					made aware of the possibility of such loss).
					<br />
					<br />
					Section 8 Notice and Service
					<br />
					8.1 You shall ensure and maintain the validity of the Information. You shall be solely
					liable for your inability to receive business notices, customer services, responses to
					complaints, dispute mediation services, technical support and other services in a timely
					manner due to falsity or invalidity of the Information.
					<br />
					8.2 Unless otherwise agreed between the parties, you shall give notices to Tencent Cloud
					using Tencent Cloud's contact details posted on Tencent Cloud's official website.
					<br />
					8.3 Tencent Cloud may, from time to time, send you business notices, service alerts or
					authentication messages relating to Tencent Cloud Services as well as advertisements
					through one or a combination of the following means: website announcements, emails, text
					messages, private messages or instant messages.
					<br />
					8.4 The parties shall ensure that their respective contact details are authentic and
					valid. A notice is deemed to have been served on the recipient on the date it is sent.
					<br />
					<br />
					Section 9 Term
					<br />
					9.1 This Agreement shall become effective upon your acknowledgement and acceptance of the
					same. The term of collaboration between the parties shall commence at the time when you
					acknowledge and agree to accept this Agreement and end on the last day of the same year
					(for instance, from June 1, 2016 to December 31, 2016). The term of collaboration shall be
					automatically renewed for a one year term successively unless either party gives the other
					party written notice of its intention not to renew this Agreement prior to the expiration
					of each term.
					<br />
					9.2 If the term of collaboration between the parties is inconsistent with the term of
					services purchased by you, the former shall be automatically extended until the expiration
					of the latter. Unless otherwise agreed by the parties, this Agreement shall remain in
					force during the course of your use of Tencent Cloud Services.
					<br />
					9.3 If either party gives the other party a written notice expressing its intention not to
					renew this Agreement prior to the expiration of the term of the parties' collaboration,
					this Agreement shall be automatically terminated upon expiration of said collaboration
					term.
					<br />
					9.4 The expiration or termination of this Agreement shall not affect the rights and
					obligations accrued prior to such expiration or termination.
					<br />
					Section 10 Supplemental Provisions
					<br />
					10.1 This Agreement is executed in Nanshan District, Shenzhen, Guangdong, China.
					<br />
					10.2 The formation, effectiveness, performance and interpretation of, and dispute
					resolution in relation to, this Agreement shall be governed by the laws of the mainland of
					the People's Republic of China (excluding the conflicts of law provisions).
					<br />
					10.3 In the event of any dispute arising out of this Agreement, the parties shall first
					attempt to resolve such dispute through consultations; if the parties fail to resolve the
					dispute through consultations in good faith, either party may refer the dispute or
					conflict to a People's Court in Nanshan District, Shenzhen.
					<br />
					10.4 This Agreement shall be drafted and interpreted in Chinese. Unless otherwise agreed
					by the parties, no translation of this Agreement shall be relied upon for the
					interpretation hereof or the determination of the parties' intentions.
					<br />
					<br />
					(End of main body)
					<br />
					Tencent Cloud
				</div>
				<Checkbox value={checked} onChange={value => setChecked(value)}>
					<Trans>
						点击此处表示您已阅读并同意
						<a href="https://intl.cloud.tencent.com/document/product/301/13616" target="_blank">
							中华人民共和国服务条款
						</a>
					</Trans>
				</Checkbox>
			</Modal.Body>
			<Modal.Footer>
				<Button type="primary" disabled={!checked} onClick={() => updateAgreementState(true)}>
					{t('接受__mark__')}
				</Button>
				<Button onClick={onClose}>{t('取消__mark__')}</Button>
			</Modal.Footer>
		</Modal>
	);
}

export * from './AgreementModal';

import React, { useContext } from 'react';
import { i18n } from '@tea/app';
import { SessionContext } from '@src/decorators';
import { Error } from '../../_shared/components';
import { AgreemeentModal } from './AgreementModal';
import { useSelector } from 'react-redux';
import { AuthState } from '@src/instances/auth';

const { t } = i18n;

export function Interceptor({ children }) {
	const { isOwner } = useContext(SessionContext);
	const { current, agreed } = useSelector(state => state.auth);

	if (!isOwner) {
		return <Error message={t('您暂无权限查看，请联系开发商__mark__')} />;
	}

	return (
		<>
			{children}
			<AgreemeentModal visible={!agreed && (current && current.authState !== AuthState.SUCC)} />
		</>
	);
}

import React from 'react';
import { i18n, useHistory } from '@tea/app';
import { Layout } from '@tea/component/layout';
import { Panel } from '@src/components';

const { t } = i18n;

const { Content, Body } = Layout;

export function Error({ message, buttons = [] }) {
	const history = useHistory();

	return (
		<Layout>
			<Body>
				<Content>
					<Content.Header
						title={t('实名认证__mark__')}
						showBackButton
						onBackButtonClick={() => history.push('/developer')}
					></Content.Header>
					<Content.Body>
						<Panel>
							<Panel.Blank className="media">
								<div className="media-left media-middle">
									<div className="media-object error-media">
										<div className="inner">
											<span className="img-gif" />
										</div>
									</div>
								</div>
								<div className="media-body media-middle">
									{message && <h4 className="media-heading">{message}</h4>}
									<div className="op-area">{buttons}</div>
								</div>
							</Panel.Blank>
						</Panel>
					</Content.Body>
				</Content>
			</Body>
		</Layout>
	);
}

export * from './Error';
import React from 'react';
import { user } from '@tea/app/bridge';
import { app } from '@tea/app';
import { Layout, PageTitle } from '@src/components';
import { connect } from 'react-redux';
import { developerService } from '@src/services';
import * as utils from '@src/utils';
import { t, Trans } from '@tea/app/i18n';
import classnames from 'classnames';
import { Input } from '@tea/component/input';

const mapStateToProps = state => {
	return state;
};

const mapDisppatchToProps = dispatch => {
	return {};
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Step extends React.Component {
	render() {
		const { step, authInfo = {} } = this.props;

		return (
			<div className="tc-15-step">
				<ol>
					<li className={classnames({ current: step == 1 })}>
						<div className="tc-15-step-name">
							<span className="tc-15-step-num"></span>
							<Trans>账号注销申请__mark__</Trans>
						</div>
						<div className="tc-15-step-arrow"></div>
					</li>
					{authInfo.authState == 3 ? (
						<li className={classnames({ current: step == 2 })}>
							<div className="tc-15-step-name">
								<span className="tc-15-step-num"></span>
								<Trans>上传基本资料__mark__</Trans>
							</div>
							<div className="tc-15-step-arrow"></div>
						</li>
					) : null}
					<li className={classnames({ current: step == 3 })}>
						<div className="tc-15-step-name">
							<span className="tc-15-step-num"></span>
							<Trans>账号注销审核__mark__</Trans>
						</div>
						<div className="tc-15-step-arrow"></div>
					</li>
					<li className={classnames({ current: step == 4 })}>
						<div className="tc-15-step-name">
							<span className="tc-15-step-num"></span>
							<Trans>账号注销结果__mark__</Trans>
						</div>
						<div className="tc-15-step-arrow"></div>
					</li>
				</ol>
			</div>
		);
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { app } from '@tea/app';
import { Layout, PageTitle } from '@src/components';
import { connect } from 'react-redux';
import { developerService } from '@src/services';
import * as utils from '@src/utils';
import { t, Trans } from '@tea/app/i18n';
import classnames from 'classnames';
import { Input } from '@tea/component/input';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { Step } from '../Step';
import { Checkbox } from '@tea/component/checkbox';
import { Button } from '@tencent/tea-component';

const mapStateToProps = state => {
	return state;
};

// 第一__mark__步基类
class Base extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			agree: this.props.isIntl ? true : false,
			remark: '',
			errorTipsForRemark: '',
		};
	}

	// 子类实现
	getBtnText() {
		return '';
	}

	// 子类实现
	async onBtnClick() {}

	check() {
		if (this.state.remark.length > 200) {
			this.setState({ errorTipsForRemark: t('备注不能超过200个字__mark__') });
			return false;
		} else {
			this.setState({ errorTipsForRemark: '' });
			return true;
		}
	}

	render() {
		const { agree, errorTipsForRemark } = this.state;
		const { isIntl } = this.props;

		return [
			<div className="tc-panel-bd">
				<Step></Step>
				<div className="text-box">
					<br />
					<h3 className="text-box-tit">
						<Trans>账号注销申请注意事项：__mark__</Trans>
					</h3>
					<div className="text-box-con">
						<p className="text-cont">
							<Trans>
								1.
								账号内无未完成的订单、服务，不存在任何拖欠或者未缴纳的任何款项，或其他依照法律法规的要求应当履行而尚未履行的义务等情形；
								<br />
								2.
								账号中无尚未使用的权益（如果您在准备注__mark__销的账号下还有尚未使用的权益的情况下发起相应账号注销__mark__流程，将视为您主动放弃相应权益，相应尚未使用的权益在您发起注销__mark__流程后将作废或无法再使用
								）；
								<br />
								&nbsp;&nbsp;【注】尚未使用的权益指账号中有现金、赠送金、代金券或云资源等；
								<br />
								3.
								您的账号与其他第三__mark__方网络应用（例如：网站、APP）或其他账号的绑定__mark__关系或对外授权已经解除，或者您能确信不解除该等绑定__mark__关系或不撤回该等对外授权不会对您本人或任何第三__mark__方造成任何不利影响；
								<br />
								4. 您账号下所有的协作者__mark__、子用户__mark__、消息接收人等已经全部删除__mark__，您可前往
								<a href="https://console.cloud.tencent.com/cam" target="_blank">
									{' '}
									用户管理{' '}
								</a>
								里进行操作；
								<br />
								5. 您账号下的API密钥已经全部删除__mark__，您可以前往
								<a href="https://console.cloud.tencent.com/cam/capi" target="_blank">
									{' '}
									API密钥管理{' '}
								</a>
								里进行操作；
								<br />
								6.
								您在腾讯云账号下的所有您有权的数据、信息等均已迁出及妥善备份，或您完全放弃保留、找回该等数据的权利；
								<br />
								7.
								您提交__mark__账号注销申请__mark__，并非为了躲避正在或即将发生的投诉、纠纷、诉讼，或规避主管部门的监管，或绕开法律法规的相关规定等不良意图；
								<br />
								8. 账号无任何未完成的投诉举报或被投诉举报；
								<br />
								9. 您已经妥善处理了其他任何可能影响您权益的事项。
							</Trans>
						</p>
					</div>
				</div>
				<div className="text-box">
					<h3 className="text-box-tit">
						<Trans>温馨提示：__mark__</Trans>
					</h3>
					<div className="text-box-con">
						{isIntl ? (
							<p className="text-cont">
								<Trans>
									1.
									账号注销__mark__后，您将无法再次以该账号登录腾讯云网站、使用腾讯云任何服务或授权腾讯云访问的第三__mark__方网络服务平台；
									<br />
									2. 您将无法找回该账号下您曾经存储、使用等的全部信息、数据等；
									<br />
									3. 账号注销申请__mark__和审核期间，请不要进行任何其他操作，以免注销失败__mark__；
									<br />
									4. 如果您仍希望保留与此账号关联的资源和服务，请不要继续后续操作。
									<br />
								</Trans>
							</p>
						) : (
							/* eslint-disable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/
							<p className="text-cont">
								1.
								账号注销__mark__后，您将无法再次以该账号登录腾讯云网站或DNSPod平台、使用腾讯云（包括DNSPod）任何服务或授权腾讯云访问的第三__mark__方网络服务平台；
								<br />
								2. 您将无法找回该账号下您曾经存储、使用等的全部信息、数据等；
								<br />
								3.
								如果您是以微信、QQ、微信公众号等第三__mark__方账号注册腾讯云账号的，腾讯云账号注销__mark__后不会影响您的第三__mark__方账号使用；
								<br />
								4. 账号注销申请__mark__和审核期间，请不要进行任何其他操作，以免注销失败__mark__；
								<br />
								5. 如果您仍希望保留与此账号关联的资源和服务，请不要继续后续操作。
								<br />
							</p>
							/* eslint-enable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/
						)}
					</div>
					<label className="text-box-label">
						<span className="more-info-lable">
							<Trans>备注__mark__</Trans>
						</span>
						<textarea
							className="tc-15-textarea"
							onChange={e => {
								this.setState({ remark: e.target.value });
							}}
							onFocus={() => {
								this.setState({ errorTipsForRemark: '' });
							}}
						></textarea>
						<p
							className={classnames('more-info-tip', { error: errorTipsForRemark })}
							style={{ display: errorTipsForRemark ? '' : 'none' }}
						>
							{errorTipsForRemark}
						</p>
					</label>
					{this.props.isIntl ? null : (
						<label className="text-box-label">
							<Checkbox
								name="name"
								onChange={checked => {
									this.setState({ agree: checked });
								}}
							>
								<Trans>
									我已阅读并同意
									<a href="https://cloud.tencent.com/document/product/301/30251" target="_blank">
										腾讯云账号注销__mark__协议
									</a>
								</Trans>
							</Checkbox>
						</label>
					)}
				</div>
			</div>,
			<div className="tc-panel-ft">
				<Button
					style={{ marginRight: '5px' }}
					onClick={() => {
						this.props.router.push('/developer/security');
					}}
				>
					<Trans>返回__mark__</Trans>
				</Button>
				<Button
					type="primary"
					className={classnames({ disabled: !agree })}
					disabled={!agree}
					onClick={() => {
						this.onBtnClick();
					}}
				>
					{this.getBtnText()}
				</Button>
			</div>,
		];
	}

	componentDidMount() {
		this.props.updateGlobalInfo({ remark: '' });
	}
}

// 未实名
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class UnAuth extends Base {
	getBtnText() {
		return t('提交注销申请__mark__');
	}
	async onBtnClick() {
		const { agree, remark } = this.state;

		if (agree && this.check()) {
			const data = { remark };
			//  return this.props.updateGlobalInfo({step: 2});
			try {
				await developerService.applyAccountDeactivation(data);
				this.props.updateGlobalInfo({ step: 3 });
			} catch (e) {
				utils.showErrorTips(t('提交账户注销申请失败__mark__'));
			}
		}
	}
}

// 已实名
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class Auth extends Base {
	async onBtnClick() {
		const { agree, remark } = this.state;
		if (agree && this.check()) {
			this.props.updateGlobalInfo({ step: 2, remark });
		}
	}

	getBtnText() {
		return t('下一步__mark__');
	}
}

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Step1 extends React.Component {
	render() {
		const { authInfo = {} } = this.props;
		return authInfo.authState == 3 ? <Auth></Auth> : <UnAuth></UnAuth>;
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { app } from '@tea/app';
import { connect } from 'react-redux';
import * as utils from '@src/utils';
import { t, Trans } from '@tea/app/i18n';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { Form } from '@src/components';
import { Input } from '@tea/component/input';
import { Button } from '@tea/component/Button';
import { UploadFile } from './UploadFile';
import classnames from 'classnames';
import { Step } from '../Step';
import { developerService } from '@src/services';
import pify from 'pify';

const FormItem = Form.Item;
const pictures = {
	handHeldIdCard:
		'http://imgcache.qq.com/open_proj/proj_qcloud_v2/rocket_images/1541732903000_nanrvav05xxhia4i.png',
	idCardFont:
		'http://imgcache.qq.com/open_proj/proj_qcloud_v2/rocket_images/1541732908853_40hxrudr74g0gam7vi.png',
	idCardBack:
		'http://imgcache.qq.com/open_proj/proj_qcloud_v2/rocket_images/1541732908970_ee2f1i83ynkit3xr.png',
	businessLicense:
		'http://imgcache.qq.com/open_proj/proj_qcloud_v2/rocket_images/1541732902902_81rk0v4b36p3nmi.png',
	passport:
		'https://imgcache.qq.com/open_proj/proj_qcloud_v2/mc_2014/user/auth/css/img/sample-hz.jpg',
	businessLicenseIntl:
		'https://imgcache.qq.com/open_proj/proj_qcloud_v2/mc_2014/user/auth/css/img/sample-yyzz.jpg',
};

const mapStateToProps = state => {
	return { authInfo: state.authInfo, remark: state.remark, isIntl: state.isIntl };
};

// 步骤二__mark__的基类
class Base extends React.Component {
	constructor(props) {
		super(props);
	}

	// 子类实现自己的form内容
	renderForm() {
		return null;
	}

	// 点击步骤二__mark__的按钮时的回调，子类自己实现
	async onSubmit() {}

	// 渲染步骤二__mark__的通用模板
	render() {
		return [
			<Step></Step>,
			<div className="tc-panel-hd">
				<div className="col">
					<h3 className="title">
						<Trans>为了验证您的账号身份，请您如实填写以下信息，内容需与实名认证信息一致。__mark__</Trans>
					</h3>
				</div>
			</div>,
			<div className="tc-panel-bd">{this.renderForm()}</div>,
			<div className="tc-panel-ft">
				<Button
					style={{ marginRight: '5px' }}
					onClick={() => {
						this.props.updateGlobalInfo({ step: 1 });
					}}
				>
					<Trans>上一步__mark__</Trans>
				</Button>
				<Button
					type="primary"
					disabled={this.state.loading}
					onClick={() => {
						this.onSubmit();
					}}
				>
					<Trans>提交注销申请__mark__</Trans>
				</Button>
			</div>,
		];
	}
}

/* eslint-disable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/

// 认证方式是个人
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
@Form.create()
class Personal extends Base {
	frontPicRef = null;
	backPicRef = null;

	constructor(props) {
		super(props);
		this.state = {
			frontPic: '',
			backPic: '',
			loading: false,
		};
	}

	// 表单校验函数
	async check() {
		const { frontPic, backPic } = this.state;

		try {
			await await pify(this.props.form.validateFields)();
		} catch (e) {
			return Promise.reject();
		}
		if (frontPic) {
			this.frontPicRef.hideError();
		} else {
			this.frontPicRef.showError('请上传手持身份证正面照，JPG或PNG格式，不超过5M');
			return Promise.reject();
		}
		if (backPic) {
			this.backPicRef.hideError();
		} else {
			this.backPicRef.showError('请上传手持身份证反面照，JPG或PNG格式，不超过5M');
			return Promise.reject();
		}
		return Promise.resolve();
	}

	async onSubmit() {
		const { frontPic, backPic } = this.state;
		const { remark } = this.props;
		try {
			await this.check();
		} catch (e) {
			return;
		}
		let data = {
			remark: remark,
			authId: this.props.form.getFieldValue('idcard'),
			authPic1: frontPic,
			authPic2: backPic,
			authPic3: '',
		};
		this.setState({ loading: true });
		try {
			await developerService.applyAccountDeactivation(data);
			this.props.updateGlobalInfo({ step: 3 });
		} catch (e) {
			utils.showErrorTips('提交账户注销申请失败__mark__');
		}
		this.setState({ loading: false });
	}

	renderForm() {
		const { authInfo = {} } = this.props;
		const { name } = authInfo;
		const { getFieldDecorator } = this.props.form;
		return [
			<ul className="form-list">
				<Form.Pure label={'身份证姓名'}>
					<div className="form-unit">
						<p className="form-text">{name}</p>
					</div>
				</Form.Pure>
				<FormItem label={'身份证号'} required>
					{getFieldDecorator('idcard', {
						initialValue: '',
						rules: [
							{
								validator: (rule, vlaue, cb) => {
									if (/(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/.test(vlaue)) {
										cb();
									} else {
										cb('请重新检查身份证号');
									}
								},
							},
						],
						clearErrorTrigger: 'onChange',
					})(<Input placeholder="请输入身份证号" />)}
				</FormItem>

				<UploadFile
					defaultTips={'请上传手持身份证正面照，JPG或PNG格式，不超过5M'}
					ref={node => {
						this.frontPicRef = node;
					}}
					label={'手持身份证正面'}
					onUploaded={({ attr }) => {
						this.setState({ frontPic: attr });
					}}
					showDemo={() => {
						this.props.resetDialogInfo({
							buttons: [{ text: '确定__mark__' }],
							visible: true,
							cancelBtn: false,
							content: (
								<img style={{ width: '400px', marginLeft: '50px' }} src={pictures.handHeldIdCard} />
							),
						});
					}}
				></UploadFile>
				<UploadFile
					showDemo={() => {
						this.props.resetDialogInfo({
							buttons: [{ text: '确定__mark__' }],
							visible: true,
							cancelBtn: false,
							content: (
								<img style={{ width: '400px', marginLeft: '50px' }} src={pictures.handHeldIdCard} />
							),
						});
					}}
					defaultTips={'请上传手持身份证反面照，JPG或PNG格式，不超过5M'}
					ref={node => {
						this.backPicRef = node;
					}}
					label={'手持身份证反面'}
					onUploaded={({ attr }) => {
						this.setState({ backPic: attr });
					}}
				></UploadFile>
			</ul>,
		];
	}
}

// 认证方式为企业
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class Enterprise extends Base {
	frontPicRef = null;
	backPicRef = null;
	bussinessPicRef = null;

	constructor(props) {
		super(props);
		this.state = {
			frontPic: '',
			backPic: '',
			bussinessPic: '',
			loading: false,
		};
	}

	// 表单校验函数
	check() {
		const { frontPic, backPic, bussinessPic } = this.state;

		if (frontPic) {
			this.frontPicRef.hideError();
		} else {
			this.frontPicRef.showError('请上传法人身份证正面照，JPG或PNG格式，不超过5M');
			return false;
		}

		if (backPic) {
			this.backPicRef.hideError();
		} else {
			this.backPicRef.showError('请上传法人身份证反面照，JPG或PNG格式，不超过5M');
			return false;
		}

		if (bussinessPic) {
			this.bussinessPicRef.hideError();
		} else {
			this.bussinessPicRef.showError('请上传营业执照正面照，JPG或PNG格式，不超过5M');
			return false;
		}

		return true;
	}

	async onSubmit() {
		const { frontPic, backPic, bussinessPic } = this.state;
		const { remark } = this.props;

		if (this.check()) {
			let data = {
				remark: remark,
				authId: '',
				authPic1: frontPic,
				authPic2: backPic,
				authPic3: bussinessPic,
			};
			this.setState({ loading: true });
			try {
				await developerService.applyAccountDeactivation(data);
				this.props.updateGlobalInfo({ step: 3 });
			} catch (e) {
				utils.showErrorTips('提交账户注销申请失败__mark__');
			}
			this.setState({ loading: false });
		}
	}

	renderForm() {
		const { authInfo = {} } = this.props;
		const { name } = authInfo;
		return (
			<ul className="form-list">
				<Form.Pure label={'企业名称__mark__'}>
					<div className="form-unit">
						<p className="form-text">{name}</p>
					</div>
				</Form.Pure>
				<UploadFile
					ref={node => {
						this.frontPicRef = node;
					}}
					label={'法人身份证正面'}
					defaultTips={'请上传法人身份证正面照，JPG或PNG格式，不超过5M'}
					onUploaded={({ attr }) => {
						this.setState({ frontPic: attr });
					}}
					showDemo={() => {
						this.props.resetDialogInfo({
							buttons: [{ text: '确定__mark__' }],
							visible: true,
							cancelBtn: false,
							content: (
								<img style={{ width: '400px', marginLeft: '50px' }} src={pictures.idCardFont} />
							),
						});
					}}
				></UploadFile>
				<UploadFile
					showDemo={() => {
						this.props.resetDialogInfo({
							buttons: [{ text: '确定__mark__' }],
							visible: true,
							cancelBtn: false,
							content: (
								<img style={{ width: '400px', marginLeft: '50px' }} src={pictures.idCardBack} />
							),
						});
					}}
					ref={node => {
						this.backPicRef = node;
					}}
					label={'法人身份证反面'}
					defaultTips={'请上传法人身份证反面照，JPG或PNG格式，不超过5M'}
					onUploaded={({ attr }) => {
						this.setState({ backPic: attr });
					}}
				></UploadFile>
				<UploadFile
					showDemo={() => {
						this.props.resetDialogInfo({
							buttons: [{ text: '确定__mark__' }],
							visible: true,
							cancelBtn: false,
							content: (
								<img
									style={{ width: '400px', marginLeft: '50px' }}
									src={pictures.businessLicense}
								/>
							),
						});
					}}
					ref={node => {
						this.bussinessPicRef = node;
					}}
					label={'营业执照正面'}
					defaultTips={'请上传营业执照正面照，JPG或PNG格式，不超过5M'}
					onUploaded={({ attr }) => {
						this.setState({ bussinessPic: attr });
					}}
				></UploadFile>
			</ul>
		);
	}
}

/* eslint-enable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/

// 认证方式是个人（国际站）
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
@Form.create()
class PersonalIntl extends Base {
	userIDPicRef = null;

	constructor(props) {
		super(props);
		this.state = {
			userIDPic: '',
			loading: false,
		};
	}

	// 表单校验函数
	async check() {
		const { userIDPic } = this.state;
		if (userIDPic) {
			this.userIDPicRef.hideError();
		} else {
			this.userIDPicRef.showError(t('请上传驾照或护照，JPG或PNG格式，不超过5M__mark__'));
			return Promise.reject();
		}
		return Promise.resolve();
	}

	async onSubmit() {
		try {
			await this.check();
		} catch (e) {
			return;
		}

		const { userIDPic } = this.state;
		const { remark } = this.props;
		const data = {
			remark: remark,
			authId: '',
			authPic1: userIDPic,
			authPic2: '',
			authPic3: '',
		};
		this.setState({ loading: true });
		try {
			await developerService.applyAccountDeactivation(data);
			this.props.updateGlobalInfo({ step: 3 });
		} catch (e) {
			utils.showErrorTips(t('提交账户注销申请失败__mark__'));
		}
		this.setState({ loading: false });
	}

	renderForm() {
		const {
			authInfo: { name },
		} = this.props;
		return (
			<ul className="form-list">
				<Form.Pure label={t('个人姓名__mark__')}>
					<div className="form-unit">
						<p className="form-text">{name}</p>
					</div>
				</Form.Pure>
				<UploadFile
					defaultTips={t('请上传驾照或护照，JPG或PNG格式，不超过5M__mark__')}
					ref={node => {
						this.userIDPicRef = node;
					}}
					label={t('驾照或护照__mark__')}
					onUploaded={({ attr }) => {
						this.setState({ userIDPic: attr });
					}}
					showDemo={() => {
						this.props.resetDialogInfo({
							buttons: [{ text: t('确定__mark__') }],
							visible: true,
							cancelBtn: false,
							content: (
								<img style={{ width: '400px', marginLeft: '50px' }} src={pictures.passport} />
							),
						});
					}}
				/>
			</ul>
		);
	}
}

// 认证方式是企业（国际站）
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class EnterpriseIntl extends Base {
	enterpriseIDPicRef = null;

	constructor(props) {
		super(props);
		this.state = {
			enterpriseIDPic: '',
			loading: false,
		};
	}

	// 表单校验函数
	check() {
		const { enterpriseIDPic } = this.state;

		if (enterpriseIDPic) {
			this.enterpriseIDPicRef.hideError();
		} else {
			this.enterpriseIDPicRef.showError(t('请上传企业资质证明，JPG或PNG格式，不超过5M__mark__'));
			return Promise.reject();
		}

		return Promise.resolve();
	}

	async onSubmit() {
		try {
			await this.check();
		} catch (e) {
			return;
		}
		const { enterpriseIDPic } = this.state;
		const { remark } = this.props;
		const data = {
			remark: remark,
			authId: '',
			authPic1: '',
			authPic2: '',
			authPic3: enterpriseIDPic,
		};
		this.setState({ loading: true });
		try {
			await developerService.applyAccountDeactivation(data);
			this.props.updateGlobalInfo({ step: 3 });
		} catch (e) {
			utils.showErrorTips(t('提交账户注销申请失败__mark__'));
		}
		this.setState({ loading: false });
	}

	renderForm() {
		const {
			authInfo: { name },
		} = this.props;
		return (
			<ul className="form-list">
				<Form.Pure label={t('企业名称__mark__')}>
					<div className="form-unit">
						<p className="form-text">{name}</p>
					</div>
				</Form.Pure>
				<UploadFile
					ref={node => {
						this.enterpriseIDPicRef = node;
					}}
					label={t('企业资质证明__mark__')}
					defaultTips={t('请上传企业资质证明，JPG或PNG格式，不超过5M__mark__')}
					onUploaded={({ attr }) => {
						this.setState({ enterpriseIDPic: attr });
					}}
					showDemo={() => {
						this.props.resetDialogInfo({
							buttons: [{ text: t('确定__mark__') }],
							visible: true,
							cancelBtn: false,
							content: (
								<img
									style={{ width: '400px', marginLeft: '50px' }}
									src={pictures.businessLicenseIntl}
								/>
							),
						});
					}}
				/>
			</ul>
		);
	}
}

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Step2 extends React.Component {
	render() {
		const { authInfo = {} } = this.props;
		const { authType = 0 } = authInfo;

		return (
			// <EnterpriseIntl />
			authType == 0 ? (
				this.props.isIntl ? (
					<PersonalIntl />
				) : (
					<Personal />
				)
			) : this.props.isIntl ? (
				<EnterpriseIntl />
			) : (
				<Enterprise />
			)
		);
	}
}

import React from 'react';
import classnames from 'classnames';
import { CosHelper } from '@src/libs/CosHelper';
import * as utils from '@src/utils';
import base64 from '@src/libs/base64';
import { t, Trans } from '@tea/app/i18n';
import { app } from '@tencent/tea-app';

const STATE = {
	unuploaded: 0,
	dragenter: 1,
	checking: 2,
	uploading: 3,
	uploaded: 4,
};

const cosHelper = new CosHelper();

let reqId = 0;
const defaultConfig = {
	defaultTips: t('仅支持上传JPG、PNG格式文件__mark__'),
	accepts: ['jpg', 'jpeg', 'png'],
	size: 5 * 1024 * 1024,
};

export class UploadFile extends React.Component {
	// 初始化时上传图片的容器
	uploadRef = null;
	// 上传文件组件
	fileInputRef = null;
	// 上传成功后的图片
	imgRef = null;

	constructor(props) {
		super(props);

		this.state = {
			// 上传的内容不合法或者上传出错
			isError: '',
			// 错误提示或者友好提示
			tips: this.getConfig('defaultTips'),
			// 当前的状态
			state: STATE.unuploaded,
			// 上传了多少
			percentage: 0,
			// 上传的文件名
			name: '',
			// 上传文件的大小
			size: '',
			// 上传成功后的图片url
			uploadedImgUrl: '',
		};
	}

	componentDidMount() {
		// 监听document的这三__mark__个事件，事件触发时，对这几个事件感兴趣的元素自己判断是不是需要处理对应的事件
		$(document).on('dragenter.upload.file', e => {
			this.onDragEnter(e);
		});
		$(document).on('dragover.upload.file', e => {
			this.onDropOver(e);
		});
		$(document).on('drop.upload.file', e => {
			this.onDrop(e);
		});
	}

	// 事件解绑__mark__
	componentWillUnmount() {
		$(document).off('dragenter.upload.file');
		$(document).off('drop.upload.file');
	}

	// 事件对应的target是否在上传组件里
	isInComponent(target) {
		let $container = $(this.uploadRef);
		if ($container.length) {
			return $.contains($container[0], target) || $container[0] == target;
		} else {
			return false;
		}
	}

	// document上触发dragenter事件时的处理函数
	onDragEnter(e) {
		// 文件进入__mark__当前组件内，则设置状态为enter，否则设置为unuploaded
		if (this.isInComponent(e.target)) {
			this.setState({ state: STATE.dragenter });
		} else {
			// 当前是enter状态才需要修改__mark__
			if (this.state.state == STATE.dragenter) {
				this.setState({ state: STATE.unuploaded });
			}
		}

		e.stopPropagation();
		e.preventDefault();
	}

	onDropOver(e) {
		e.stopPropagation();
		e.preventDefault();
	}

	// 设置错误状态和tips
	showError(tips) {
		this.setState({ isError: true, tips: tips });
	}
	// 隐藏错误状态和提示默认的友好tips
	hideError() {
		this.setState({ isError: false, tips: this.getConfig('defaultTips') });
	}

	// 展示提示，暂时没用
	showTips(tips) {
		this.setState({ isError: false, tips: tips });
	}

	hideTips() {
		this.setState({ isError: false, tips: this.getConfig('defaultTips') });
	}

	// 获取组件的配置
	getConfig(key) {
		return this.props[key] || defaultConfig[key];
	}

	// 检测文件
	check(file) {
		const accepts = this.getConfig('accepts');
		const size = this.getConfig('size');
		// 允许上传的文件类型
		if (accepts.length) {
			let rule = new RegExp(`\\.${accepts.join('|')}$`, 'i');
			if (!rule.test(file.name)) {
				this.showError(this.getConfig('defaultTips'));
				return false;
			}
		}

		if (file.size > size) {
			this.showError(t('文件大小超过限制__mark__'));
			return false;
		}
		this.hideError();
		return true;
	}
	onDrop(e) {
		// 元素放下在当前组件内则处理
		if (this.isInComponent(e.target)) {
			try {
				let file = e.originalEvent.dataTransfer.files[0];
				this.handleFile(file);
			} catch (e) {
				console.warn(e);
				this.showError(t('请更新您的浏览器版本，或使用chrome浏览器访问__mark__'));
			}
		}
		e.stopPropagation();
		e.preventDefault();
	}

	onChange(e) {
		let file = e.target.files[0];
		if (file && file.name && file.size) {
			this.handleFile(file);
		}
	}

	handleFile(file) {
		this.setState({ state: STATE.checking });
		if (this.check(file)) {
			this.setState({ state: STATE.uploading });
			this.uploadFile(file);
		} else {
			this.setState({ state: STATE.unuploaded });
		}
	}
	uploadFile(file) {
		const { name, size } = file;
		// 只需要设置uploading状态时会用到的字段
		this.setState({ name, size, percentage: 0, uploadedImgUrl: '', tips: '', isError: false });
		// 获取本次请求id
		let currentReqId = ++reqId;

		cosHelper.sliceUploadFile({
			file,
			onTask: () => {},
			onProgress: res => {
				// 请求id不一__mark__样则不需要处理
				if (currentReqId == reqId) {
					this.setState({ percentage: Math.ceil(res.percent * 100) });
				}
			},
			onError: error => {
				if (currentReqId == reqId) {
					// 只需要设置unuploaded状态时会用到的字段
					this.setState({
						tips: this.getConfig('defaultTips'),
						state: STATE.unuploaded,
						isError: false,
					});
				}
			},
			onFinish: async location => {
				if (currentReqId == reqId) {
					this.setState({ state: STATE.uploaded });
					let locationInfo = cosHelper.resolveLocation(location);
					let { key, domain, path } = locationInfo;
					// eslint-disable-next-line @tencent/tea-i18n/no-bare-zh-in-js
					let text2base64 = base64.toBase64('仅用于账号注销__mark__验证身份', true);
					try {
						// 获取授权信息才能访问图片
						let authorization = await cosHelper.getAuthorizationWithCache(key);
						let imgUrl = `https://${domain}${path}?${authorization}&response-content-disposition=inline`;
						this.setState({ uploadedImgUrl: imgUrl });
						let param = {
							path,
							msg: text2base64,
							fontsize: Math.ceil(this.imgRef.clientWidth / 16),
						};
						// 通知父组件
						this.props.onUploaded({ url: imgUrl, attr: JSON.stringify(param) });
					} catch (err) {
						console.error(err);
						app.tips.error(t('获取授权失败__mark__'));
					}
				}
			},
		});
	}

	onReUpload(e) {
		let file = e.target.files[0];
		if (file && file.name && file.size) {
			this.props.onUploaded({ url: '', attr: '' });
			this.handleFile(file);
		}
	}

	onDelete() {
		// 如果正在上传__mark__，则使上传的请求无效
		if (this.state.state == STATE.uploading) {
			++reqId;
		}
		this.setState({ tips: this.getConfig('defaultTips'), state: STATE.unuploaded, isError: false });
		this.props.onUploaded({ url: '', attr: '' });
	}

	renderStartUploading() {
		const { tips, state, percentage, name, size, uploadedImgUrl } = this.state;
		const fileSize = utils.formatFileSize(size);
		const fileDate = utils.dateFormat(new Date(), 'yyyy-MM-dd hh:mm:ss');

		return [
			<div className="tc-upload-box">
				<div className="col" style={{ cursor: 'pointer' }}>
					<img
						src={
							uploadedImgUrl ||
							'https://imgcache.qq.com/open_proj/proj_qcloud_v2/bee-v2/css/img/upload-img.png'
						}
						onClick={() => {
							uploadedImgUrl && window.open(uploadedImgUrl);
						}}
						ref={node => {
							this.imgRef = node;
						}}
					/>
				</div>
				<div className="col">
					<div className="file-name">
						{state == STATE.uploaded
							? [<span>{name} </span>, <i className="icon-valid-flag"></i>]
							: [<span>{name}：</span>, <div className="icon-loading">{percentage}%</div>]}
					</div>
					<div className="text-weak">
						<Trans>文件大小：__mark__</Trans>
						{fileSize}
						<br />
						<Trans>上传日期：__mark__</Trans>
						{fileDate}
					</div>
					<div className="btn-box">
						<a
							href="javascript:;"
							className={classnames('tc-upload-text', { disabled: state == STATE.uploading })}
						>
							<input
								type="file"
								disabled={state == STATE.uploading}
								onChange={e => {
									this.onReUpload(e);
								}}
								ref={node => {
									this.fileInputRef = node;
								}}
							/>
							<Trans>重新上传__mark__</Trans>
						</a>
						<a
							href="javascript:;"
							onClick={() => {
								this.onDelete();
							}}
						>
							<Trans>删除__mark__</Trans>
						</a>
					</div>
				</div>
			</div>,
			<p className="form-input-help">{tips}</p>,
		];
	}

	renderBeforeUnpoaded() {
		const { tips, state } = this.state;

		return (
			<div className="form-unit form-upload-img">
				<div
					ref={node => {
						this.uploadRef = node;
					}}
					className={classnames('tc-upload-box box-border', { hover: state == STATE.dragenter })}
				>
					<div className="tc-upload-mask">
						<Trans>释放鼠标__mark__</Trans>
					</div>
					<div className="tc-upload-null">
						<a href="javascript:;" className="tc-upload-text">
							<input
								type="file"
								onChange={e => {
									this.onChange(e);
								}}
								ref={node => {
									this.fileInputRef = node;
								}}
							/>
							<Trans>点击上传__mark__</Trans>
						</a>
						<span className="text-weak">
							/<Trans>拖拽到此区域__mark__</Trans>
						</span>
					</div>
				</div>
				<p className="form-input-help">
					{tips}
					{typeof this.props.showDemo == 'function'
						? [
								<span>{utils.isIntl() ? ', ' : '，'}</span>,
								<a
									href="javascript:;"
									className="img1"
									onClick={() => {
										this.props.showDemo();
									}}
								>
									<Trans>示意图__mark__</Trans>
								</a>,
						  ]
						: null}
				</p>
			</div>
		);
	}

	render() {
		const { label } = this.props;
		const { isError, state } = this.state;

		return (
			<li>
				<div className="form-label">
					<label>{label}</label>
				</div>
				<div
					className={classnames('form-input is-loading', {
						'is-error': isError,
						'is-success': state == STATE.uploaded,
					})}
				>
					{state < STATE.uploading ? this.renderBeforeUnpoaded() : this.renderStartUploading()}
				</div>
			</li>
		);
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { app } from '@tea/app';
import { connect } from 'react-redux';
import * as utils from '@src/utils';
import { t, Trans } from '@tea/app/i18n';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import classnames from 'classnames';
import { Step } from '../Step';
import { Button } from '@tencent/tea-component';

const mapStateToProps = state => {
	return state;
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Step3 extends React.Component {
	render() {
		return (
			<div className="tc-panel-bd">
				<Step></Step>
				<div className="media media-horiz-center page-feedback logout-result">
					<div className="media-left">
						<i className="m-success-icon"></i>
					</div>
					<div className="media-body">
						<h4 className="media-heading">
							<Trans>您已提交注销申请__mark__</Trans>
						</h4>
						<p className="page-feedback-text">
							<Trans>
								您的注销__mark__申请已经提交__mark__，我们将于 <em style={{ color: '#ff9d00' }}>3个工作日</em>{' '}
								内进行审核。审核结果将于短信和邮件通知您，请注意查收。
								<br />
								<br />
								注意事项：
								<br />
								1. 在申请期间请不要进行任何操作，以免申请失败。
								<br />
								2. 审核结果将发送到您的安全手机__mark__和安全邮箱__mark__，您可以前往
								<a href="/developer/security" data-event="nav">
									安全设置__mark__
								</a>{' '}
								中进行设置。
							</Trans>
						</p>
						<div className="action-line">
							<a href="/developer/security" data-event="nav">
								<button type="button" className="tc-15-btn">
									<Trans>确定__mark__</Trans>
								</button>
							</a>
						</div>
					</div>
				</div>
			</div>
		);
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { app } from '@tea/app';
import { connect } from 'react-redux';
import * as utils from '@src/utils';
import { t, Trans } from '@tea/app/i18n';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { Input } from '@tea/component/Input';
import { Button } from '@tea/component/Button';
import classnames from 'classnames';
import { Step } from '../Step';

const mapStateToProps = state => {
	return state;
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Step4 extends React.Component {
	async redo() {
		const verifyOK = await app.mfa['verify']('account:ApplyAccountDeactivation');
		if (verifyOK) {
			this.props.updateGlobalInfo({ step: 1 });
		}
	}

	render() {
		const { accountDeactivationInfo = {} } = this.props;

		return (
			<div className="tc-panel-bd">
				<Step></Step>
				<div className="media media-horiz-center page-feedback logout-result">
					<div className="media-left">
						<i className="m-error-icon"></i>
					</div>
					<div className="media-body">
						<h4 className="media-heading">
							<Trans>注销申请失败__mark__</Trans>
						</h4>
						<p className="page-feedback-text">
							<Trans>
								您的账号注销申请__mark__因为如下原因被拒绝。如果您希望继续注销__mark__，请根据拒绝原因处理完成相关事项后，重新发起账号注销申请__mark__。
								<br />
								<br />
								申请被拒绝原因：
								<br />
							</Trans>
							{accountDeactivationInfo.reason}
						</p>
						<div className="action-line">
							<Button
								type="primary"
								onClick={() => {
									this.redo();
								}}
							>
								<Trans>重新提交申请__mark__</Trans>
							</Button>
						</div>
					</div>
				</div>
			</div>
		);
	}
}


import { getInitState } from '../state';
import _ from 'underscore';


// action没有提供reducer时，默认的处理逻辑
const reducerDefaultHandler = (state, action) => {
    return {...state, ...action.payload};
};


// 默认提供的reducers
const reducers = {
    // 离开页面时清除状态
    clearState: (state, action) => {
        return getInitState();
    },
    // 更加弹框局部数据
    updateDialogInfo: (state, action) => {
        let newState = {...state};
        newState.dialogInfo = { ...state.dialogInfo, ...action.payload };
        return newState;
    },
    // 更新弹框全部数据
    resetDialogInfo: (state, action) => {
        let newState = {...state};
        newState.dialogInfo = action.payload;
        return newState;
    },
    // 更新全局state
    updateGlobalInfo: reducerDefaultHandler
};

// 注册reducer
export const registerReducer = (nameSpace, handler) => {
    reducers[nameSpace] = typeof handler == 'function' ? handler : reducerDefaultHandler; 
}

// 获取reducers
export const getReducers = () => {
    return reducers;
}


let disppatchToProps = null;

// actions
export const mapDisppatchToProps = (dispatch) => {
    // 缓存
    if (disppatchToProps) {
        return disppatchToProps;
    }
    disppatchToProps = {};
    _.each(reducers, (reducer, key) => {
        disppatchToProps[key] = (data) => {
            dispatch({type: key, payload: data});
        }
    })
    return disppatchToProps;
};

// 新建一__mark__个reducer
export const makeReducer = (key) => (state, action) => {
    let newState = {...state};
    newState[key] = {...state[key], ...action.payload};
    return newState;
}

import _ from 'underscore';

import { getReducers } from './helper';

export const reducer = (state, action) => {
    const reducer = getReducers();
    if (reducer[action.type]) {
        return reducer[action.type](state, action);
    } else {
        console.warn('reducer not found ' + action.type);
        return state;
    }
}

export function getInitState() {
	return {
		router: null,
		authInfo: {},
		accountDeactivationInfo: {},

		dialogInfo: {
			visible: false,
		},

		step: 0,
		remark: '',

		isIntl: false,
	};
}
export let state = getInitState();

import { reducer } from '../reducer';
import { createStore } from 'redux';
import { state } from '../state';

export let store = createStore(reducer, state);


import React, { Fragment } from 'react';
import { Form } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { commonService } from '@src/services';
import * as utils from '@src/utils';
import { developerService } from '@src/services';
import { app } from '@tea/app';
import { Icon } from '@tea/component/icon';
import { Button, Bubble, Modal } from '@tencent/tea-component';

export class Base extends React.Component {
	errorConfig = {
		'10001': {
			title: t('该账号已被注册__mark__'),
			content: '绑定__mark__失败，该账号已被占用，请您更换账号重试__mark__',
			btnText: t('更换账号重试__mark__'),
		},
		'10002': {
			title: t('该账号已经是子用户__mark__'),
			content: '绑定__mark__失败，该账号已经是腾讯云的子用户__mark__，请您更换账号重试__mark__',
			btnText: t('更换账号重试__mark__'),
		},
		'10011': { title: '', content: '登录态校验失败，是否重新绑定__mark__？', btnText: t('重新绑定__mark__') },
	};
	// 关联类型的中文描述
	name = '';
	// 关联类型，传给后台
	type = '';
	// 关联时请求的api名称
	apiName = '';

	authHost = window['QCMAIN_HOST'] || 'cloud.tencent.com';

	async componentDidMount() {}

	async getBindInfo() {
		try {
			// 获取账号关联的信息
			const bindInfo = await developerService.getAccountBindInfo();
			this.props.resetBindInfo(bindInfo);
		} catch (e) {
			//
		}
	}

	// 点击绑定__mark__按钮的处理函数
	async bind() {
		if (utils.isMobile()) {
			if (this.type == 'wechat') {
				this.props.resetDialogInfo({
					visible: true,
					title: '账号绑定__mark__提醒',
					size: 376,
					content:
						'移动端暂不支持绑定__mark__微信公众号，您可以通过PC端访问 控制台-账号信息__mark__ 完成账号绑定__mark__。',
					buttons: [
						{
							text: '确定__mark__',
							onClick: () => {
								this.props.resetDialogInfo({ visible: false });
							},
						},
					],
					cancelBtn: false,
				});
				return;
			} else if (this.type == 'weixin') {
				// 判断移动端是否支持微信关联，通过二维码__mark__或者按钮授权
				const isMobile = utils.isMobile();
				const isWeChat = utils.isWeChat();
				const isIpad = utils.isIpad();
				const isSupportWxQrcode = !isMobile || (!isWeChat && isIpad);
				const isSupportWxOauth = utils.isSupportWxOauth();

				if (isSupportWxQrcode || isSupportWxOauth) {
					location.href = 'https://' + window.QCMAIN_HOST + '/wechat/bindWx';
				} else {
					this.props.resetDialogInfo({
						visible: true,
						title: '账号绑定__mark__提醒',
						size: 376,
						content:
							'当前浏览器不支持微信授权，请使用UC、Safari、QQ浏览器或在微信内打开腾讯云账号信息__mark__页绑定__mark__微信。',
						buttons: [
							{
								text: '确定__mark__',
								onClick: () => {
									this.props.resetDialogInfo({ visible: false });
								},
							},
						],
						cancelBtn: false,
					});
				}
				return;
			}
		}
		const verifyOK = await app.mfa['verify'](this.apiName);
		if (verifyOK) {
			try {
				await this.showBindDialog();

				this.getBindInfo();
			} catch (e) {
				return;
			}
		}
	}

	async showBindDialog() {
		// 子类实现
	}

	/*
        这里解绑__mark__逻辑只适用于非邮箱方式，因为邮箱是不能解绑__mark__的
        1 注册方式为邮箱的时候，其他绑定__mark__方式都可以解绑__mark__
        2 注册方式为非邮箱时，情况分为当前注册类型和非当前注册类型（前者需要绑定__mark__了邮箱且在白名单才能解绑__mark__，后者都可以解绑__mark__）

    */
	canUnBind() {
		const registerType = this.props['type'];
		// 注册方式为邮箱时，其他注册方式可以解绑__mark__，因为邮箱不能解绑__mark__，所以保证了至少有一__mark__种登录方式__mark__
		if (registerType !== this.type) {
			return true;
		} else if (
			this.props['mail'] !== void 0 &&
			this.props.LOGIN_TYPE_UNBIND_WHTELIST &&
			registerType != 'mail'
		) {
			return true;
		} else {
			return false;
		}
	}

	async beforeUnBind() {}

	async afterUnBind() {}

	// 执行解绑__mark__
	async unBind() {
		const bindTypes = [];
		const bindAccountName = this.name;

		['weixin', 'qq', 'wechat', 'mail'].forEach(bindType => {
			if (this.props[bindType]) {
				bindTypes.push(bindType);
			}
		});
		// 至少需要保留一__mark__种登录方式__mark__
		if (bindTypes.length < 2 && this.props.userInfo.isOwner) {
			this.props.resetDialogInfo({
				visible: true,
				size: 's',
				title: '解绑__mark__失败',
				content: '请至少保留一__mark__种登录方式__mark__',
				buttons: [
					{
						text: t('确定__mark__'),
					},
				],
				cancelBtn: false,
			});

			return;
		}

		try {
			// 解绑__mark__是否有前置条件
			await this.beforeUnBind();
		} catch (e) {
			return;
		}

		const verifyOK = await app.mfa['verify']('account:UnbindAccount');

		if (!verifyOK) {
			return;
		}

		let data = {
			serviceType: 'account',
			cmd: 'UnbindAccount',
			data: { type: this.type, lang: this.props.lang },
		};
		try {
			await commonService.mfaRequest(data, { version: 2 });
			const account = this.props[this.type];
			this.getBindInfo();

			Modal.success({
				size: 's',
				message: <Trans>解绑__mark__成功</Trans>,
				description: (
					<Fragment>
						您已成功解除与{bindAccountName}（{account}
						）的绑定__mark__关系，后续您将无法用该方式登录当前账号。
					</Fragment>
				),
				buttons: [<Button type="primary">{t('确定__mark__')}</Button>],
			});

			try {
				await this.afterUnBind();
			} catch (e) {
				return;
			}
		} catch (error) {
			error = error || {};
			switch (+error.code) {
				case 10005:
					utils.showErrorTips(t('注册帐号不允许解绑__mark__'));
					break;
				case 10010:
					this.props.resetDialogInfo({
						title: t('温馨提示__mark__'),
						visible: true,
						content: t(
							'您的账号未设置安全手机__mark__，为了保障您的账号安全请先设置安全手机__mark__，完成后可解绑__mark__微信。',
						),
						buttons: [
							{
								text: t('去设置'),
								onClick: () => {
									this.props.resetDialogInfo({ visible: false });
									this.props.router.push('/developer/security');
								},
							},
						],
					});
					break;
				case 10006:
					utils.showErrorTips(t('解绑__mark__成功'));
					this.getBindInfo();
					break;
				case 10009:
					this.props.resetDialogInfo({
						title: t('温馨提示__mark__'),
						visible: true,
						content: t(
							'您已经在登录或操作保护__mark__中开启微信扫码校验，不能解绑__mark__微信登录方式__mark__，如需解绑__mark__，请在安全设置__mark__-敏感操作中关闭微信扫码校验后操作',
						),
						buttons: [
							{
								text: '前往关闭微信扫码校验',
								onClick: () => {
									this.props.resetDialogInfo({ visible: false });
									this.props.router.push('/developer/security');
								},
							},
						],
					});
					break;
				default:
					utils.showErrorTips('解绑__mark__失败，请重试');
					break;
			}
		}
	}

	// 通过ticket提交__mark__绑定__mark__
	async bindAccountByTicket(accountData) {
		try {
			const { data } = await commonService.mfaRequest(
				{
					serviceType: 'account',
					cmd: 'BindAccountByTicket',
					data: {
						ticket: accountData.ticket,
						lang: this.props.lang,
					},
				},
				{ version: 2 },
			);

			return Promise.resolve(data);
		} catch (error) {
			error = error || {};

			switch (error.code) {
				case 10020:
				case 10021:
					utils.showErrorTips('由于长时间未操作，您的授权已过期，请重新绑定__mark__');
					break;
				case 10022:
					utils.showErrorTips('操作已过期，请重试__mark__');
					break;
				default:
					utils.showErrorTips('绑定__mark__失败，请重试');
					break;
			}
			return Promise.reject(error);
		}
	}

	render() {
		let { type: registerType, isDnspod } = this.props;
		const { role, wechatBindPolicy } = this.props.userInfo;
		let description = this.name;
		// account非空说明绑定__mark__了子类定义的类型
		let account = this.props[this.type];
		// 绑定__mark__了该类型账号
		if (account !== void 0) {
			if (registerType === this.type) {
				description += '(注册方式)';
			}

			return (
				<Form.Pure label={t(description)} className={'pure-text-row'}>
					<div className="form-unit">
						<div className="form-text">
							<Bubble content={account}>
								<span>{account}</span>
							</Bubble>
							{this.canUnBind() ? (
								<a
									href="javascript:;"
									className={'tc-link-btn'}
									onClick={() => {
										this.unBind();
									}}
								>
									<Trans>解绑__mark__</Trans>
								</a>
							) : null}
						</div>
					</div>
				</Form.Pure>
			);
		} else {
			const BindWechatForbidden = (
				<>
					您已被禁止绑定__mark__微信，详情请前往 访问管理-用户-用户设置-
					<a href="/cam/security/subAccount" target="_blank">
						微信限制
					</a>{' '}
					查看
				</>
			);

			return (
				<Form.Pure label={t(description)} className={'pure-text-row'}>
					<div className="form-unit">
						<div className="form-text">
							<Trans>无</Trans>

							{this.type == 'weixin' && role == 'subaccount' && wechatBindPolicy == 0 ? (
								<Bubble content={BindWechatForbidden}>
									<Button type="text" className={'tc-link-btn'} disabled>
										<Trans>绑定__mark__</Trans>
									</Button>
								</Bubble>
							) : (
								<a
									href="javascript:;"
									className={'tc-link-btn'}
									onClick={() => {
										this.bind();
									}}
								>
									<Trans>绑定__mark__</Trans>
								</a>
							)}
						</div>
					</div>
				</Form.Pure>
			);
		}
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { Layout, Form, Tab } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { QQ } from './QQ';
import { Mail } from './Mail';
import { Wechat } from './Wechat';
import { MP } from './MP';
import { Base } from './Base';

export class BindWechatAndQQ extends React.Component {
	render() {
		return (
			<Tab className={'qq-box'}>
				<Wechat></Wechat>
				<QQ></QQ>
			</Tab>
		);
	}
}

export class BindMailAndMP extends React.Component {
	render() {
		return (
			<Tab>
				<Mail></Mail>
				<MP></MP>
			</Tab>
		);
	}
}

// 子用户__mark__
export class BindWechat extends React.Component {
	render() {
		return (
			<Tab title={t('登录方式__mark__')} className={'qq-box'}>
				<Wechat></Wechat>
			</Tab>
		);
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { Input, Button } from '@tencent/tea-component';
import { Layout, Form, List, CountDown, MailAndPassword } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { Base } from './Base';
import { commonService, developerService } from '@src/services';
import * as utils from '@src/utils';
import cookie from 'js-cookie';
import classnames from 'classnames';
import pify from 'pify';
import _ from 'underscore';
import { TimerButton } from '@src/components/TimerButton';
const FormItem = Form.Item;

const allSuggestSuffix = [
	'qq.com',
	'gmail.com',
	'126.com',
	'163.com',
	'hotmail.com',
	'263.com',
	'21cn.com',
	'yahoo.com',
	'yahoo.com.cn',
	'live.com',
	'sohu.com',
	'sina.com',
	'sina.com.cn',
];

const mapStateToProps = state => {
	return {
		...state.bindInfo,
		router: state.router,
		lang: state.lang,
		LOGIN_TYPE_UNBIND_WHTELIST: state.whiteList.LOGIN_TYPE_UNBIND_WHTELIST,
		userInfo: state.userInfo,
	};
};

let requestId = 0;
// 邮箱关联表单组件
@Form.create()
@connect(
	state => {
		return state;
	},
	mapDisppatchToProps,
)
class BindMail extends MailAndPassword {
	constructor(props) {
		super(props);
		Object.assign(this.state, { suggestSuffix: [] });
	}

	$input = null;
	// 实时校验邮箱的合法性
	async checkIsRegisterOrNot() {
		// 邮箱格式不对，则不需要到后台校验
		// try {
		//     await pify(this.props.form.validateFields)(['mail']);
		// } catch(e) {
		//     return;
		// }

		this.props.updateDialogInfo({
			disabledBtns: [0],
		});

		const mail = this.props.form.getFieldValue('mail');
		// 记录本次请求的id
		const currentRequestId = ++requestId;
		try {
			const ret = await developerService.checkMailAccount({ mail: mail });
			// 本次请求的响应是否还有效
			if (currentRequestId != requestId) {
				return;
			}
			if (ret.status == 0) {
				this.props.updateDialogInfo({
					disabledBtns: [],
				});
				return Promise.resolve();
			} else {
				const currentMail = this.props.form.getFieldValue('mail');
				if (currentMail == mail) {
					return Promise.reject({
						msg:
							ret.status == 1
								? '该邮箱已被其他账号绑定__mark__，请更换邮箱'
								: '该邮箱已注册腾讯云账号，请更换邮箱',
					});
					//this.props.form.setFields({mail: {value: currentMail, errors: [new Error(t('不能关联注册账号，请更换邮箱'))]}});
				}
			}
		} catch (e) {
			// 本次请求的响应是否还有效
			if (currentRequestId != requestId) {
				return;
			}
			// const currentMail = this.props.form.getFieldValue('mail');
			// this.props.form.setFields({mail: {value: currentMail, errors: [new Error[t('校验邮箱失败')]]}});
			return Promise.reject({ msg: t('校验邮箱失败') });
		}
	}

	updateSuggestList(e) {
		const { mail = '' } = this.props.form.getFieldsValue(['mail']);
		this.props.form.setFields({ mail: { value: mail, errors: [] } });
		if (!mail) {
			this.setState({ suggestSuffix: [] });
			setTimeout(() => {
				this.$input.focus();
			}, 10);
			return;
		}
		const keyCode = e.which || e.keyCode;
		const { suggestSuffix } = this.state;

		switch (keyCode) {
			//esc
			case 27:
				this.setState({ suggestSuffix: [] });
				return;
			//上
			case 38:
				this.switchSuggestList('up');
				e.preventDefault();
				return false;
			//下
			case 40:
				this.switchSuggestList('down');
				e.preventDefault();
				return;

			//enter
			case 13:
				for (let i = 0; i < suggestSuffix.length; i++) {
					if (suggestSuffix[i].isSelected) {
						this.setState({ suggestSuffix: [] });
						this.props.form.setFields({ mail: { value: suggestSuffix[i].value, errors: [] } });
						return;
					}
				}
				return;
		}

		var position = mail.indexOf('@');
		let nextSuggestSuffix = [];
		if (position == -1) {
			nextSuggestSuffix = allSuggestSuffix.map(subfix => {
				return { value: `${mail}@${subfix}` };
			});
		} else if (position == mail.lenght - 1) {
			nextSuggestSuffix = allSuggestSuffix.map(subfix => {
				return { value: `${mail}${subfix}` };
			});
		} else {
			let subfix = mail.slice(position + 1);
			allSuggestSuffix.forEach(currentSubfix => {
				if (subfix == currentSubfix.substr(0, subfix.length)) {
					nextSuggestSuffix.push({ value: `${mail.slice(0, position + 1)}${currentSubfix}` });
				}
			});
		}
		this.setState({ suggestSuffix: utils.isMobile() ? [] : nextSuggestSuffix });
		setTimeout(() => {
			this.$input.focus();
		}, 10);
	}

	getAccount() {
		return this.props.form.getFieldsValue(['mail']);
	}
	switchSuggestList(direction) {
		const { suggestSuffix = [] } = this.state;
		if (!suggestSuffix.length) {
			return;
		}
		let nextSuggestSuffix = [...suggestSuffix];
		var total = suggestSuffix.length;
		let currentIndex = direction == 'down' ? -1 : total;

		for (let i = 0; i < nextSuggestSuffix.length; i++) {
			if (nextSuggestSuffix[i].isSelected) {
				currentIndex = i;
			}
			nextSuggestSuffix[i].isSelected = false;
		}

		let nextIndex = 0;
		if (direction == 'down') {
			nextIndex = (currentIndex + 1 + total) % total;
		} else {
			nextIndex = (currentIndex - 1 + total) % total;
		}

		nextSuggestSuffix[nextIndex].isSelected = true;
		this.setState({ suggestSuffix: nextSuggestSuffix }, () => {
			document.querySelector(`.J-list-wrapper li:nth-child(${nextIndex + 1})`).scrollIntoView();
		});
	}

	getTpl() {
		const { getFieldDecorator } = this.props.form;
		const { suggestSuffix } = this.state;
		// 邮箱组件
		const common = getFieldDecorator('mail', {
			initialValue: '',
			rules: [
				{
					validator: (rule, value, callback) => {
						setTimeout(async () => {
							const mail = this.props.form.getFieldValue('mail');
							this.setState({ suggestSuffix: [] });
							if (utils.checkEmail(mail)) {
								try {
									await this.checkIsRegisterOrNot();
									callback();
								} catch (e) {
									callback(e.msg);
								}
							} else {
								callback(t('请输入有效的邮箱地址__mark__'));
							}
						}, 200);
					},
				},
			],
			validateTrigger: 'onBlur',
		})(
			<Input
				placeholder={t('请填写邮箱地址__mark__')}
				ref={node => {
					this.$input = node;
				}}
				onKeyUp={e => {
					this.updateSuggestList(e);
				}}
			></Input>,
		);
		const tpl = super.getTpl();

		const mailAccountTpl = (
			<FormItem label={t('邮箱账号')} className="list-3" required>
				{common}
			</FormItem>
		);

		const mailAccountTplWithTips = (
			<FormItem label={t('邮箱账号')} className="list-3" required hideStatusIcon={true}>
				<div className="uc-dropdown-wrap">
					{common}
					{suggestSuffix.length ? (
						<ul className="tc-15-dropdown-menu J-list-wrapper">
							{suggestSuffix.map((item, index) => {
								return (
									<li
										className={classnames({ hover: item.isSelected })}
										onClick={e => {
											this.props.form.setFields({ mail: { value: item.value, errors: [] } });
											this.setState({ suggestSuffix: [] });
										}}
									>
										<a className={classnames('tip', { hover: item.isSelected })}>{item.value}</a>
									</li>
								);
							})}
						</ul>
					) : null}
				</div>
			</FormItem>
		);

		// 验证码__mark__组件
		const mailCodeTpl = (
			<FormItem label={t('邮箱验证码__mark__')} className="list-3" required hideStatusIcon={true}>
				{getFieldDecorator('code', {
					initialValue: '',
					rules: [
						{ required: true, message: t('验证码不能为空__mark__') },
						{
							message: t('请输入6位有效验证码__mark__'),
							pattern: /^\d{6}$/,
						},
					],
					validateTrigger: 'onBlur',
				})(<Input placeholder={t('请填写6位数字验证码__mark__')} />)}

				<TimerButton
					beforeSend={() => {
						return pify(this.props.form.validateFields)(['mail']);
					}}
					sendCode={async ticket => {
						const mail = this.props.form.getFieldValue('mail');

						try {
							await commonService.sendVerifyCode({
								lang: this.props.lang,
								action: 'ModifyMail',
								mail,
								type: 2, // 验证码__mark__类型
								...ticket,
							});
							return Promise.resolve();
						} catch (e) {
							this.props.form.setFields({
								code: {
									value: this.props.form.getFieldValue('code'),
									errors: [new Error(t('发送验证码失败__mark__'))],
								},
							});
							return Promise.reject();
						}
					}}
				>
					>
				</TimerButton>
			</FormItem>
		);

		tpl.unshift(suggestSuffix.length ? mailAccountTplWithTips : mailAccountTpl);
		tpl.push(mailCodeTpl);
		return tpl;
	}
}

// 邮箱关联组件
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Mail extends Base {
	type = 'mail';
	name = '邮箱';
	apiName = 'account:BindMailAccount';
	formRef = null;

	async showBindDialog() {
		this.openDialog();
		return new Promise((resolve, reject) => {
			this.resolve = resolve;
			this.reject = reject;
		});
	}

	openDialog() {
		this.props.resetDialogInfo({
			title: '绑定__mark__邮箱',
			size: utils.isMobile() ? 420 : 550,
			visible: true,
			content: (
				<BindMail
					ref={node => {
						this.formRef = node;
					}}
				></BindMail>
			),
			buttons: [
				{
					text: t('确定__mark__'),
					onClick: async () => {
						let data;
						try {
							data = await pify(this.formRef.validateFields)();
						} catch (e) {
							return;
						}
						const param = {
							password: utils.encrypt(data.newPassword),
							code: data.code,
							mail: data.mail,
							lang: this.props.lang,
						};
						this.props.updateDialogInfo({
							disabledBtns: [0],
						});
						try {
							const ret = await commonService.mfaRequest(
								{
									serviceType: 'account',
									cmd: 'BindMailAccount',
									data: param,
								},
								{ version: 2 },
							);

							if (ret.data.status == 0) {
								this.resolve();
								this.props.resetDialogInfo({
									visible: false,
								});
							} else {
								this.props.resetDialogInfo({
									visible: true,
									title: '该邮箱已被绑定__mark__',
									msg: `绑定__mark__失败，该邮箱已经绑定__mark__了腾讯云账号${ret.data.account},请您更换账号重试__mark__`,
									buttons: [
										{
											text: t('更换账号重试__mark__'),
											onClick: () => {
												this.openDialog();
											},
										},
									],
								});
							}
						} catch (error) {
							this.props.updateDialogInfo({
								disabledBtns: [],
							});
							switch (error.code) {
								case 10001:
								case 10002:
								case 10011:
									let config = this.errorConfig[error.code];
									this.props.resetDialogInfo({
										visible: true,
										title: config.title,
										content: config.content,
										buttons: [
											{
												text: config.btnText,
												onClick: () => {
													this.openDialog();
												},
											},
										],
									});
									return;
								case 10003:
									utils.showErrorTips(
										t(
											'当前账号是使用邮箱注册或已关联了邮箱账号，无法继续关联其他邮箱账号，请更换关联方式',
										),
									);
									this.reject();
									break;
								case 10012:
									this.formRef.setFields({
										code: {
											value: this.formRef.getFieldValue('code'),
											errors: [new Error(t('验证码错误__mark__'))],
										},
									});
									break;
								case 10013:
									this.formRef.setFields({
										code: {
											value: this.formRef.getFieldValue('code'),
											errors: [new Error(t('验证码已过期__mark__'))],
										},
									});
									break;
								default:
									utils.showErrorTips('绑定__mark__失败，请重试');
									this.reject();
							}
						}
					},
				},
			],
		});
	}
}

import { t, Trans } from '@tea/app/i18n';
import { Base } from './Base';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { connect } from 'react-redux';
import { commonService, developerService } from '@src/services';
import * as utils from '@src/utils';

const mapStateToProps = state => {
	return {
		...state.bindInfo,
		uin: state.userInfo.uin,
		router: state.router,
		lang: state.lang,
		LOGIN_TYPE_UNBIND_WHTELIST: state.whiteList.LOGIN_TYPE_UNBIND_WHTELIST,
		userInfo: state.userInfo,
	};
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class MP extends Base {
	name = '微信公众平台';
	type = 'wechat';
	apiName = 'account:BindMpAccount';

	async showBindDialog() {
		return new Promise((resolve, reject) => {
			this.resolve = resolve;
			this.reject = reject;
			this.props.resetDialogInfo({
				title: '账号绑定__mark__',
				visible: true,
				content: '请点击“去授权”按钮，在授权页面扫码授权后，即可完成账号绑定__mark__。',
				buttons: [
					{
						text: '去授权',
						onClick: () => {
							this.props.resetDialogInfo({ visible: false });
							this.openWechatOAPage();
						},
					},
				],
			});
		});
	}

	openWechatOAPage() {
		let callback = '//' + this.authHost + '/wechat/account_bind_result';
		if (!/^http/.test(callback)) {
			callback = 'https:' + callback;
		}
		const url =
			'//' + this.authHost + '/login/mp?passthruCallback=1&s_url=' + encodeURIComponent(callback);
		const openWin = window.open(url);

		if (!openWin) {
			this.props.resetDialogInfo({
				visible: true,
				title: t('新开公众平台授权窗口被拦截'),
				content:
					'请点击临时允许，允许弹出公众平台授权页面，以便继续执行绑定__mark__，或前往浏览器设置界面关闭弹出窗口阻止程序。',
				buttons: [
					{
						text: t('临时允许'),
						onClick: () => {
							this.props.resetDialogInfo({ visible: false });
							this.openWechatOAPage();
						},
					},
				],
			});
		} else {
			this.pollCheckQywechatAuthResult();
		}
	}

	pollCheckQywechatAuthResult() {
		this.stopPollCheckBindResult();

		this.pollCheckTimer = setInterval(() => {
			const auth_code = localStorage.getItem('wechat_bind_code');

			if (auth_code) {
				this.stopPollCheckBindResult();
				this.submitBind(auth_code);
			}
		}, 200);
	}

	stopPollCheckBindResult() {
		localStorage.removeItem('wechat_bind_code');

		if (this.pollCheckTimer) {
			clearInterval(this.pollCheckTimer);
		}
	}

	componentWillUnmount() {
		this.stopPollCheckBindResult();
	}
	// @return Promise
	async beforeUnBind() {
		return new Promise(async (resolve, reject) => {
			const { uin } = this.props;
			let data;
			try {
				data = await developerService.describeUnbindInfo({
					Version: '2018-06-08',
					UnbindUin: uin,
				});
			} catch (e) {
				utils.showErrorTips(t('查询解绑__mark__条件失败'));
				return reject();
			}

			let tips = '';
			if (data.HasDoingBilling) {
				tips = t('您的账户中有未结算的TCB资源，请您先往小程序侧进行结算，才可解绑__mark__。');
			} else if (data.HasUnFinishPaidResource) {
				tips = t('您的账户中有开通付费版本的TCB资源，请您先往小程序侧降配为免费版才可解绑__mark__账号。');
			} else if (data.NeedCleanDatabase || data.NeedCleanStorage || data.NeedCleanFunction) {
				const obj = {
					NeedCleanDatabase: t('数据库'),
					NeedCleanStorage: t('存储'),
					NeedCleanFunction: t('云函数'),
				};
				const resources = [];
				if (data.NeedCleanDatabase) {
					resources.push(obj.NeedCleanDatabase);
				}
				if (data.NeedCleanStorage) {
					resources.push(obj.NeedCleanStorage);
				}
				if (data.NeedCleanFunction) {
					resources.push(obj.NeedCleanFunction);
				}
				tips = t(
					'您的账户中有使用TCB资源，请您先往小程序侧清理资源（{{resources}}），才可解绑__mark__账号。',
					{ resources: resources.join('、') },
				);
			}

			if (tips) {
				this.props.resetDialogInfo({
					visible: true,
					title: t('提示'),
					content: tips,
					buttons: [
						{
							text: t('知道了__mark__'),
							onClick: () => {
								this.props.resetDialogInfo({
									visible: false,
								});
								reject();
							},
						},
					],
				});
				return;
			}
			try {
				await developerService.getTCBUserInfo();
				this.props.resetDialogInfo({
					visible: true,
					title: t('解绑__mark__'),
					content: t(
						'您的账号已经开始使用小程序·云开发服务，如果您解绑__mark__微信公众号登录方式__mark__，会导致您的小程序·云开发服务不可用，为了避免对您的服务产生影响，请慎重操作。',
					),
					buttons: [
						{
							text: t('继续解绑__mark__'),
							onClick: () => {
								this.props.resetDialogInfo({
									visible: false,
								});
								resolve();
							},
						},
					],
				});
			} catch (error) {
				if (error.codeDesc == 'NotFound.UserNotExists') {
					resolve();
				} else {
					utils.showErrorTips(t('查询解绑__mark__条件失败'));
					reject();
				}
			}
		});
	}

	async submitBind(auth_code) {
		const [serviceType, cmd] = this.apiName.split(':');
		try {
			const resp = await commonService.mfaRequest(
				{
					serviceType: serviceType,
					cmd: cmd,
					data: {
						authCode: utils.encrypt(auth_code),
						lang: this.props.lang,
					},
				},
				{ version: 2 },
			);

			if (resp.data.status == 0) {
				this['resolve'](resp.data);
			} else {
				this.props.resetDialogInfo({
					visible: true,
					title: '绑定__mark__失败',
					content: `该微信公众号已绑定__mark__至腾讯云账号（${resp.data.account}），如果您需要将该微信公众号绑定__mark__到当前登录的腾讯云账号，请先解绑__mark__微信公众号与已有账号的绑定__mark__关系。`,
					buttons: [
						{
							text: t('确定__mark__'),
							onClick: () => {
								this.props.resetDialogInfo({ visible: false });
							},
						},
					],
					cancelBtn: false,
				});
			}
		} catch (error) {
			error = error || {};
			let tips = '';
			switch (error.code) {
				case 10001:
				case 10002:
				case 10011:
					let config = this.errorConfig[error.code];

					if (error.code == 10001 && error.data && error.data.message) {
						const uin = error.data.message.match(/\d+$/);
						if (uin && /^[0-9]+$/.test(uin[0])) {
							config.content = `该微信公众账号已经注册为腾讯云账号（昵称：${
								uin[0]
							}），不能完成绑定__mark__。`;
						}
					}
					this.props.resetDialogInfo({
						visible: true,
						title: config.title,
						content: config.content,
						buttons: [
							{
								text: config.btnText,
								onClick: () => {
									this.props.resetDialogInfo({ visible: false });
									this.openWechatOAPage();
								},
							},
						],
					});
					return;
				case 10003:
					tips = t(
						'当前账号是使用微信公众平台注册或已关联了微信公众平台账号，无法继续关联其他微信公众平台账号，请更换关联方式',
					);
					break;
				default:
					tips = '绑定__mark__失败，请重试';
			}
			this.props.resetDialogInfo({
				visible: true,
				title: '绑定__mark__失败',
				content: tips,
				buttons: [
					{
						text: t('确定__mark__'),
						onClick: () => {
							this.props.resetDialogInfo({ visible: false });
						},
					},
				],
				cancelBtn: false,
			});
		}
	}
}

import { t, Trans } from '@tea/app/i18n';
import { Base } from './Base';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { connect } from 'react-redux';
import { commonService } from '@src/services/common';
import * as utils from '@src/utils';
import cookie from 'js-cookie';
const mapStateToProps = state => {
	return {
		...state.bindInfo,
		router: state.router,
		lang: state.lang,
		LOGIN_TYPE_UNBIND_WHTELIST: state.whiteList.LOGIN_TYPE_UNBIND_WHTELIST,
		userInfo: state.userInfo,
	};
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class QQ extends Base {
	name = 'QQ';
	type = 'qq';
	apiName = 'account:BindQQOpenIdAccount';

	async showBindDialog() {
		return new Promise(async (resolve, reject) => {
			this.resolve = resolve;
			this.reject = reject;
			this.props.resetDialogInfo({
				title: '账号绑定__mark__',
				visible: true,
				content: '请点击“去授权”按钮，在授权页面登录授权后，即可完成账号绑定__mark__。',
				buttons: [
					{
						text: t('去授权'),
						onClick: () => {
							this.props.resetDialogInfo({ visible: false });
							this.gotoAuth();
						},
					},
				],
			});
		});
	}

	bindQQFromMobile(data) {
		return new Promise((resolve, reject) => {
			this.resolve = resolve;
			this.reject = reject;
			this.submitBind(data);
		});
	}

	async componentDidMount() {
		// 移动端QQ授权返回__mark__的参数
		const code = cookie.get('qq_bind_code');
		const state = cookie.get('qq_bind_state');
		// 有授权参数
		if (code && state) {
			// 删除__mark__cookie
			const cookieDomain =
				window.QCMAIN_HOST == 'cloud.tencent.com' ? '.cloud.tencent.com' : '.qcloud.com';
			cookie.remove('qq_bind_code', { domain: cookieDomain });
			cookie.remove('qq_bind_state', { domain: cookieDomain });

			// 关联QQ账号
			this.bindQQFromMobile({
				code: decodeURIComponent(code),
				state: decodeURIComponent(state),
			}).then(result => {
				this.props.resetDialogInfo({
					title: '绑定__mark__成功',
					visible: true,
					content: `现在您可以通过${this.name} ${result.account} 登录腾讯云`,
					buttons: [
						{
							text: t('确定__mark__'),
						},
					],
				});
				this.getBindInfo();
			});
		}
	}

	gotoAuth() {
		let url = '//' + this.authHost + '/login/qqConnect?action=accountBindCallback';
		// 移动端直接跳过去授权再跳回来
		if (utils.isMobile()) {
			location.href = url + '&self_direct=1';
			return;
		}
		let openWin = window.open(url, '_blank');
		openWin.focus && openWin.focus();

		$(window)
			.off('message.bindQQ')
			.on('message.bindQQ', e => {
				let data = {};
				try {
					data = JSON.parse(e.originalEvent['data']);
				} catch (e) {}

				let origin = e['origin'] || e.originalEvent['origin'];

				// 去除端口
				if (origin) {
					origin = origin.replace(/(:\d+)/g, '');
				}

				if (!/\.(tencent\.com|qcloud\.com|qq\.com|dnspod\.cn|dnspod\.com)$/i.test(origin)) {
					return;
				}
				switch (data.action) {
					case 'loginCallback':
						openWin && openWin.close();
						if (location.pathname !== '/developer' && location.pathname !== '/developer/index') {
							return;
						}
						this.submitBind(data);
						break;
				}
			});
	}

	async submitBind(authData) {
		const params = {
			code: authData.code,
			state: authData.state,
			redirect_uri: 'https://' + this.authHost + '/login/qqAccessCallback',
			lang: this.props.lang,
		};

		const [serviceType, cmd] = this.apiName.split(':');
		try {
			const resp = await commonService.mfaRequest(
				{
					serviceType: serviceType,
					cmd: cmd,
					data: params,
				},
				{ version: 2 },
			);
			if (resp.data.status == 0) {
				this.resolve(resp.data);
			} else {
				this.props.resetDialogInfo({
					title: '绑定__mark__失败',
					visible: true,
					content: `该QQ已绑定__mark__至腾讯云账号（${resp.data.account}），如果您需要将该QQ绑定__mark__到当前登录的腾讯云账号，请先解绑__mark__QQ与已有账号的绑定__mark__关系。`,
					buttons: [
						{
							text: t('确定__mark__'),
						},
					],
				});
				this.reject(resp);
			}
		} catch (error) {
			error = error || {};

			switch (error.code) {
				case 10001:
				case 10002:
				case 10011:
					let config = this.errorConfig[error.code];
					this.props.resetDialogInfo({
						visible: true,
						title: config.title,
						content: config.content,
						buttons: [
							{
								text: config.btnText,
								onClick: () => {
									this.props.resetDialogInfo({ visible: false });
									this.gotoAuth();
								},
							},
						],
					});
					break;
				case 10003:
					this.props.resetDialogInfo({
						visible: true,
						title: '绑定__mark__失败',
						content: t(
							'当前账号是使用QQ注册或已关联了QQ账号，无法继续关联其他QQ账号，请更换关联方式',
						),
						buttons: [
							{
								text: t('确定__mark__'),
								onClick: () => {
									this.props.resetDialogInfo({ visible: false });
								},
							},
						],
						cancelBtn: false,
					});
					this.reject(error);
					break;
				default:
					this.props.resetDialogInfo({
						visible: true,
						title: '绑定__mark__失败',
						content: '绑定__mark__失败，请刷新重试',
						buttons: [
							{
								text: t('确定__mark__'),
								onClick: () => {
									this.props.resetDialogInfo({ visible: false });
								},
							},
						],
						cancelBtn: false,
					});
					this.reject(error);
			}
		}
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { Layout, Form } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { Base } from './Base';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { connect } from 'react-redux';
import * as utils from '@src/utils';
import { commonService, developerService } from '@src/services';
import cookie from 'js-cookie';
import objectPath from 'object-path';

const Tpl = () => {
	const qcmainBase = location.protocol + '//' + (window['QCMAIN_HOST'] || 'cloud.tencent.com');
	const callback = qcmainBase + '/wechat/account_bind_result';
	const url =
		qcmainBase +
		'/login/wechat?passthruCallback=1&s_url=' +
		encodeURIComponent(callback) +
		'&theme=simple';

	return (
		<div className="qc-wechat-dialog-box">
			<div
				className="qc-wechat-dialog-img qc-wechat-success"
				style={{ width: '188px', height: '188px', margin: '0px auto' }}
			>
				<iframe
					src={url}
					width="188"
					height="188"
					allowtransparency="yes"
					frameborder="no"
					scrolling="no"
				/>
			</div>
			<div className="qc-wechat-dialog-text">
				<dl className="qc-wechat-dl qc-wechat-relevance">
					<dd>
						<div className="qc-wechat-title">扫码快捷登录</div>
						<div className="qc-wechat-ifon">通过微信扫码，快速登录账号</div>
					</dd>
					<dd>
						<div className="qc-wechat-title">微信安全校验</div>
						<div className="qc-wechat-ifon">支持微信扫码校验身份，保障账号安全</div>
					</dd>
					<dd>
						<div className="qc-wechat-title">可关联多账号</div>
						<div className="qc-wechat-ifon">扫码轻松切换账号，方便多账号管理</div>
					</dd>
				</dl>
			</div>
		</div>
	);
};

const mapStateToProps = state => {
	return {
		...state.bindInfo,
		router: state.router,
		lang: state.lang,
		LOGIN_TYPE_UNBIND_WHTELIST: state.whiteList.LOGIN_TYPE_UNBIND_WHTELIST,
		userInfo: state.userInfo,
	};
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Wechat extends Base {
	name = '微信';
	type = 'weixin';
	apiName = 'account:BindWechatAccount';

	async showBindDialog() {
		localStorage.removeItem('wechat_bind_code');
		this.startPoll();
		this.openDialog();
		return new Promise((resolve, reject) => {
			this.resolve = resolve;
			this.reject = reject;
		});
	}

	openDialog() {
		this.props.resetDialogInfo({
			visible: true,
			title: '扫码绑定__mark__微信，提升账号安全和使用便利性',
			content: <Tpl></Tpl>,
			cancelBtn: false,
			closeCb: () => {
				this.props.resetDialogInfo({
					visible: false,
				});
				this.stopPoll();
				this.reject('close bindWechat window');
			},
		});
	}

	componentWillUnmount() {
		this.stopPoll();
	}

	startPoll() {
		this.timerId = setInterval(() => {
			if (this.timerId === null) {
				return;
			}
			var auth_code = localStorage.getItem('wechat_bind_code');
			if (auth_code) {
				this.stopPoll();
				this.props.resetDialogInfo({
					visible: false,
				});
				this.submitBind(auth_code);
			}
		}, 200);
	}

	stopPoll() {
		localStorage.removeItem('wechat_bind_code');
		clearInterval(this.timerId);
		this.timerId = null;
	}

	async afterUnBind() {
		const { role, wechatBindPolicy, isOwner } = this.props.userInfo;

		return new Promise(async (resolve, reject) => {
			try {
				if (!isOwner) {
					// 设置子用户__mark__禁止绑定__mark__微信，解绑__mark__后需要更disable绑定__mark__按钮
					if (role == 'subaccount' && wechatBindPolicy == 0) {
						this.props.updateUserInfo({ wechatBindPolicy: 0 });
					}

					// 企业微信子用户__mark__解绑__mark__微信后需要隐藏微信模块
					if (role == 'wechatcorp') {
						this.props.updateUserInfo({ canBindWechat: 0 });
					}
				}

				resolve();
			} catch (e) {
				reject();
			}
		});
	}

	async submitBind(auth_code) {
		const [serviceType, cmd] = this.apiName.split(':');

		try {
			const resp = await commonService.mfaRequest(
				{
					serviceType: serviceType,
					cmd: cmd,
					data: {
						authCode: utils.encrypt(auth_code),
						lang: this.props.lang,
					},
				},
				{ version: 2 },
			);

			if (resp.data.status == 0) {
				this.resolve(resp.data);
			} else if (resp.data.status == 1) {
				this.props.resetDialogInfo({
					visible: true,
					title: '该账号已被关联__mark__',
					content:
						'该账号已经关联了腾讯云账号' +
						resp.data.account +
						'，继续执行将解绑__mark__已有的关联关系，是否解绑__mark__已有关联？',
					buttons: [
						{
							text: '解绑__mark__已有关联',
							onClick: async () => {
								try {
									await this.bindAccountByTicket({ ticket: resp.data.ticket });
									this.props.resetDialogInfo({
										visible: false,
									});
									this.resolve();
								} catch (e) {
									this.reject();
								}
							},
						},
					],
				});
			} else if (resp.data.status == 3) {
				this.props.resetDialogInfo({
					visible: true,
					title: '绑定__mark__失败',
					content:
						'该微信已经关联到另一__mark__个腾讯云账号' +
						resp.data.account +
						'（账号ID__mark__：' +
						resp.data.uin +
						'）且开启了微信扫码校验，请您在另一__mark__个账号上完成微信解绑__mark__后，重试此操作',
					buttons: [
						{
							text: t('确定__mark__'),
							onClick: () => {
								this.props.resetDialogInfo({ visible: false });
							},
						},
					],
					cancelBtn: false,
				});
			}
		} catch (error) {
			error = error || {};
			let tips = '';
			switch (error.code) {
				case 10001:
				case 10002:
				case 10011:
					let config = this.errorConfig[error.code];

					if (error.code == 10001 && error.data && error.data.message) {
						var uin = error.data.message.match(/\d+$/);
						if (uin && /^[0-9]+$/.test(uin[0])) {
							config.content =
								'该微信账号已经注册为腾讯云账号（昵称：' + uin[0] + '），不能完成绑定__mark__。';
						}
					}
					this.props.resetDialogInfo({
						visible: true,
						title: config.title,
						content: config.content,
						buttons: [
							{
								text: config.btnText,
								onClick: () => {
									this.openDialog();
								},
							},
						],
					});
					return;
				case 10003:
					tips = t(
						'当前账号是使用微信注册或已关联了微信账号，无法继续关联其他微信账号，请更换关联方式__mark__',
					);
					break;
				case 20001:
					tips = '当前微信可绑定__mark__的腾讯云账号已达上限';
					break;
				case 10009:
					tips = t(
						'该微信已经关联到另一个腾讯云账号且开启了微信扫码校验，请您在另一个账号上完成微信解绑后，重试此操作__mark__',
					);
					break;
				default:
					if (error.code == 'PERMISSION_FORBID') {
						tips = t('您暂无API权限' + '(cam:BindWechatAccount)，' + '请联系开发商授权');
					} else {
						tips = '绑定__mark__失败，请重试';
					}
			}

			this.props.resetDialogInfo({
				visible: true,
				title: '绑定__mark__失败',
				content: tips,
				buttons: [
					{
						text: t('确定__mark__'),
						onClick: () => {
							this.props.resetDialogInfo({ visible: false });
						},
					},
				],
				cancelBtn: false,
			});
		}
	}

	async beforeUnBind() {
		return new Promise(async (resolve, reject) => {
			try {
				const safeAuthFlag = await developerService.getSafeAuthFlag();

				if (
					objectPath.get(safeAuthFlag, 'actionFlag.wechat') == 1 ||
					objectPath.get(safeAuthFlag, 'loginFlag.wechat') == 1
				) {
					this.props.resetDialogInfo({
						title: t('温馨提示__mark__'),
						visible: true,
						content: t(
							'您已经在登录或操作保护__mark__中开启微信扫码校验，不能解绑__mark__微信登录方式__mark__，如需解绑__mark__，请在安全设置__mark__-敏感操作中关闭微信扫码校验后操作',
						),
						buttons: [
							{
								text: '前往关闭微信扫码校验',
								onClick: () => {
									this.props.resetDialogInfo({ visible: false });
									this.props.router.push('/developer/security');
								},
							},
						],
					});
					reject();
				} else {
					resolve();
				}
			} catch (err) {
				resolve();
			}
		});
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { Input } from '@tencent/tea-component';
import { Layout, Form, Tab } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import * as classnames from 'classnames';
import { developerService } from '@src/services';
import cookie from 'js-cookie';
import * as utils from '@src/utils';
import CopyToClipboard from 'react-copy-to-clipboard';

const mapStateToProps = state => {
	return { ...state.userInfo };
};

// 用户基本信息__mark__基类
class Base extends React.Component {
	getTpl() {
		const { uin, appId } = this.props;

		return [
			<Form.Pure label={t('账号ID__mark__')} className={'pure-text-row'}>
				<div className="form-unit">
					<div className="form-text">
						{uin}
						{/* <CopyToClipboard text={uin} onCopy={() => {
													utils.showSuccessTips(t('复制成功__mark__'));
											}}>
												<i className="copy-icon"></i>
											</CopyToClipboard> */}
					</div>
				</div>
			</Form.Pure>,
			<Form.Pure label={t('APPID__mark__')} className={'pure-text-row'}>
				<div className="form-unit">
					<div className="form-text">
						{appId}
						{/* <CopyToClipboard text={appId} onCopy={() => {
													utils.showSuccessTips(t('复制成功__mark__'));
											}}>
												<i className="copy-icon"></i>
											</CopyToClipboard> */}
					</div>
				</div>
			</Form.Pure>,
		];
	}
	render() {
		return <Tab>{this.getTpl()}</Tab>;
	}
}

// 协作者__mark__
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class Cooperator extends Base {
	render() {
		return <Tab title={t('基本信息__mark__')}>{this.getTpl()}</Tab>;
	}
}

// 子账号
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class SubAccount extends Base {
	render() {
		return <Tab title={t('基本信息__mark__')}>{this.getTpl()}</Tab>;
	}
}

class BaseOwner extends Base {
	constructor(props) {
		super(props);
		this.state = {
			mode: 'read',
			errorTips: '',
			nick: props.nickname,
		};
	}

	componentWillReceiveProps(nextProps) {
		if (this.state.mode == 'read') {
			this.setState({ nick: nextProps.nickname });
		}
	}

	async updateNickname() {
		const nick = this.state.nick;

		if (/^[\u4E00-\u9FA5\w@&\.\[\]\-:、,]{1,25}$/.test(nick)) {
			this.setState({ errorTips: '' });

			try {
				await developerService.updateNickname({ nickname: nick });
			} catch (e) {
				utils.showErrorTips(t('修改昵称失败__mark__'));
				return;
			}
			const nickDom = document.querySelector('#pageWrapper .qc-user-name');
			// 修改__mark__顶部导航昵称
			if (nickDom) {
				nickDom.innerHTML = utils.replaceXss(nick);
				nickDom.title = utils.replaceXss(nick);
			}
			// 清除控制台session key, 防止redis缓存
			cookie.remove('nodesess');
			// 更新cookie的nick, 防止刷新跳动
			cookie.set('nick', nick);
			this.setState({ mode: 'read' });
			this.props.updateUserInfo({ nickname: nick });
		} else {
			this.setState({ errorTips: t('请输入1-25个英文字母、数字或汉字，支持@、&._[]-:') });
		}
	}

	getTpl() {
		const { nick, mode, errorTips } = this.state;

		let tpl = (
			<Form.Pure
				label={t('账号昵称__mark__')}
				className={classnames('pure-text-row', { 'is-error': mode == 'write' && errorTips })}
			>
				<div className={classnames('form-unit', { 'is-error': errorTips })}>
					<div className="form-text" style={{ display: mode == 'read' ? '' : 'none' }}>
						{nick}
						<a
							href="javascript:;"
							className="ml-5"
							onClick={() => {
								this.setState({ mode: 'write', nick: this.props.nickname });
							}}
						>
							<i className="pencil-icon"></i>
						</a>
					</div>

					<Input
						style={{ display: mode == 'write' ? '' : 'none', width: '128px' }}
						value={nick}
						onChange={val => {
							this.setState({ nick: val });
						}}
					></Input>

					<a
						style={{ display: mode == 'write' ? '' : 'none' }}
						href="javascript:;"
						className="tc-link-btn"
						onClick={() => {
							this.updateNickname();
						}}
					>
						<Trans>保存__mark__</Trans>
					</a>

					<a
						style={{ display: mode == 'write' ? '' : 'none' }}
						href="javascript:;"
						className="tc-link-btn"
						onClick={() => {
							this.setState({ mode: 'read', nick: this.props.nickname });
						}}
					>
						<Trans>取消__mark__</Trans>
					</a>
					<p
						className="form-input-help"
						style={{ display: mode == 'write' && errorTips ? '' : 'none' }}
					>
						{errorTips}
					</p>
				</div>
			</Form.Pure>
		);
		let tpls = super.getTpl();
		tpls.unshift(tpl);

		return tpls;
	}

	async componentDidMount() {
		try {
			let { displayName, nickname } = await developerService.getNickname();
			nickname = displayName || nickname;
			//不更新state，因为如果在write模式会覆盖用户填写的值 this.setState({nick: nickname});
			this.props.updateUserInfo({ nickname });
		} catch (e) {}
	}
}

// 主账号__mark__国内站基本信息__mark__
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class OwnerZH extends BaseOwner {}

const intlMapStateToProps = state => {
	return { ...state.userInfo, bindInfo: state.bindInfo };
};
// 主账号__mark__国际站基本信息__mark__
@connect(
	intlMapStateToProps,
	mapDisppatchToProps,
)
class OwnerIntl extends BaseOwner {
	getTpl() {
		const { bindInfo = {} } = this.props;

		let tpl = (
			<Form.Pure label={t('账号邮箱__mark__')} className={'pure-text-row'}>
				<div className="form-unit">
					<div className="form-text">{bindInfo.mail || '-'}</div>
				</div>
			</Form.Pure>
		);
		let tpls = super.getTpl();
		tpls.unshift(tpl);
		return tpls;
	}
}

// 用户基本信息__mark__，uin、appid、昵称
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class BaseInfo extends React.Component {
	render() {
		// 区分站点
		const { role, isIntl } = this.props;

		if (isIntl) {
			return role == 'owner' ? (
				<OwnerIntl></OwnerIntl>
			) : role == 'cooperator' ? (
				<Cooperator></Cooperator>
			) : (
				<SubAccount></SubAccount>
			);
		} else {
			return role == 'owner' ? (
				<OwnerZH></OwnerZH>
			) : role == 'cooperator' ? (
				<Cooperator></Cooperator>
			) : (
				<SubAccount></SubAccount>
			);
		}
	}
}

import React from 'react';
import { Tab, TabWrapper, Row, Col, BeforeRenderHOC } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { developerService, commonService } from '@src/services';
import * as utils from '@src/utils';
import _ from 'underscore';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { connect } from 'react-redux';
import { ContactInfoViewFields, ModifyContactInfo } from './components';

const mapStateToProps = state => {
	return state;
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
@BeforeRenderHOC
export default class ContactInfo extends React.Component {
	formRef = null;

	onModifyContactInfo() {
		this.props.resetDialogInfo({
			title: t('更新信息__mark__'),
			visible: true,
			size: 480,
			content: (
				<ModifyContactInfo
					ref={node => {
						this.formRef = node;
					}}
					data={this.props.contactInfo__mark__}
				></ModifyContactInfo>
			),
			buttons: [
				{
					text: t('确定__mark__'),
					onClick: async () => {
						this.formRef.validateFields(async (err, data) => {
							if (err) {
								return;
							}

							const { countryCode, phoneNumber } = data.phoneInfo;
							let params = { ...data, countryCode, phoneNumber };
							delete params.phoneInfo;
							this.props.updateDialogInfo({
								disabledBtns: [0],
							});
							try {
								await developerService.updateIntlInfo(params);
								this.props.resetDialogInfo({
									visible: false,
								});
								utils.showSuccessTips(t('更新信息成功__mark__'));
								this.getIntlInfo();
							} catch (e) {
								utils.showErrorTips(t('更新信息失败__mark__'));
								this.props.updateDialogInfo({
									disabledBtns: [],
								});
							}
						});
					},
				},
			],
		});
	}

	// render() {
	//    return (
	//     <Row>
	//         <Col col="1/3" >
	//         <TabWrapper
	//             title = {[
	//                 '联系信息__mark__',
	//                 <a href="javascript:;" onClick={() => {
	//                     this.onModifyContactInfo();
	//                 }}>修改__mark__</a>
	//             ]}
	//             description = {t('contactInfo__mark__')}
	//             items = {[
	//                 { components: ContactInfoView }
	//             ]}
	//             >
	//         </TabWrapper>
	//     </Col>
	//     </Row>
	//    )
	// }

	render() {
		// if (this.props.loading) {
		// 		return null;
		// }
		return (
			<Row>
				<Col col="1/1">
					<TabWrapper
						title={[
							t('联系信息__mark__'),
							<a
								onClick={() => {
									this.onModifyContactInfo();
								}}
								href="javascript:;"
								style={{ marginLeft: '5px' }}
							>
								<Trans>修改__mark__</Trans>
							</a>,
						]}
						items={[
							{
								components: () => {
									if (this.props.contactInfo__mark__.userType == 1) {
										return (
											<Tab>
												<ContactInfoViewFields.FullName></ContactInfoViewFields.FullName>
												<ContactInfoViewFields.Phonenumber></ContactInfoViewFields.Phonenumber>
												<ContactInfoViewFields.CountryName></ContactInfoViewFields.CountryName>
												<ContactInfoViewFields.State></ContactInfoViewFields.State>
											</Tab>
										);
									} else {
										return (
											<Tab>
												<ContactInfoViewFields.FullName></ContactInfoViewFields.FullName>
												<ContactInfoViewFields.CompanyName></ContactInfoViewFields.CompanyName>
												<ContactInfoViewFields.Phonenumber></ContactInfoViewFields.Phonenumber>
												<ContactInfoViewFields.CountryName></ContactInfoViewFields.CountryName>
											</Tab>
										);
									}
								},
								col: '1/3',
							},
							{
								components: () => {
									if (this.props.contactInfo__mark__.userType == 1) {
										return (
											<Tab>
												<ContactInfoViewFields.City></ContactInfoViewFields.City>
												<ContactInfoViewFields.Address></ContactInfoViewFields.Address>
												<ContactInfoViewFields.PostalCode></ContactInfoViewFields.PostalCode>
											</Tab>
										);
									} else {
										return (
											<Tab>
												<ContactInfoViewFields.State></ContactInfoViewFields.State>
												<ContactInfoViewFields.City></ContactInfoViewFields.City>
												<ContactInfoViewFields.Address></ContactInfoViewFields.Address>
												<ContactInfoViewFields.PostalCode></ContactInfoViewFields.PostalCode>
											</Tab>
										);
									}
								},
								col: '1/2',
							},
						]}
						divider={true}
					></TabWrapper>
				</Col>
			</Row>
		);
	}

	async getIntlInfo() {
		try {
			const intlInfo = await developerService.getIntlInfo();
			this.props.updateContactInfo(intlInfo);
		} catch (e) {}
		this.props.done();
	}

	componentDidMount() {
		this.getIntlInfo();
	}
}

import React from 'react';
import { TabWrapper, Row, Col } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { BaseInfo } from '../BaseInfo';
import { ExtraInfo } from '../ExtraInfo';
import { RoleAndPermission } from '../RoleAndPermission';
import { CooperatorRegister } from '../CooperatorRegister';

const mapStateToProps = state => {
	return { isIntl: state.userInfo.isIntl, showGuide: state.showGuide, lang: state.lang };
};

// 协作者__mark__，中英文显示的内容一__mark__样
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Cooperator extends React.Component {
	render() {
		return (
			<>
				<Row>
					<Col col="2/3">
						<TabWrapper
							items={[
								{ components: BaseInfo, col: '1/3' },
								{ components: RoleAndPermission, col: '2/3' },
							]}
							divider={true}
							// title={t('基本信息__mark__')}
							// link={
							//     this.props.lang == 'zh' ? {
							//         text: t('帮助指引__mark__'),
							//         url: 'javascript:;',
							//         onClick: () => {
							//             this.props.updateGlobalInfo({showGuide: true});
							//         }
							//     }
							//     :
							//     null
							// }
						></TabWrapper>
					</Col>
					<Col col="1/3">
						<TabWrapper
							title={t('主账号身份信息__mark__')}
							items={[{ components: ExtraInfo }]}
						></TabWrapper>
					</Col>
				</Row>
				<CooperatorRegister />
			</>
		);
	}
}

import React, { Fragment } from 'react';
import { Layout, Form, List, PageTitle, Phone, CountDown } from '@src/components';
import { Button } from '@tea/component/Button';
import { developerService, commonService } from '@src/services';
import * as utils from '@src/utils';
import _ from 'underscore';
import { app } from '@tea/app';
import cookie from 'js-cookie';
import { Input } from '@tea/component/input';
import classnames from 'classnames';
import tcaptcha from '@src/libs/tcaptcha';
import pify from 'pify';
import login from '@src/libs/login';
import { TimerButton } from '@src/components/TimerButton';
const FormItem = Form.Item;
/**
 * 修改__mark__主账号__mark__手机组件
 */
@Form.create()
export class CompletePhone extends React.Component {
	render() {
		const { getFieldDecorator } = this.props.form;
		return (
			/* eslint-disable @tencent/tea-i18n/no-bare-zh-in-js */
			<List>
				<FormItem label={'新绑定手机__mark__'} className="list-3" required>
					{getFieldDecorator('phoneInfo', {
						initialValue: { countryCode: 86, phoneNumber: '' },
						rules: [
							{
								validator: (rule, value, callback) => {
									const { countryCode, phoneNumber } = value;

									if (!countryCode) {
										return callback('请选择区号__mark__');
									}

									if (!phoneNumber) {
										return callback('请输入手机号码__mark__');
									}

									if (+countryCode === 86 && !/^1[0-9]{10}$/.test(phoneNumber)) {
										return callback('请填写有效的手机号码__mark__');
									} else if (+countryCode !== 86 && !/^\d{8,12}/.test(phoneNumber)) {
										return callback('请填写有效的手机号码__mark__');
									} else {
										callback();
									}
								},
							},
						],
						clearErrorTrigger: 'onChange',
					})(<Phone placeholder={'请输入手机号码__mark__'} lang={this.props.lang} />)}
				</FormItem>
				<FormItem label={'手机验证码__mark__'} className="list-3" required>
					{getFieldDecorator('code', {
						initialValue: '',
						rules: [
							{ required: true, message: '验证码不能为空__mark__' },
							{
								message: '请输入6位有效验证码__mark__',
								pattern: /^\d{6}$/,
							},
						],
						clearErrorTrigger: 'onChange',
					})(<Input placeholder={'请填写6位数字验证码__mark__'} />)}

					<TimerButton
						beforeSend={() => {
							return pify(this.props.form.validateFields)(['phoneInfo']);
						}}
						sendCode={async ticket => {
							const { countryCode, phoneNumber } = this.props.form.getFieldValue('phoneInfo');

							try {
								await commonService.sendVerifyCode({
									lang: this.props.lang,
									action: 'modifyPhone',
									countryCode,
									phoneNum: phoneNumber,
									type: 1, // 验证码__mark__类型
									...ticket,
								});
								return Promise.resolve();
							} catch (e) {
								const code = this.props.form.getFieldValue('code');
								this.props.form.setFields({
									code: { value: code, errors: [new Error('发送验证码失败__mark__')] },
								});
								return Promise.reject();
							}
						}}
					>
						>
					</TimerButton>
				</FormItem>
			</List>
			/* eslint-enable @tencent/tea-i18n/no-bare-zh-in-js */
		);
	}
}

import React from 'react';
import { TabWrapper, Row, Col } from '@src/components';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { Layout, Form, List } from '@src/components';
import * as utils from '@src/utils';
import { app } from '@tea/app';
import { CompletePhone } from './CompletePhone';
import * as pify from 'pify';
import { developerService } from '@src/services';
import login from '@src/libs/login';
import { Alert } from '@tencent/tea-component/lib/alert';
import { Modal, Button } from '@tencent/tea-component';

const mapStateToProps = state => {
	return {
		...state.roleAndPermissionInfo,
		bindInfo: state.bindInfo,
		userInfo: state.userInfo,
		isIntl: state.userInfo.isIntl,
	};
};

/* eslint-disable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class Content extends React.Component {
	// 补充手机
	async completePhone() {
		let form = null;

		this.props.resetDialogInfo({
			title: '完善信息',
			visible: true,
			size: 500,
			content: (
				<>
					<Alert>注册账号需完善信息，请补充您的手机</Alert>
					<CompletePhone
						ref={node => {
							form = node;
						}}
						lang="zh"
					/>
				</>
			),
			buttons: [
				{
					text: '确定__mark__',
					onClick: async () => {
						let data;
						try {
							data = await pify(form.validateFields)();
						} catch (e) {
							return;
						}

						const { code } = data;
						const { countryCode, phoneNumber: phoneNum } = data.phoneInfo;

						const loadingTip = app.tips.loading();

						try {
							await developerService.cooperatorRegister({
								CountryCode: countryCode,
								PhoneNumber: phoneNum,
								Code: code,
							});

							loadingTip.stop();

							this.props.resetDialogInfo({
								visible: false,
							});

							this.registerSuccess();
						} catch (error) {
							loadingTip.stop();

							error = error || {};
							if (error.code === 'InvalidParameter.CodeError') {
								form.setFields({ code: { value: code, errors: [new Error('验证码错误__mark__')] } });
								return;
							}
							if (error.code === 'InvalidParameter.CodeExpired') {
								form.setFields({ code: { value: code, errors: [new Error('验证码已过期__mark__')] } });
								return;
							}

							if (error.code === 'LimitExceeded.BindExceedUpperLimit') {
								utils.showErrorTips('当前手机可绑定__mark__的腾讯云账号已达上限，请更换手机重试');
								return;
							}

							if (error.code == 99981 || error.code == 12) {
								utils.showErrorTips('当前QQ已退出账号协作，无法注册新账号，请您刷新页面');
								return;
							}

							utils.showErrorTips('注册新账号遇到点问题，请重新提交__mark__');
						}
					},
				},
			],
		});
	}

	registerSuccess() {
		Modal.success({
			size: 's',
			message: '账号注册成功',
			description: '已成功注册账号，您可立即登录该账号并为账号关联微信，后续即可通过微信管理账号',
			buttons: [
				<Button
					type="primary"
					onClick={() => {
						this.switchToOwner();
					}}
				>
					切换登录主账号__mark__
				</Button>,
				<Button>取消__mark__</Button>,
			],
		});
	}

	async switchToOwner() {
		const { uin } = this.props.userInfo;

		try {
			await developerService.setDefaultOwner({
				OwnerUin: uin,
			});
		} catch (err) {}

		location.href =
			'https://cloud.tencent.com/login/verify?s_url=https%3A%2F%2Fconsole.cloud.tencent.com%2Fdeveloper';
	}

	render() {
		return (
			<List>
				<Form.Pure label={'注册账号'} className={'pure-text-row'}>
					<div className="form-unit">
						<div className="form-text">
							<a
								href="javascript:;"
								className={'tc-link-btn'}
								onClick={() => {
									this.completePhone();
								}}
							>
								立即注册
							</a>
						</div>
					</div>
				</Form.Pure>
			</List>
		);
	}
}

// 协作者__mark__注册引导
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class CooperatorRegister extends React.Component {
	render() {
		const { hasOwnerAccount, isIntl } = this.props;

		if (isIntl || hasOwnerAccount == null || hasOwnerAccount == true) {
			return null;
		}

		return (
			<Row>
				<Col col="1/3">
					<TabWrapper
						description={'当前QQ尚未注册腾讯云账号，注册后可通过该QQ管理主账号__mark__并协作其他账号'}
						items={[{ components: Content, col: '1/1' }]}
						title={'注册腾讯云账号'}
					></TabWrapper>
				</Col>
			</Row>
		);
	}
}

/* eslint-enable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/

import React, { Fragment } from 'react';
import { Tab, TabWrapper, Row, Col, Form } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { developerService } from '@src/services';
import * as utils from '@src/utils';
import _ from 'underscore';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { connect } from 'react-redux';
import { ModifyDataProtect, DataProtectFields } from './components';

const mapStateToProps = state => {
	return state;
};

/**
 * 国际版 主账号__mark__ GDPR
 */
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export default class DataProtect extends React.Component {
	formRef = null;
	onModifyDataProtect() {
		this.props.resetDialogInfo({
			title: t('更新信息__mark__'),
			visible: true,
			size: 525,
			content: (
				<ModifyDataProtect
					ref={node => {
						this.formRef = node;
					}}
					data={this.props.dataProtect}
				></ModifyDataProtect>
			),
			buttons: [
				{
					text: t('确定__mark__'),
					onClick: async () => {
						this.formRef.validateFields(async (err, data) => {
							if (err) {
								return;
							}
							this.props.updateDialogInfo({
								disabledBtns: [0],
							});
							try {
								await developerService.updateIntlInfo(data);
								utils.showSuccessTips(t('更新信息成功__mark__'));
								this.props.resetDialogInfo({
									visible: false,
								});
								this.getGDPRInfo();
							} catch (e) {
								this.props.updateDialogInfo({
									disabledBtns: [],
								});
								utils.showErrorTips(t('更新信息失败__mark__'));
							}
						});
					},
				},
			],
		});
	}

	render() {
		return (
			<Col col="1/2">
				<TabWrapper
					title={[
						t('数据信息__mark__'),
						<a
							style={{ marginLeft: '5px' }}
							href="javascript:;"
							onClick={() => {
								this.onModifyDataProtect();
							}}
						>
							<Trans>修改__mark__</Trans>
						</a>,
					]}
					description={
						<span>
							<Trans>
								可选: 用于
								<a href="https://intl.cloud.tencent.com/document/product/301/17347" target="_blank">
									数据处理和安全
								</a>
							</Trans>
						</span>
					}
					items={[
						{
							components: () => {
								return (
									<Tab className="office-box">
										<DataProtectFields.OfficerName></DataProtectFields.OfficerName>
										<DataProtectFields.OfficerEmail></DataProtectFields.OfficerEmail>
									</Tab>
								);
							},
							col: '1/2',
						},
						{
							components: () => {
								return (
									<Tab className="data-box">
										<DataProtectFields.DataCategory></DataProtectFields.DataCategory>
										<DataProtectFields.SpecialDataCategory></DataProtectFields.SpecialDataCategory>
									</Tab>
								);
							},
							col: '1/2',
						},
					]}
				></TabWrapper>
			</Col>
		);
	}

	async getGDPRInfo() {
		try {
			let data = await developerService.getIntlInfo();
			this.props.updateDataProtect(data);
		} catch (e) {}
	}

	componentDidMount() {
		this.getGDPRInfo();
	}
}

// 实名认证__mark__模块
import React from 'react';
import { Form } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { authService } from '@src/services';
import { Bubble } from '@tea/component/bubble';
import { Button } from '@tea/component/Button';

const mapStateToProps = state => {
	return { ...state.extraInfo, role: state.userInfo.role, router: state.router };
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class AuthInfo extends React.Component {
	render() {
		const { authState, role } = this.props;
		let authStatusNameMap = {
			'0': t('未认证__mark__'),
			'1': t('认证中__mark__'),
			'2': t('未通过__mark__'),
			'3': t('已认证__mark__'),
			'33': t('待确认__mark__'),
		};

		let authStatusActionMap = {
			'0': t('提交认证__mark__'),
			'1': t('查看认证__mark__'),
			'2': t('查看认证__mark__'),
			'3': t('查看或修改认证__mark__'),
			'33': t('查看认证__mark__'),
		};

		let authStatusClassMap = {
			'0': '',
			'33': '', // '原待确认__mark__改为未通过__mark__'
			'1': 'text-warning',
			'2': 'text-danger',
			'3': 'text-success',
		};

		return (
			<Form.Pure label={t('认证状态__mark__')} className={'pure-text-row'}>
				<div className="form-unit">
					<div className="form-text">
						<span className={authStatusClassMap[authState] || ''}>
							{authStatusNameMap[authState] || t('未知__mark__')}
						</span>
						{role == 'owner' ? (
							<a
								href="javascript:;"
								className={'tc-link-btn'}
								onClick={() => {
									this.props.router.push('/developer/auth');
								}}
							>
								{authStatusActionMap[authState]}
							</a>
						) : (
							<Bubble
								content={
									role == 'cooperator'
										? t('协作者不能实名认证，请联系主账号进行认证__mark__')
										: t('子用户不能实名认证，请联系主账号进行认证__mark__')
								}
							>
								<span style={{ marginLeft: '10px', color: '#000', cursor: 'default' }}>
									<Trans>实名认证__mark__</Trans>
								</span>
							</Bubble>
						)}
					</div>
				</div>
			</Form.Pure>
		);
	}

	async componentDidMount() {
		try {
			const authInfo = await authService.getAuthInfo();
			this.props.updateExtraInfo({ authState: authInfo.authState, authInfo });
		} catch (e) {
			return;
		}
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { Layout, Form, Tab, TradeSelector } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import * as classnames from 'classnames';
import { developerService, commonService } from '@src/services';
import { ExternalLink } from '@tencent/tea-component/lib/link';
import { Icon, Text } from '@tencent/tea-component';

const mapStateToProps = state => {
	return state;
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class ContactInfo extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			phone: '',
			mail: '',
			countryCode: '',
			phoneEqual: true,
			mailEqual: true,
		};
	}

	render() {
		const { userInfo = {} } = this.props;
		const { role, uin } = userInfo;
		if (role !== 'owner') {
			return null;
		}
		return (
			<>
				<Form.Pure label={t('联系手机__mark__')} className={'pure-text-row'}>
					{this.state.countryCode ? `+${this.state.countryCode} ` : ''}
					{this.state.phone || '-'}
					<i
						className="pencil-icon"
						onClick={() => {
							this.props.router.push(`/cam/user/${uin}?type=uin`);
						}}
					></i>
					{!this.state.phoneEqual && (
						<Text theme="warning" style={{ marginLeft: '5px' }}>
							{t('请注意，当前联系手机和安全手机不一致__mark__')}
						</Text>
					)}
				</Form.Pure>
				<Form.Pure label={t('联系邮箱__mark__')} className={'pure-text-row'}>
					{this.state.mail || '-'}
					<i
						className="pencil-icon"
						onClick={() => {
							this.props.router.push(`/cam/user/${uin}?type=uin`);
						}}
					></i>
					{!this.state.mailEqual && (
						<Text theme="warning" style={{ marginLeft: '5px' }}>
							{t('请注意，当前联系邮箱和安全邮箱不一致__mark__')}
						</Text>
					)}
				</Form.Pure>
			</>
		);
	}

	async componentDidMount() {
		if (this.props.userInfo.role === 'owner') {
			try {
				const [userInfo, checkInfo] = await Promise.all([
					developerService.getReceiverInfo(),
					developerService.checkReceiverInfo().catch(() => {
						return {};
					}),
				]);
				const { PhoneNum, Email, CountryCode } = userInfo;
				const { PhoneEqual, MailEqual } = checkInfo;
				this.setState({
					phone: PhoneNum,
					mail: Email,
					countryCode: CountryCode,
					phoneEqual: PhoneEqual,
					mailEqual: MailEqual,
				});
			} catch (e) {}
		}
	}
}

import React from 'react';
import { Tab } from '@src/components';
import { AuthInfo } from './AuthInfo';
import { TradeInfo } from './TradeInfo';
import { ContactInfo } from './ContactInfo';

// 拓展信息，目前是实名认证__mark__状态、行业
export class ExtraInfo extends React.Component {
	render() {
		return (
			<Tab title={this.props.title}>
				<AuthInfo></AuthInfo>
				<TradeInfo></TradeInfo>
				<ContactInfo></ContactInfo>
			</Tab>
		);
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { Layout, Form, Tab, TradeSelector } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import * as classnames from 'classnames';
import { developerService, commonService } from '@src/services';
import cookie from 'js-cookie';

const mapStateToProps = state => {
	return { ...state.extraInfo, role: state.userInfo.role };
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class TradeInfo extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			tradeMode: 'read',
			errorTips: '',
			tradeOne: null,
			tradeTwo: null,
			tradeList: [],
		};
	}

	componentWillReceiveProps(nextProps) {
		if (this.state.tradeMode == 'read') {
			this.setState({ tradeOne: nextProps.tradeOne, tradeTwo: nextProps.tradeTwo });
		}
	}

	async updateTrade() {
		const { tradeOne, tradeTwo } = this.state;
		if (!tradeOne || !tradeTwo) {
			this.setState({ errorTips: t('请选择行业__mark__') });
			return;
		}
		this.setState({ errorTips: '' });
		try {
			await developerService.completeTradeInfo({ tradeOne, tradeTwo });
			this.props.updateExtraInfo({ tradeOne: tradeOne, tradeTwo: tradeTwo });
			this.setState({ tradeMode: 'read' });
		} catch (e) {}
	}

	getTradeText(tradeOne, tradeTwo) {
		if (tradeOne && tradeTwo) {
			let tradeOneText = null;
			let tradeTwoText = null;
			const { tradeList } = this.state;
			for (let i = 0; i < tradeList.length; i++) {
				let tradeOneItem = tradeList[i];
				let childs = tradeOneItem.children || [];
				for (let j = 0; j < childs.length; j++) {
					let tradeTwoItem = childs[j];
					if (tradeOneItem.value == tradeOne && tradeTwoItem.value == tradeTwo) {
						tradeOneText = tradeOneItem.text;
						tradeTwoText = tradeTwoItem.text;
						return `${tradeOneText} - ${tradeTwoText}`;
					}
				}
			}
		}

		return t('未填写__mark__');
	}

	render() {
		const { role } = this.props;
		const { tradeMode, errorTips, tradeOne, tradeTwo } = this.state;
		const tradeText = this.getTradeText(tradeOne, tradeTwo);

		return (
			<Form.Pure label={t('所属行业__mark__')} className={'pure-text-row'}>
				<div className={classnames('form-unit', { 'is-error': errorTips })}>
					<div className="form-text">
						{tradeMode == 'read'
							? [
									<span>{tradeText}</span>,
									<a
										style={{ display: role == 'owner' ? '' : 'none' }}
										href="javascript:;"
										className="ml-5"
										onClick={() => {
											this.setState({
												tradeMode: 'write',
												tradeOne: this.props.tradeOne,
												tradeTwo: this.props.tradeTwo,
											});
										}}
									>
										<i className="pencil-icon"></i>
									</a>,
							  ]
							: null}

						{tradeMode == 'write'
							? [
									<TradeSelector
										width={'150px'}
										value={{ tradeOne, tradeTwo }}
										onChange={value => {
											this.setState({ errorTips: '' });
											this.setState(value);
										}}
										placeholder={t('请选择__mark__')}
									></TradeSelector>,
									<a
										href="javascript:;"
										className="tc-link-btn"
										onClick={() => {
											this.updateTrade();
										}}
									>
										<Trans>保存__mark__</Trans>
									</a>,
									<a
										href="javascript:;"
										className="tc-link-btn"
										onClick={() => {
											this.setState({
												tradeMode: 'read',
												tradeOne: this.props.tradeOne,
												tradeTwo: this.props.tradeTwo,
											});
										}}
									>
										<Trans>取消__mark__</Trans>
									</a>,
							  ]
							: null}
						<p className="form-input-help" style={{ display: errorTips ? '' : 'none' }}>
							{errorTips}
						</p>
					</div>
				</div>
			</Form.Pure>
		);
	}

	async componentDidMount() {
		try {
			const [tradeInfo, tradeList] = await Promise.all([
				developerService.getUserTradeInfo(),
				commonService.getTradeData(),
			]);
			this.setState({ tradeList: this.filter(tradeList) });
			this.props.updateExtraInfo({ tradeOne: tradeInfo.tradeOne, tradeTwo: tradeInfo.tradeTwo });
		} catch (e) {}
	}

	filter(tradeList) {
		return tradeList
			.map(({ ID, Name, Display, Children }) => {
				if (Display !== 'show') {
					return null;
				}

				const children = Children.map(({ ID, Name, Display }) => {
					if (Display !== 'show') {
						return null;
					} else {
						return { value: ID, text: Name };
					}
				}).filter(Boolean);

				if (!children.length) {
					return null;
				}

				return { value: ID, text: Name, children };
			})
			.filter(Boolean);
	}
}

// @i18n-noscan

import React from 'react';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { t, Trans } from '@tea/app/i18n';

const mapStateToProps = state => {
	return state;
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export default class Guide extends React.Component {
	render() {
		const { position } = this.props;
		if (!this.props.showGuide) {
			return null;
		}
		return (
			<div className="sidebar-panel help-sidebar-panel">
				<a
					href="javascript:;"
					className="btn-close"
					onClick={() => {
						this.props.updateGlobalInfo({ showGuide: false });
					}}
				>
					关闭
				</a>
				<div className="sidebar-panel-container">
					<div className="sidebar-panel-hd">
						<h3
							style={{ width: '200px' }}
							title={position == 1 ? '账号基本信息__mark__说明' : '账号登录方式__mark__说明'}
						>
							{position == 1 ? '账号基本信息__mark__说明' : '账号登录方式__mark__说明'}
						</h3>
					</div>
					<div className="sidebar-panel-bd">
						<div className="help-docs">
							{position == 1 ? (
								<div className="help-docs-section">
									{/* <h4 className="help-docs-section-tit">账号基本信息__mark__说明</h4> */}
									<div className="help-docs-section-con">
										<h4>相关解释</h4>
										<ul>
											<li>
												<p>
													<h6>账号ID__mark__</h6>
												</p>
												<p>账号ID__mark__是您在腾讯云的唯一__mark__账号标识。</p>
											</li>
											<li>
												<p>
													<h6>APPID__mark__</h6>
												</p>
												<p>
													APPID__mark__是与账号ID__mark__有唯一__mark__对应关系的应用 ID，部分腾讯云产品会使用此 APPID__mark__。
												</p>
											</li>
										</ul>

										<h4>热点问题</h4>
										<ul>
											<li>
												<p>
													<h6>账号不再使用，该怎么处理？</h6>
												</p>
												<p>
													1
													如果您的账号名下仍有资源，希望移交账号给他人管理，您可以为账号绑定__mark__新的登录方式__mark__；
												</p>
												<p>
													2. 如果您的账号名下没有资源，不希望再使用该账号，您可以前往{' '}
													<a
														target="_blank"
														href="https://console.cloud.tencent.com/developer/security"
													>
														安全设置__mark__
													</a>{' '}
													申请注销账号__mark__。
												</p>
											</li>
											<li>
												<p>
													<h6>账号名下的资源可以转移给其他账号吗？</h6>
												</p>
												<p>
													1. 域名支持转移给其他账号，您可以根据{' '}
													<a
														target="_blank"
														href="https://cloud.tencent.com/document/product/242/9692"
													>
														域名账号间过户
													</a>{' '}
													文档指引进行操作；
												</p>
												<p>2. 备案信息转移问题请联系 95716，进行相关咨询和申请办理；</p>
												<p>3. 腾讯云其他产品例如云主机等资源不支持转移给其他账号。</p>
											</li>
										</ul>
									</div>
								</div>
							) : null}
							{position == 2 ? (
								<div className="help-docs-section">
									{/* <h4 className="help-docs-section-tit">账号登录方式__mark__说明</h4> */}
									<div className="help-docs-section-con">
										<h4>相关解释</h4>
										<ul>
											<li>
												<p>
													<h6>账号登录方式__mark__</h6>
												</p>
												<p>
													腾讯云账号支持微信、邮箱、QQ和微信公众号四种登录方式__mark__，您可以将已注册的腾讯云账号关联多种登录方式__mark__，方便您管理账号。
												</p>
											</li>
										</ul>
										<h4>热点问题</h4>
										<ul>
											<li>
												<p>
													<h6>账号登录方式__mark__可以解绑__mark__吗？</h6>
												</p>
												<p>
													1.
													账号登录方式__mark__可以解绑__mark__，如果您的QQ、微信、邮箱或微信公众号为非注册方式，可以在控制台操作解绑__mark__；
												</p>
												<p>
													2.
													账号注册方式不能解绑__mark__，例如，如果您是通过微信注册的腾讯云账号，那么微信不能解绑__mark__。
												</p>
											</li>
											<li>
												<p>
													<h6>微信、QQ、邮箱和微信公众号能关联几个账号？</h6>
												</p>
												<p>
													每个QQ、邮箱或微信公众号最多能关联1个腾讯云账号，一__mark__个微信最多能关联50个腾讯云账号。
												</p>
											</li>

											<li>
												<p>
													<h6>QQ和微信都分别注册了腾讯云，能合并吗？</h6>
												</p>
												<p>
													如果您的QQ和微信都分别注册了腾讯云，那么这两个账号分别独立，无法合并。同理，使用微信公众号注册的腾讯云账号也无法和其他QQ、邮箱或微信注册的账号合并。但您可以将账号都关联微信，关联成功__mark__后，即可使用一__mark__个微信管理多个账号。
												</p>
											</li>
											<li>
												<p>
													<h6>账号邮箱__mark__和安全邮箱__mark__的区别是什么？</h6>{' '}
												</p>
												<p>
													1.
													账号邮箱__mark__是腾讯云账号邮箱__mark__登录方式__mark__的账号，如果您通过QQ号、微信、微信公众号方式注册腾讯云，可以设置常用的邮箱作为登录账号；
												</p>
												<p>
													2.
													安全邮箱__mark__是一__mark__种备选验证方式，当您的MFA或微信不可用时，你可以选择安全手机__mark__和安全邮箱__mark__组合方式进行验证。安全邮箱__mark__也可以用来接收账号相关的消息通知。
												</p>
											</li>
										</ul>
									</div>
								</div>
							) : null}
						</div>
					</div>
				</div>
			</div>
		);
	}
}

import React from 'react';
import { Link } from 'react-router-dom';
import qs from 'query-string';
import { TabWrapper, Row, Col } from '@src/components';
import { t, lng } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '@src/routes/developer-index/react-redux/reducer/helper';

// 组件
import { BaseInfo } from '../BaseInfo';
import { BindWechatAndQQ, BindMailAndMP } from '../AccountBind';
import { ExtraInfo } from '../ExtraInfo';
import { RoleAndPermission } from '../RoleAndPermission';
import ContactInfo from '../ContactInfo';
import DataProtect from '../DataProtect';
import { Vip } from '../Vip';
import { Service } from '../Service';
import { ModifyState } from '@src/instances/auth';
import { Alert } from '@tea/component';

const mapStateToProps = state => {
	return {
		isIntl: state.userInfo.isIntl,
		showGuide: state.showGuide,
		authInfo: state.extraInfo.authInfo,
	};
};

// 用户中心@主账号__mark__

// @ts-ignore
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Owner extends React.Component {
	// 中文版页面
	/* eslint-disable */

	getZHTpl() {
		const { authInfo } = this.props;

		/**
		 * 修改__mark__实名流程显示提示条
		 */
		let authAlert = null;
		/* eslint-disable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/
		if (authInfo && lng === 'zh') {
			if (authInfo.modifyState === ModifyState.STAGE) {
				authAlert = (
					<Alert type="info">
						您已提交__mark__实名认证__mark__变更申请，可点击
						<Link to="/developer/auth/modify" className="tea-mr-1n tea-ml-1n">
							查看详情
						</Link>
					</Alert>
				);
			} else if (authInfo.modifyState === ModifyState.FAIL) {
				authAlert = (
					<Alert type="error">
						您提交__mark__的实名认证__mark__变更申请未通过__mark__，可点击
						<Link to="/developer/auth/modify" className="tea-mr-1n tea-ml-1n">
							查看详情
						</Link>
					</Alert>
				);
			}
		}
		/* eslint-enable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/
		return (
			<>
				{authAlert}
				<Row>
					<Col col="1/1">
						<TabWrapper
							items={[
								{ components: BaseInfo, col: '1/3', classNames: '' },
								{ components: ExtraInfo, col: '2/3', classNames: 'border-left matchheight' },
							]}
							divider={true}
							title={t('基本信息__mark__')}
							link={{
								text: t('帮助指引__mark__'),
								url: 'javascript:;',
								onClick: () => {
									this.props.updateGlobalInfo({ showGuide: true, position: 1 });
								},
							}}
						></TabWrapper>
					</Col>
				</Row>
				<Row>
					<Col col="2/3" classNames="J-accountBindTab">
						<TabWrapper
							title={t('登录方式__mark__')}
							items={[
								{ components: BindWechatAndQQ, col: '1/2' },
								{ components: BindMailAndMP, col: '1/2' },
							]}
							divider={true}
							description={t('账号支持多种登录方式，便捷管理云账号__mark__')}
							link={{
								text: t('帮助指引__mark__'),
								url: 'javascript:;',
								onClick: () => {
									this.props.updateGlobalInfo({ showGuide: true, position: 2 });
								},
							}}
						></TabWrapper>
					</Col>
					<Col col="1/3">
						<TabWrapper
							title={t('账号权限__mark__')}
							description={t('帮助用户管理账号的访问权限，资源管理和使用权限__mark__')}
							items={[{ components: RoleAndPermission }]}
						></TabWrapper>
					</Col>
				</Row>
				<Vip></Vip>
				<Service></Service>
			</>
		);
	}

	/* eslint-enable */
	// 英文版页面
	getENTpl() {
		return [
			<Row>
				<Col col="1/1">
					<TabWrapper
						items={[{ components: BaseInfo, col: '1/3' }, { components: ExtraInfo, col: '2/3' }]}
						divider={true}
						title={t('基本信息__mark__')}
					></TabWrapper>
				</Col>
			</Row>,
			<ContactInfo></ContactInfo>,
			<Row>
				<Col col="1/2">
					<TabWrapper
						title={t('账号权限__mark__')}
						description={t('帮助用户管理账号的访问权限，资源管理和使用权限__mark__')}
						items={[{ components: RoleAndPermission, col: '1/2' }]}
					></TabWrapper>
				</Col>
				<DataProtect></DataProtect>
			</Row>,
		];
	}

	render() {
		return this.props.isIntl ? this.getENTpl() : this.getZHTpl();
	}

	componentDidMount() {
		const queryParam = qs.parse(location.search);

		if (queryParam && queryParam.focusIn == 'accountBind') {
			const accountBindTab = document.querySelector('.J-accountBindTab');

			if (accountBindTab && accountBindTab.scrollIntoView) {
				accountBindTab.scrollIntoView();
			}
		}
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { Layout, Form, Tab } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { connect } from 'react-redux';
import * as utils from '@src/utils';
import { developerService } from '@src/services/developer';
import cookie from 'js-cookie';
import { app } from '@tea/app';

const mapStateToProps = state => {
	return { ...state.roleAndPermissionInfo, role: state.userInfo.role, uin: state.userInfo.uin };
};

// 模板基类
class Base extends React.Component {
	getTpl() {
		return [];
	}

	// 拉取开发商列表，子用户__mark__使用
	async getDeveloperList() {
		try {
			const { ownerInfo = [], loginUid } = await developerService.getDeveloperList();
			const { uin } = this.props;

			let displayName = '';
			let hasOwnerAccount = false;
			for (let i = 0; i < ownerInfo.length; i++) {
				if (ownerInfo[i].isDefaultOwner) {
					displayName = ownerInfo[i].displayName;
				}

				if (uin == ownerInfo[i].uin) {
					hasOwnerAccount = true;
				}
			}

			this.props.updateRoleAndPermissionInfo({
				loginUid,
				displayName,
				hasOwnerAccount,
			});
		} catch (error) {}
	}

	render() {
		return <Tab>{this.getTpl()}</Tab>;
	}
}

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class Cooperator extends Base {
	render() {
		return <Tab title={t('账号权限__mark__')}>{this.getTpl()}</Tab>;
	}

	async componentDidMount() {
		this.getDeveloperList();
	}

	detachOwner() {
		const { loginUid } = this.props;
		this.props.resetDialogInfo({
			title: t('是否退出协作__mark__'),
			visible: true,
			content: t(
				'确定退出协作后，主账号与您的协作关系将解除，您将没有权限对该主账号的云资源进行访问。__mark__',
			),
			buttons: [
				{
					text: t('退出协作__mark__'),
					onClick: async () => {
						try {
							this.props.updateDialogInfo({
								disabledBtns: [0],
							});
							await developerService.detachOwner({
								uid: loginUid,
							});
							this.props.resetDialogInfo({ visible: false });
							app.user.logout();
						} catch (e) {
							this.props.updateDialogInfo({
								disabledBtns: [],
							});
							if (e.code == 17334) {
								this.props.resetDialogInfo({
									title: t('无法退出协作__mark__'),
									visible: true,
									content: t(
										'若需退出协作该主账号，请联系主账号或拥有 QcloudCamFullAccess 权限的账号禁用并删除您已生成的 API 密钥后，再重新尝试。__mark__',
									),
									buttons: [
										{
											text: t('知道了__mark__'),
											onClick: async () => {
												this.props.resetDialogInfo({ visible: false });
											},
										},
									],
								});
							} else {
								utils.showErrorTips(t('退出协作失败__mark__'));
							}
						}
					},
				},
			],
		});
	}

	getTpl() {
		const { displayName, loginUid } = this.props;

		return [
			<Form.Pure label={t('账号身份__mark__')} className={'pure-text-row'}>
				<div className="form-unit">
					<div className="form-text">
						<Trans>协作者__mark__</Trans>
						{loginUid ? (
							<a
								onClick={() => {
									this.detachOwner();
								}}
								href="javascript:;"
								className="tc-link-btn"
							>
								<Trans>退出协作__mark__</Trans>
							</a>
						) : null}
					</div>
				</div>
			</Form.Pure>,
			<Form.Pure label={t('协作账号__mark__')} className={'pure-text-row'}>
				<div className="form-unit">
					<div className="form-text">{displayName}</div>
				</div>
			</Form.Pure>,
		];
	}
}

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class SubAccount extends Base {
	render() {
		return <Tab title={t('账号权限__mark__')}>{this.getTpl()}</Tab>;
	}

	async componentDidMount() {
		this.getDeveloperList();
	}

	getTpl() {
		const { displayName, loginUid } = this.props;

		return [
			<Form.Pure label={t('账号身份__mark__')} className={'pure-text-row'}>
				<div className="form-unit">
					<div className="form-text">
						<Trans>子用户__mark__</Trans>
					</div>
				</div>
			</Form.Pure>,
			<Form.Pure label={t('所属账号__mark__')} className={'pure-text-row'}>
				<div className="form-unit">
					<div className="form-text">{displayName}</div>
				</div>
			</Form.Pure>,
		];
	}
}

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class Owner extends Base {
	getTpl() {
		return [
			<Form.Pure label={t('账号身份__mark__')} className={'pure-text-row'}>
				<div className="form-unit">
					<div className="form-text">
						<Trans>主账号__mark__</Trans>
					</div>
				</div>
			</Form.Pure>,
			<Form.Pure label={t('账号权限__mark__')} className={'pure-text-row'}>
				<div className="form-unit">
					<div className="form-text">
						<Trans>腾讯云所有权限__mark__</Trans>
						<a href="/cam/overview" className="tc-link-btn" target="_blank">
							<Trans>权限设置__mark__</Trans>
						</a>
					</div>
				</div>
			</Form.Pure>,
		];
	}
}

// 用户的身份和权限,不区分站点
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class RoleAndPermission extends React.Component {
	render() {
		const { role } = this.props;
		let Component;
		switch (role) {
			case 'owner':
				Component = Owner;
				break;
			case 'cooperator':
				Component = Cooperator;
				break;
			default:
				Component = SubAccount;
				break;
		}
		return <Component></Component>;
	}
}

import React from 'react';
import { Form, Row, Col, TabWrapper } from '@src/components';
import { t, Trans } from '@tea/app/i18n';

import { developerService } from '@src/services';

class Content extends React.Component {
	render() {
		return (
			<Form.Pure label={t('我的服务商__mark__')} className={'pure-text-row'}>
				<div className="form-unit">
					<div className="form-text">
						<a data-event="nav" href="/mypartner/info" className="tc-link-btn">
							<Trans>进入__mark__</Trans>
						</a>
					</div>
				</div>
			</Form.Pure>
		);
	}
}

// 服务商__mark__信息
export class Service extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			loading: true,
			haveAccess: false,
		};
	}

	render() {
		const { loading, haveAccess } = this.state;

		if (loading || !haveAccess) {
			return null;
		}

		return (
			<Row>
				<Col col="1/3">
					<TabWrapper
						items={[{ components: Content, col: '1/1' }]}
						title={t('服务商__mark__')}
					></TabWrapper>
				</Col>
			</Row>
		);
	}

	async componentDidMount() {
		try {
			const haveAccess = await developerService.haveClientConsoleAccess();
			this.setState({ haveAccess: haveAccess });
		} catch (e) {}
		this.setState({ loading: false });
	}
}

import React from 'react';
import { TabWrapper, Row, Col } from '@src/components';
import { BaseInfo } from '../BaseInfo';
import { BindWechat } from '../AccountBind';
import { ExtraInfo } from '../ExtraInfo';
import { RoleAndPermission } from '../RoleAndPermission';
import { t } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '@src/routes/developer-index/react-redux/reducer/helper';

const mapStateToProps = state => {
	return {
		isIntl: state.userInfo.isIntl,
		showGuide: state.showGuide,
		canBindWechat: state.userInfo.canBindWechat,
	};
};

// 子用户__mark__，国内站可以绑定__mark__微信
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class SubAccount extends React.Component {
	getTpl() {
		return (
			<>
				<Row>
					<Col col="1/1">
						<TabWrapper
							items={[
								{ components: BaseInfo, col: '1/3' },
								{ components: RoleAndPermission, col: '1/3' },
								{ components: BindWechat, col: '1/3' },
							]}
							divider={true}
						></TabWrapper>
					</Col>
				</Row>
				<Row>
					<Col col="1/3">
						<TabWrapper
							title={t('主账号身份信息__mark__')}
							items={[{ components: ExtraInfo }]}
						></TabWrapper>
					</Col>
				</Row>
			</>
		);
	}

	getTplWithoutWechat() {
		return (
			<div>
				<Row>
					<Col col="2/3">
						<TabWrapper
							items={[
								{ components: BaseInfo, col: '1/3' },
								{ components: RoleAndPermission, col: '2/3' },
							]}
							divider={true}
						></TabWrapper>
					</Col>
					<Col col="1/3">
						<TabWrapper
							title={t('主账号身份信息__mark__')}
							items={[{ components: ExtraInfo, col: '1/3' }]}
						></TabWrapper>
					</Col>
				</Row>
			</div>
		);
	}

	render() {
		return this.props.isIntl || !this.props.canBindWechat
			? this.getTplWithoutWechat()
			: this.getTpl();
	}
}

import React from 'react';
import { PageTitle } from '@src/components';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { developerService } from '@src/services';
/* eslint-disable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/
class CooperatorBindWechat extends React.Component {
	render() {
		return (
			<PageTitle>
				<span>
					当前账号未绑定__mark__微信。为了方便管理账号，您可切换成主账号__mark__后，绑定__mark__微信作为登录方式__mark__。
				</span>
				<a
					onClick={() => {
						this.switchToOwner();
					}}
					href="javascript:;"
				>
					立即切换成主账号__mark__
				</a>
			</PageTitle>
		);
	}

	async switchToOwner() {
		const { uin } = this.props;

		try {
			await developerService.setDefaultOwner({
				OwnerUin: uin,
			});
		} catch (err) {}

		location.href =
			'https://cloud.tencent.com/login/verify?s_url=https%3A%2F%2Fconsole.cloud.tencent.com%2Fdeveloper';
	}
}
/* eslint-enable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/
const mapStateToProps = state => {
	return {
		...state.roleAndPermissionInfo,
		bindInfo: state.bindInfo,
		userInfo: state.userInfo,
		isIntl: state.userInfo.isIntl,
	};
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class TopTips extends React.Component {
	render() {
		const { bindInfo, hasOwnerAccount, userInfo, isIntl } = this.props;
		const hasBindWeixin = bindInfo && bindInfo.weixin;

		if (isIntl) {
			return null;
		}

		if (userInfo.role == 'cooperator') {
			if (hasOwnerAccount && !hasBindWeixin) return <CooperatorBindWechat {...userInfo} />;
		}

		return null;
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { Layout, Form, Tab, TradeSelector, Row, Col, TabWrapper, List } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import * as classnames from 'classnames';
import { developerService, commonService } from '@src/services';
import { Bubble } from '@tea/component/bubble';
import * as utils from '@src/utils';

class Content extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			data: {},
		};
	}

	render() {
		const { data } = this.state;

		let level = data.level || 0;

		return (
			<List>
				<Form.Pure label={t('会员信息__mark__')} className={'pure-text-row'}>
					<div className="form-unit">
						<div className="form-text">
							<span>{['0', t('一__mark__'), t('二__mark__'), t('三__mark__')][level] + t('星__mark__')}</span>
							<a href="/developer/vip" data-event="nav" className={'tc-link-btn'}>
								<Trans>查看更多__mark__</Trans>
							</a>
						</div>
					</div>
				</Form.Pure>
			</List>
		);
	}

	async componentDidMount() {
		try {
			const data = await developerService.getCredit();
			this.setState({ data: data });
		} catch (e) {}
	}
}

const mapStateToProps = state => {
	return { VIP_WHITELIST: state.whiteList.VIP_WHITELIST };
};

// 会员权益信息
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Vip extends React.Component {
	render() {
		if (!this.props.VIP_WHITELIST) {
			return null;
		}

		return (
			<Row>
				<Col col="1/3">
					<TabWrapper
						items={[{ components: Content, col: '1/1' }]}
						title={t('会员信息__mark__')}
					></TabWrapper>
				</Col>
			</Row>
		);
	}
}

import React from 'react';
import { TabWrapper, Row, Col } from '@src/components';
import { BaseInfo } from '../BaseInfo';
import { BindWechat } from '../AccountBind';
import { ExtraInfo } from '../ExtraInfo';
import { RoleAndPermission } from '../RoleAndPermission';
import { t } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '@src/routes/developer-index/react-redux/reducer/helper';

const mapStateToProps = state => {
	return {
		isIntl: state.userInfo.isIntl,
		showGuide: state.showGuide,
		canBindWechat: state.userInfo.canBindWechat,
	};
};

// 企业微信子用户__mark__，曾经绑定__mark__过微信，则保留解绑__mark__入口
@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Wechatcorp extends React.Component {
	getTpl() {
		return (
			<>
				<Row>
					<Col col="1/1">
						<TabWrapper
							items={[
								{ components: BaseInfo, col: '1/3' },
								{ components: RoleAndPermission, col: '1/3' },
								{ components: BindWechat, col: '1/3' },
							]}
							divider={true}
						></TabWrapper>
					</Col>
				</Row>
				<Row>
					<Col col="1/3">
						<TabWrapper
							title={t('主账号身份信息__mark__')}
							items={[{ components: ExtraInfo }]}
						></TabWrapper>
					</Col>
				</Row>
			</>
		);
	}

	getTplWithoutWechat() {
		return (
			<div>
				<Row>
					<Col col="2/3">
						<TabWrapper
							items={[
								{ components: BaseInfo, col: '1/3' },
								{ components: RoleAndPermission, col: '2/3' },
							]}
							divider={true}
						></TabWrapper>
					</Col>
					<Col col="1/3">
						<TabWrapper
							title={t('主账号身份信息__mark__')}
							items={[{ components: ExtraInfo, col: '1/3' }]}
						></TabWrapper>
					</Col>
				</Row>
			</div>
		);
	}

	render() {
		return this.props.isIntl || !this.props.canBindWechat
			? this.getTplWithoutWechat()
			: this.getTpl();
	}
}

import { getInitState } from '../state';
import _ from 'underscore';

// action没有提供reducer时，默认的处理逻辑
const reducerDefaultHandler = (state, action) => {
	return { ...state, ...action.payload };
};

// 默认提供的reducers
const reducers = {
	// 离开页面时清除状态
	clearState: (state, action) => {
		return getInitState();
	},
	// 更加弹框局部数据
	updateDialogInfo: (state, action) => {
		let newState = { ...state };
		newState.dialogInfo = { ...state.dialogInfo, ...action.payload };
		return newState;
	},
	// 更新弹框全部数据
	resetDialogInfo: (state, action) => {
		let newState = { ...state };
		newState.dialogInfo = action.payload;
		return newState;
	},
	// 更新全局state
	updateGlobalInfo: reducerDefaultHandler,
};

// 注册reducer
export const registerReducer = (nameSpace, handler) => {
	reducers[nameSpace] = typeof handler == 'function' ? handler : reducerDefaultHandler;
};

// 获取reducers
export const getReducers = () => {
	return reducers;
};

let disppatchToProps = null;

// actions
export const mapDisppatchToProps = dispatch => {
	// 缓存
	if (disppatchToProps) {
		return disppatchToProps;
	}
	disppatchToProps = {};
	_.each(reducers, (reducer, key) => {
		disppatchToProps[key] = data => {
			dispatch({ type: key, payload: data });
		};
	});
	return disppatchToProps;
};

// 新建一__mark__个reducer
export const makeUpdateReducer = key => (state, action) => {
	let newState = { ...state };
	newState[key] = { ...state[key], ...action.payload };
	return newState;
};

export const makeResetReducer = key => (state, action) => {
	let newState = { ...state };
	newState[key] = action.payload;
	return newState;
};

import _ from 'underscore';
import { getReducers, makeUpdateReducer, makeResetReducer, registerReducer } from './helper';

const commonReducers = [
	'bindInfo',
	'contactInfo__mark__',
	'dataProtect',
	'extraInfo',
	'roleAndPermissionInfo',
	'userInfo',
];

_.map(commonReducers, field => {
	const updateAction =
		'update' +
		field.replace(/^./, start => {
			return start.toUpperCase();
		});
	const resetAction =
		'reset' +
		field.replace(/^./, start => {
			return start.toUpperCase();
		});
	registerReducer(updateAction, makeUpdateReducer(field));
	registerReducer(resetAction, makeResetReducer(field));
});

export const reducer = (state, action) => {
	const reducer = getReducers();
	if (reducer[action.type]) {
		return reducer[action.type](state, action);
	} else {
		console.warn('reducer not found ' + action.type);
		return state;
	}
};

export function getInitState() {
	return {
		router: null,
		lang: 'zh',
		showGuide: false,
		position: 0,
		dialogInfo: {
			visible: false,
		},
		userInfo: {},
		bindInfo: {},
		extraInfo: {
			authState: null,
			authInfo: null,
			tradeOne: null,
			tradeTwo: null,
		},
		roleAndPermissionInfo: {
			loginUid: '',
			displayName: '',
			hasOwnerAccount: null,
		},
		contactInfo__mark__: {},
		dataProtect: {},
		whiteList: {},
	};
}
export let state = getInitState();

import React from 'react';
import { t, Trans } from '@tea/app/i18n';
import { Input } from '@tea/component/input';
import { Icon } from '@tea/component/Icon';
import classNames from 'classnames';
import { Form } from '@src/components';

// 硬Token帮助文档__mark__链接
export const HARD_TOKEN_HELP_LINK = '//' + window['QCMAIN_HOST'] + '/document/product/378/8393';

const FormItem = class extends Form.Item {
	renderFormItem(children) {
		const { style } = this.props;

		return (
			<li style={style} className={this.props.className}>
				<div className="form-input">{children}</div>
			</li>
		);
	}

	renderValidateWrapper(c1, c2) {
		const props = this.props;
		const onlyControl = this.getOnlyControl();
		const validateStatus =
			props.validateStatus === undefined && onlyControl
				? this.getValidateStatus()
				: props.validateStatus;

		const statusIconMappings = {
			error: 'error',
			validating: 'loading',
		};
		const statusIcon =
			statusIconMappings[validateStatus] && !props.hideStatusIcon ? (
				<Icon type={statusIconMappings[validateStatus]} style={{ marginLeft: 4 }} />
			) : null;

		return (
			<div className={classNames({ 'is-error': validateStatus === 'error' })}>
				{c1}
				{statusIcon}
				{c2}
			</div>
		);
	}
};

class SerialComponent extends React.Component {
	render() {
		return [
			<label className="form-ctrl-label">
				<Input
					placeholder={t('背面的数字序列号__mark__')}
					value={this.props.value}
					onBlur={e => {
						this.props.onBlur(e);
					}}
					onChange={value => {
						this.props.onChange(value);
					}}
				></Input>
			</label>,
			<div className="tc-15-bubble-icon tc-15-triangle-align-start token-question-bubble">
				<span className="bubble-text">
					<Trans>序列号在哪获取？__mark__</Trans>
				</span>
				<div className="tc-15-bubble tc-15-bubble-top">
					<div className="tc-15-bubble-inner">
						<p>
							<Trans>MFA序列号就是MFA设备背面固定不变的一串数字，如图__mark__</Trans>
						</p>
						<img
							src="https://imgcache.qq.com/open_proj/proj_qcloud_v2/mc_2014/global-modules/verify-flow/css/img/serial-number-2.jpg"
							className="img"
						/>
					</div>
				</div>
			</div>,
		];
	}
}

class RandomComponent extends React.Component {
	render() {
		return [
			<label className="form-ctrl-label">
				<Input
					placeholder={t('6位数字验证码__mark__')}
					value={this.props.value}
					onChange={value => {
						this.props.onChange(value);
					}}
					onBlur={e => {
						this.props.onBlur(e);
					}}
				></Input>
			</label>,
			<div className="tc-15-bubble-icon tc-15-triangle-align-start token-question-bubble">
				<span className="bubble-text">
					<Trans>验证码在哪获取？__mark__</Trans>
				</span>
				<div className="tc-15-bubble tc-15-bubble-top">
					<div className="tc-15-bubble-inner">
						<p>
							<Trans>验证码就是MFA设备正面动态变化的6位数字，如图__mark__</Trans>
						</p>
						<img
							src="https://imgcache.qq.com/open_proj/proj_qcloud_v2/mc_2014/global-modules/verify-flow/css/img/serial-number-2-2.jpg"
							className="img"
						/>
					</div>
				</div>
			</div>,
		];
	}
}

@Form.create()
export class HardTokenForm extends React.Component {
	render() {
		const { getFieldDecorator } = this.props.form;

		return [
			<FormItem
				label={t('序列号__mark__')}
				className="pure-text-row"
				style={{ fontSize: 10 }}
				required
				hideStatusIcon={true}
			>
				{getFieldDecorator('num', {
					initialValue: '',
					rules: [
						{
							validator: (rule, value, callback) => {
								if (!value) {
									callback(t('请输入序列号__mark__'));
								} else if (!/^\d+$/.test(value)) {
									callback(t('请输入数字__mark__'));
								} else {
									callback();
								}
							},
						},
					],
					validateTrigger: 'onBlur',
					clearErrorTrigger: 'onChange',
				})(<SerialComponent />)}
			</FormItem>,
			<FormItem
				label={t('验证码__mark__')}
				className="pure-text-row"
				style={{ fontSize: 10 }}
				required
				hideStatusIcon={true}
			>
				{getFieldDecorator('random', {
					initialValue: '',
					rules: [
						{
							validator: (rule, value, callback) => {
								if (/^\d{6}$/.test(value)) {
									callback();
								} else {
									callback(t('请输入6位数字验证码__mark__'));
								}
							},
						},
					],
					validateTrigger: 'onBlur',
					clearErrorTrigger: 'onChange',
				})(<RandomComponent />)}
			</FormItem>,
		];
	}
}

import React from 'react';
import { Form } from '@src/components';
import { developerService } from '@src/services';
import * as utils from '@src/utils';
import { t, Trans } from '@tea/app/i18n';
import classnames from 'classnames';
import { Input, Text } from '@tea/component';
import { Icon } from '@tea/component/Icon';
import classNames from 'classnames';
import cookie from 'js-cookie';
import CopyToClipboard from 'react-copy-to-clipboard';
import QRCode from 'qrcode';

const FormItem = class extends Form.Item {
	renderFormItem(children) {
		const { style } = this.props;

		return (
			<li style={style} className={this.props.className}>
				<div className="form-input">{children}</div>
			</li>
		);
	}

	renderValidateWrapper(c1, c2) {
		const props = this.props;
		const onlyControl = this.getOnlyControl();
		const validateStatus =
			props.validateStatus === undefined && onlyControl
				? this.getValidateStatus()
				: props.validateStatus;

		const statusIconMappings = {
			error: 'error',
			validating: 'loading',
		};
		const statusIcon =
			statusIconMappings[validateStatus] && !props.hideStatusIcon ? (
				<Icon type={statusIconMappings[validateStatus]} style={{ marginLeft: 4 }} />
			) : null;

		return (
			<div className={classNames({ 'is-error': validateStatus === 'error' })}>
				{c1}
				{statusIcon}
				{c2}
			</div>
		);
	}
};

export const SOFT_TOKEN_HELP_LINK =
	'//' + (window['QCMAIN_HOST'] || 'cloud.tencent.com') + '/document/product/378/8394'; // 软Token帮助文档__mark__链接

export class Goggle extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			loading: true,
			textState: 0,
			text: '',
			url: '',
		};
	}

	async showQRCodeAndSecretText(secret) {
		var issuer = 'Tencent Cloud Services'.replace(/\s/g, '%20');
		var random = Math.floor(10000 + Math.random() * (99999 - 10000));
		var account = 'account' + random + '@' + this.props.uin;
		var otpauthText = `otpauth://totp/${issuer}:${account}?secret=${secret}&issuer=${issuer}`;

		const url = await QRCode.toDataURL(otpauthText);
		this.setState({ url });
	}

	async componentDidMount() {
		const data = await developerService.getGooleMFATempSN({
			queryUin: this.props.uin,
			skey: cookie.get('skey'),
		});
		this.setState({ loading: false, text: data });
		this.showQRCodeAndSecretText(data);
	}

	render() {
		const { loading, text, textState, url } = this.state;

		return (
			<div className="token-step-wrap" style={{ fontSize: 10 }}>
				<ul>
					<li className="token-step-item">
						<h3 className="token-step-tit">
							<em>1</em>
							<Trans>在移动设备上安装 MFA 应用程序__mark__</Trans>
						</h3>
						<div className="token-step-con">
							<p>
								<Trans>
									方式1. 在应用市__mark__场搜索
									<span className="text-warning">&nbsp;google anthenticator&nbsp;</span>
									进行安装（如未找到合适应用，可尝试搜索authy安装）
								</Trans>
							</p>
							<p>
								<Trans>方式2. 手机直接扫描二维码进行安装（仅适用ios）__mark__</Trans>
							</p>
							<p className="token-step-img">
								<img src="https://imgcache.qq.com/open_proj/proj_qcloud_v2/mc_2014/user-center/css/img/token/token-ios.png" />
								{/* <img src="https://imgcache.qq.com/open_proj/proj_qcloud_v2/mc_2014/user-center/css/img/token/token-android.png" /> */}
							</p>
							{/* <p><Trans>方式3.  若Google身份验证器不可用，建议下载<span className="text-warning">&nbsp;Authy</span>&nbsp;使用</Trans></p> */}
						</div>
					</li>
					<li className="token-step-item">
						<h3 className="token-step-tit">
							<em>2</em>
							<Trans>获取密钥配置__mark__</Trans>
						</h3>
						<div className="token-step-con">
							<p>
								<Trans>
									打开应用进入__mark__首页 → 点击顶部的“+”(加号按钮) →
									点击选择“扫描条码”，扫描以下二维码__mark__即可获得;
								</Trans>
							</p>
							<p>
								<Trans>
									如果无法扫描，可选择“以人工输入验证码__mark__”手动输入以下文本密钥
									<span className="text-warning">（此时，请确保“基于时间”按钮处于启动状态）</span>
								</Trans>
							</p>
							<p className="token-step-img">
								<span
									className={classnames('token-code-img', { loading: !url })}
									style={{ width: '160px', height: '160px' }}
								>
									{url ? (
										<img src={url} />
									) : (
										[
											<img src="https://imgcache.qq.com/open_proj/proj_qcloud_v2/mc_2014/user-center/css/img/token/qr.png" />,
											<i className="icon-loading"></i>,
										]
									)}
								</span>
								<button
									onClick={() => {
										this.setState({
											textState: !textState,
										});
									}}
									type="button"
									className="tc-15-btn m weak"
									style={{ display: !loading && text ? '' : 'none' }}
								>
									{textState ? t('隐藏文本密钥__mark__') : t('显示文本密钥__mark__')}
								</button>
							</p>
							<div
								className="token-step-code"
								style={{ display: !loading && text && textState == 1 ? '' : 'none' }}
							>
								<CopyToClipboard
									text={text}
									onCopy={() => {
										utils.showSuccessTips(t('复制成功__mark__'));
									}}
								>
									<i className="copy-icon"></i>
								</CopyToClipboard>
								<p>{text}</p>
							</div>
						</div>
					</li>
					<li className="token-step-item">
						<h3 className="token-step-tit">
							<em>3</em>
							<Trans>配置成功,每隔30秒更新一次安全码__mark__</Trans>
						</h3>
						<div className="token-step-con">
							<p className="token-step-img">
								<img src="https://imgcache.qq.com/open_proj/proj_qcloud_v2/mc_2014/user-center/css/img/token/md.png" />
							</p>
						</div>
					</li>
				</ul>
			</div>
		);
	}
}

export class Webapp extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			status: 'loading',
		};
	}

	render() {
		const { qrcodeUrl } = this.props;
		const { status } = this.state;

		return (
			<div className="mc-qr-mod">
				<div className="mc-qr-mod-img">
					{status !== 'error' && (
						<img
							onError={() => {
								this.setState({ status: 'error' });
							}}
							onLoad={() => {
								this.setState({ status: 'success' });
							}}
							src={qrcodeUrl}
						/>
					)}
					{status !== 'error' && (
						<span>
							<Trans>打开微信扫一扫，获取验证码__mark__</Trans>
						</span>
					)}
					{status === 'error' && (
						<p className={'token-step-img'} style={{ padding: 0 }}>
							<span className={classNames('token-code-img', { loading: status === 'error' })}>
								<img
									style={{ width: '100%', height: '100%' }}
									src="https://imgcache.qq.com/open_proj/proj_qcloud_v2/mc_2014/user-center/css/img/token/qr.png"
								/>
								<button
									onClick={() => {
										this.setState({ status: 'reloading' });
										this.props.onRefresh();
									}}
									type="button"
									className="tc-15-btn m weak"
									style={{
										display: status === 'error' ? '' : 'none',
										position: 'absolute',
										whiteSpace: 'nowrap',
										top: '50%',
										left: '50%',
										transform: 'translate(-50%,-50%)',
									}}
								>
									{t('刷新二维码__mark__')}
								</button>
							</span>
						</p>
					)}
				</div>
			</div>
		);
	}
}

class RandomComponent extends React.Component {
	render() {
		const { random1, random2 } = this.props.value;
		return [
			<div className="token-form-text">
				<Trans>请参考右侧图示输入，验证码必须为间隔30s的连续两组__mark__</Trans>
			</div>,
			<label className="form-ctrl-label token-form-label">
				<Input
					placeholder={t('请输入第一组验证码__mark__')}
					value={random1}
					onChange={value => {
						this.props.onChange({ random1: value, random2 });
					}}
					onBlur={e => {
						this.props.onBlur({ random1, random2 });
					}}
				/>
			</label>,
			<label className="form-ctrl-label token-form-label">
				<Input
					placeholder={t('请输入第二组验证码__mark__')}
					value={random2}
					onChange={value => {
						this.props.onChange({ random1, random2: value });
					}}
					onBlur={e => {
						this.props.onBlur({ random1, random2 });
					}}
				/>
			</label>,
		];
	}
}

@Form.create()
export class SoftTokenForm extends React.Component {
	render() {
		const { getFieldDecorator } = this.props.form;

		return (
			<FormItem
				label={t('验证码__mark__')}
				className=""
				style={{ fontSize: 10 }}
				required
				hideStatusIcon={true}
			>
				{getFieldDecorator('random', {
					initialValue: { random1: '', random2: '' },
					rules: [
						{
							validator: (rule, value, callback) => {
								const { random1, random2 } = value;
								// 两个都不符合规则才报错
								if (!/^\d{6}$/.test(random1) && !/^\d{6}$/.test(random2)) {
									callback(t('请输入两组6位动态安全码__mark__'));
								} else {
									callback();
								}
							},
						},
					],
					clearErrorTrigger: 'onChange',
					validateTrigger: 'onBlur',
				})(<RandomComponent />)}
			</FormItem>
		);
	}
}


import _ from 'underscore';

import { getReducers, makeReducer, registerReducer } from './helper';

const commonReducers = [
    'authFlagInfo',
    'tokenInfo'
];

_.map(commonReducers, (field) => {
    const action = 'update' + field.replace(/^./, (start) => {return start.toUpperCase()});
    registerReducer(action, makeReducer(field));
});

export const reducer = (state, action) => {
    const reducer = getReducers();
    if (reducer[action.type]) {
        return reducer[action.type](state, action);
    } else {
        console.warn('reducer not found ' + action.type);
        return state;
    }
}

export function getInitState() {
	return {
		router: null,
		qrcodeUrl: '',
		lang: 'zh',
		flag: [],
		second: 5,
		isSuccess: false,
		select__mark__edType: 0,
		uin: 0,
		authFlagInfo: {},
		tokenInfo: {},

		whiteList: {},
	};
}
export let state = getInitState();

import React from 'react';
import { user } from '@tea/app/bridge';
import { Layout, Form, List, TabWrapper, Row, Col, DangerousBubble } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { developerService, authService } from '@src/services';
import * as utils from '@src/utils';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import _ from 'underscore';
import { app } from '@tea/app';
import { TabStatusHoc } from '@src/components';

const mapStateToProps = state => {
	return state;
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class Content extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			statusText: '',
			className: '',
			loading: true,
		};
	}
	async onDeleteAccount() {
		let authInfo;
		try {
			authInfo = await authService.getAuthInfo();
		} catch (e) {
			utils.showErrorTips(t('获取实名信息失败__mark__'));
			return;
		}

		if (authInfo.authState != 0 && authInfo.authState != 3) {
			this.props.resetDialogInfo({
				title: t('温馨提示__mark__'),
				visible: true,
				content: t('请您先完成实名认证后再申请注销账号__mark__'),
				buttons: [
					{
						text: t('完成实名认证__mark__'),
						onClick: async () => {
							this.props.router.push('/developer/auth');
						},
					},
				],
			});
		} else {
			const verifyOK = await app.mfa['verify']('account:ApplyAccountDeactivation');
			if (verifyOK) {
				this.props.router.push('/developer/security/delete');
			}
		}
	}

	render() {
		const { statusText, className, loading } = this.state;
		if (loading) {
			return null;
		}

		return (
			<List>
				<Form.Pure label={t('注销账号__mark__')} className={'pure-text-row'}>
					<div className="form-unit">
						<div className="form-text">
							<a
								href="javascript:;"
								className={`tc-link-btn ${className}`}
								onClick={() => {
									this.onDeleteAccount();
								}}
							>
								{statusText}
							</a>
						</div>
					</div>
				</Form.Pure>
			</List>
		);
	}

	async componentDidMount() {
		try {
			const { status } = await developerService.getAccountDeactivationInfo();
			let statusText = '';
			let className = '';
			switch (+status) {
				case 0:
					statusText = t('审核中__mark__');
					className = 'text-warning';
					break;
				case 2:
					statusText = t('注销失败__mark__');
					className = 'text-danger';
					break;
				case 3:
					statusText = t('已注销__mark__');
					className = '';
					break;
				default:
					statusText = t('注销__mark__');
					className = '';
					break;
			}

			this.setState({ statusText: statusText, className: className, loading: false });
			// 获取数据成功，展示tab
			this.props.show && this.props.show();
		} catch (e) {
			this.props.hide && this.props.hide();
		}
	}
}

@TabStatusHoc
export class AccountDelete extends React.Component {
	render() {
		return (
			<TabWrapper
				title={
					<span>
						<Trans>账号注销__mark__</Trans>
						{/* <DangerousBubble
                                content={'如果您不再需要此账号，可以将其注销__mark__。账号注销__mark__成功后，其名下所有服务、数据及隐私信息将会被删除__mark__并将无法恢复。<a href="https://cloud.tencent.com/document/product/378/30253" target="_blank">帮助文档__mark__ ></a>'}
                        >
                        </DangerousBubble> */}
					</span>
				}
				items={[
					{
						components: Content,
						col: '1/1',
						props: {
							show: this.props.show,
							hide: this.props.hide,
						},
					},
				]}
				description={t(
					'若不再需要此账号，可将其注销。注销成功后，其名下所有服务、数据及隐私信息将被删除且无法恢复。__mark__',
				)}
				link={{
					url: utils.isIntl()
						? 'https://intl.cloud.tencent.com/document/product/378/33121'
						: 'https://cloud.tencent.com/document/product/378/30253',
					text: t('帮助文档__mark__'),
					target: '_blank',
				}}
			></TabWrapper>
		);
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { Layout, Form, List } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { developerService } from '@src/services';
import * as utils from '@src/utils';
import _ from 'underscore';

// 帐号二__mark__次验证管理组件
export class Base extends React.Component {
	getLoginFlagDescription() {
		const { safeAuthFlag = {} } = this.props;
		let loginProtectIsOpen = _.some(_.values(safeAuthFlag.loginFlag));
		let className;
		if (loginProtectIsOpen) {
			className = 'text-success';
		} else {
			className = 'text-danger';
		}
		return [<span className={className}>{this.getFlagText(safeAuthFlag.loginFlag)}</span>];
	}

	getActionFlagDescription() {
		const { safeAuthFlag = {} } = this.props;
		let actionProtect = _.some(_.values(safeAuthFlag.actionFlag));
		let className;
		if (actionProtect) {
			className = 'text-success';
		} else {
			className = 'text-danger';
		}
		return [<span className={className}>{this.getFlagText(safeAuthFlag.actionFlag)}</span>];
	}

	getFlagText(flags = {}) {
		if (flags.token) {
			return t('已启用 MFA 设备校验__mark__');
		} else if (flags.stoken) {
			return t('已启用 MFA 设备校验__mark__');
		} else if (flags.phone) {
			return t('已开启手机验证码校验__mark__');
		} else if (flags.wechat) {
			return t('已开启微信扫码校验__mark__');
		} else if (flags.custom) {
			return t('已开启第三方验证__mark__');
		} else {
			return t('未开启保护__mark__');
		}
	}

	render() {
		return (
			<List>
				<Form.Pure label={t('登录保护__mark__')} className={'pure-text-row'}>
					<div className="form-unit">
						<div className="form-text">{this.getLoginFlagDescription()}</div>
					</div>
				</Form.Pure>
				<Form.Pure label={t('操作保护__mark__')} className={'pure-text-row'}>
					<div className="form-unit">
						<div className="form-text">{this.getActionFlagDescription()}</div>
					</div>
				</Form.Pure>
			</List>
		);
	}
}

import React from 'react';
import { connect } from 'react-redux';
import { Base } from './Base';

const mapStateToProps = (state) => {
	return state;
}

// 协作者__mark__不能在账户中心修改__mark__二__mark__次验证配置
@connect(mapStateToProps)
export class Cooperator extends Base {}

export * from './Owner';
export * from './Cooperator';
export * from './SubUser';
import React, { Fragment } from 'react';
import { user } from '@tea/app/bridge';
import { app } from '@tea/app';
import { Layout, Form, List } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { developerService, commonService } from '@src/services';
import * as utils from '@src/utils';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { Base } from './Base';
import _ from 'underscore';
import { Radio } from '@tea/component/radio';
import { PopConfirm } from '@tea/component/popconfirm';
import { Button } from '@tea/component/button';
import cookie from 'js-cookie';
import { TOKEN_STATUS, TOKEN_TYPE } from '../../constants';
const { Timer } = utils;
import { Bubble } from '@tea/component/bubble';
import { Icon } from '@tea/component/icon';

const mapStateToProps = state => {
	return state;
};

const STATUS = {
	polling: 0,
	bindind: 1,
	done: 2,
};

const qcmainBase = location.protocol + '//' + (window['QCMAIN_HOST'] || 'cloud.tencent.com');
const callback = qcmainBase + '/wechat/account_bind_result';
const qrcodeUrl =
	qcmainBase +
	'/login/wechat?passthruCallback=1&s_url=' +
	encodeURIComponent(callback) +
	'&theme=simpleV2';

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class BindWechatInline extends React.Component {
	timer = null;

	constructor(props) {
		super(props);

		this.state = {
			status: STATUS.polling,
			tips: t('您的账号未关联微信，扫码关联微信后才可以启动此校验方式__mark__'),
			textColor: 'text-danger',
		};
	}

	render() {
		const { status, tips, textColor } = this.state;
		return [
			<div className="uc-cam-qr-box">
				<iframe
					src={qrcodeUrl}
					allowtransparency="yes"
					frameborder="no"
					scrolling="no"
					width="188"
					height="188"
					id="qrcodeIframe"
				></iframe>
				<div
					className="qrcode-img-mask"
					style={{ display: status == STATUS.done ? '' : 'none', marginLeft: '-7px' }}
				>
					<div className="qrcode-img-mask-inner">
						<i className="m-success-icon"></i>
						<span>
							<Trans>关联成功__mark__</Trans>
						</span>
					</div>
				</div>
			</div>,
			<p style={{ display: tips ? '' : 'none' }} className={textColor}>
				{tips}
			</p>,
		];
	}
	componentDidMount() {
		this.timer = new Timer({
			interval: 200,
			work: () => {
				var auth_code = localStorage.getItem('wechat_bind_code');
				if (auth_code) {
					localStorage.removeItem('wechat_bind_code');
					this.refreshQrcode();
					this.submitBind(auth_code);
				}
			},
		}).start();
	}

	componentWillUnmount() {
		this.timer.stop();
		localStorage.removeItem('wechat_bind_code');
	}

	refreshQrcode() {
		document.querySelector('#qrcodeIframe').src = qrcodeUrl;
	}

	async submitBind(auth_code) {
		try {
			const resp = await commonService.mfaRequest(
				{
					serviceType: 'account',
					cmd: 'BindWechatAccount',
					data: {
						authCode: utils.encrypt(auth_code),
						lang: this.props.lang,
					},
				},
				{ version: 2 },
			);

			if (resp.data.status == 0) {
				this.setState({
					tips: t('微信关联成功，点击“确定”完成设置__mark__'),
					textColor: 'text-success',
					status: STATUS.done,
				});
				this.props.onSuccess();
			} else if (resp.data.status == 1) {
				this.props.resetDialogInfo({
					visible: true,
					title: t('该账号已被关联__mark__'),
					content: t(
						'该账号已经关联了腾讯云账号{{account}}，继续执行将解绑已有的关联关系，是否解绑已有关联？__mark__',
						{ account: resp.data.account },
					),
					buttons: [
						{
							// eslint-disable-next-line @tencent/tea-i18n/no-bare-zh-in-js
							text: '解绑__mark__已有关联',
							onClick: async () => {
								try {
									await this.bindAccountByTicket({ ticket: resp.data.ticket });
									this.setState({
										tips: t('微信关联成功，点击“确定”完成设置__mark__'),
										textColor: 'text-success',
										status: STATUS.done,
									});
									this.props.onSuccess();
								} catch (e) {
									utils.showErrorTips(t('关联失败__mark__'));
								}
							},
						},
					],
				});
			} else if (resp.data.status == 3) {
				this.props.resetDialogInfo({
					visible: true,
					title: t('该账号已被关联__mark__'),
					content: t(
						'该微信已经关联到另一个腾讯云账号{{account}}（账号ID：{{uin}}）且开启了微信扫码校验，请您在另一个账号上完成微信解绑后，重试此操作__mark__',
						{ account: resp.data.account, uin: resp.data.uin },
					),
					buttons: [
						{
							// eslint-disable-next-line @tencent/tea-i18n/no-bare-zh-in-js
							text: '确定__mark__',
							onClick: async () => {
								this.props.resetDialogInfo({
									visible: false,
								});
							},
						},
					],
				});
			}
		} catch (error) {
			error = error || {};

			switch (error.code) {
				case 10001:
				case 10002:
				case 10011:
					const errorConfig = {
						'10001': {
							title: t('该账号已被注册__mark__'),
							content: t('关联失败，该账号已被占用，请您更换账号重试__mark__'),
							btnText: t('更换账号重试__mark__'),
						},
						'10002': {
							title: t('该账号已经是子用户__mark__'),
							content: t('关联失败，该账号已经是腾讯云的子用户，请您更换账号重试__mark__'),
							btnText: t('更换账号重试__mark__'),
						},
						'10011': {
							title: '',
							content: t('登录态校验失败，是否重新关联？__mark__'),
							btnText: t('重新关联__mark__'),
						},
					};
					let config = errorConfig[error.code];

					if (error.code == 10001 && error.data && error.data.message) {
						var uin = error.data.message.match(/\d+$/);
						if (uin && /^[0-9]+$/.test(uin[0])) {
							config.content = t(
								'该微信账号已经注册为腾讯云账号（昵称：{{uin}}），不能完成关联。__mark__',
								{ uin: uin[0] },
							);
						}
					}
					this.props.resetDialogInfo({
						visible: true,
						title: config.title,
						content: config.content,
						buttons: [
							{
								text: config.btnText,
								onClick: () => {
									this.refreshQrcode();
								},
							},
						],
					});
					break;
				case 10003:
					utils.showErrorTips(
						t('当前账号是使用微信注册或已关联了微信账号，无法继续关联其他微信账号，请更换关联方式__mark__'),
					);
					break;
				case 20001:
					utils.showErrorTips(
						t('一个微信最多关联到5个腾讯云账号或子用户，请您更换绑定微信或解绑存量的账号__mark__'),
					);
					break;
				case 10009:
					utils.showErrorTips(
						t(
							'该微信已经关联到另一个腾讯云账号且开启了微信扫码校验，请您在另一个账号上完成微信解绑后，重试此操作__mark__',
						),
					);
					break;
				default:
					if (error.code == 'PERMISSION_FORBID') {
						utils.showErrorTips(t('您暂无API权限(cam:BindWechatAccount)，请联系开发商授权'));
					} else {
						utils.showErrorTips(t('关联失败，请重试__mark__'));
					}
			}
		}
	}
	// 通过ticket提交__mark__绑定__mark__
	async bindAccountByTicket(accountData) {
		try {
			const { data } = await commonService.mfaRequest(
				{
					serviceType: 'account',
					cmd: 'BindAccountByTicket',
					data: {
						ticket: accountData.ticket,
						lang: this.props.lang,
					},
				},
				{ version: 2 },
			);

			return Promise.resolve(data);
		} catch (error) {
			error = error || {};

			switch (error.code) {
				case 10020:
					utils.showErrorTips(t('关联失败，关联票据不存在__mark__'));
					break;
				case 10021:
					utils.showErrorTips(t('关联失败，关联票据已使用__mark__'));
					break;
				case 10022:
					utils.showErrorTips(t('操作已过期，请重试__mark__'));
					break;
				default:
					utils.showErrorTips(t('关联失败，请重试__mark__'));
					break;
			}
			return Promise.reject(error);
		}
	}
}
// 修改__mark__登录保护__mark__、操作保护__mark__的基类
class SecuritySetting extends React.Component {
	type = '';

	haveWechatUnionId = false;

	constructor(props) {
		super(props);
		this.haveWechatUnionId = this.props.haveWechatUnionId;

		this.state = {
			config: [
				{
					value: '0',
					tipsPosition: 'top-start',
					description: t('不开启__mark__'),
					visible: true,
					tipsVisible: false,
					title: '',
					message: '',
				},
				{
					value: '32',
					tipsPosition: 'top-start',
					description: () => {
						return (
							<Bubble content={this.props.thirdPartyVerify.callback || void 0} placement={'bottom'}>
								<i
									className={this.props.thirdPartyVerify.callback ? 'tc-text-dashed-underline' : ''}
								>
									{t('自定义身份验证__mark__')}
								</i>
							</Bubble>
						);
					},
					visible: props.THIRDPARTY_MFA_VERIFY,
					tipsVisible: false,
					okText: t('立即设置__mark__'),
					title: t('无法选择该校验方式__mark__'),
					message: (
						<Trans>
							因您尚未设置自定义身份验证__mark__路径，暂无法选择该校验方式__mark__。请前往{' '}
							<a target="_blank" href={`https://${location.host}/cam/security/subAccount`}>
								用户设置
							</a>{' '}
							中完成设置后重新进行尝试。
						</Trans>
					),
				},
				{
					value: '6',
					tipsPosition: 'top-start',
					description: () => {
						return (
							<Fragment>
								<Trans>启用 MFA 设备校验__mark__</Trans>
								<Bubble
									content={t(
										'MFA 设备分为虚拟 MFA 设备和硬件 MFA 设备。可在 MFA 设备中进行绑定、修改和解绑。__mark__',
									)}
								>
									<Icon type="info" style={{ marginLeft: '5px', marginBottom: '3px' }} />
								</Bubble>
							</Fragment>
						);
					},
					visible: true,
					tipsVisible: false,
					okText: t('立即绑定__mark__'),
					title: t('请先绑定MFA设备__mark__'),
					message: t('您尚未绑定任何MFA设备，无法开启MFA验证，请先完成绑定__mark__'),
				},
				{
					value: '1',
					tipsPosition: 'top-start',
					description: t('开启手机验证码校验__mark__'),
					visible: true,
					tipsVisible: false,
					okText: t('立即设置__mark__'),
					title: t('请先设置安全手机__mark__'),
					message: t('您尚未设置安全手机，无法开启手机验证，请先完成安全手机设置__mark__'),
				},
				{
					value: '16',
					tipsPosition: 'bottom-start',
					description: () => {
						/* eslint-disable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/

						return (
							<Fragment>
								开启微信扫码验证
								{this.type == 'loginFlag' ? (
									<Bubble content="开启微信扫码校验后，使用微信登录方式__mark__无须重复扫码校验；使用其他方式，如QQ、邮箱、微信公众号，登录腾讯云时，需要微信扫码校验身份。">
										<Icon type="info" style={{ marginLeft: '5px', marginBottom: '3px' }} />
									</Bubble>
								) : null}
							</Fragment>
						);

						/* eslint-enable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/
					},
					visible: !props.isIntlUser,
					tipsVisible: false,
					title: t('请先关联微信__mark__'),
					message: t('您尚未绑定任何MFA设备，无法开启MFA验证，请先完成绑定__mark__'),
					renderAddon: item => {
						return item.showAddon ? (
							<BindWechatInline
								status={item.showAddon}
								onSuccess={() => {
									this.haveWechatUnionId = true;
								}}
							></BindWechatInline>
						) : null;
					},
				},
			],
			value: '0',
		};
	}

	onRadioChange(value) {
		const { config } = this.state;
		const nextConfig = [...config];
		let index;
		// 隐藏所有popup并找出当前点击的项对应的配置
		for (let i = 0; i < nextConfig.length; i++) {
			nextConfig[i].tipsVisible = false;
			if (nextConfig[i].value == value) {
				index = i;
			}
		}

		// 判断能不能选中该项
		switch (value) {
			case '0':
				break;
			case '1':
				// 没有手机则要先填写手机
				if (!this.props.hasPhoneNumber) {
					nextConfig[index].tipsVisible = true;
					this.setState({ config: nextConfig });
					return false;
				}
				break;
			case '6':
				// 没有绑定__mark__mfa则要先绑定__mark__mfa
				if (!this.props.haveBindMFA) {
					nextConfig[index].tipsVisible = true;
					this.setState({ config: nextConfig });
					return false;
				}
				break;
			case '16':
				// 没有微信则要先绑定__mark__微信
				if (!this.haveWechatUnionId) {
					// 隐藏所有的addon
					for (let i = 0; i < nextConfig.length; i++) {
						nextConfig[i].showAddon = false;
					}

					nextConfig[index].showAddon = true;
					this.setState({ config: nextConfig, value: value });
					return;
				}
				break;
			case '32':
				if (!this.props.thirdPartyVerify.callback) {
					nextConfig[index].tipsVisible = true;
					this.setState({ config: nextConfig });
					return false;
				}
				break;
			default:
				break;
		}
		for (let i = 0; i < nextConfig.length; i++) {
			nextConfig[i].showAddon = false;
		}

		// 其他情况可以选择该项，则更新value
		this.setState({ value: value, config: nextConfig });
	}

	// 点击popup的确定__mark__按钮
	onBtnClick(index) {
		let select__mark__ed = this.state.config[index];
		switch (select__mark__ed.value) {
			// 触发修改__mark__手机弹框
			case '1':
				//@ts-ignore
				document.querySelector('.J-modify-phone').click();
				break;
			// 跳到mfa页面
			case '6':
				this.props.router.push('/developer/security/mfa');
				break;
			case '32':
				this.props.router.push('/cam/security/subAccount');
				break;
			default:
				break;
		}
	}

	setConfig(index, payload) {
		const cfg = [...this.state.config];
		Object.assign(cfg[index], payload);
		this.setState({ config: cfg });
	}

	// 只需要校验选了微信但是没有关联
	check() {
		if (this.state.value == '16' && !this.haveWechatUnionId) {
			return false;
		} else {
			return true;
		}
	}

	getData() {
		const { safeAuthFlag, tokenInfo } = this.props;
		const { haveWechatUnionId } = this;
		const { status, tokenType } = tokenInfo;
		const { value } = this.state;

		const newSafeAuthFlag = { ...safeAuthFlag };
		newSafeAuthFlag[this.type] = [
			{
				phone: +(value == '1'),
				token: +(
					value === '6' &&
					tokenType == TOKEN_TYPE.HARDWARE &&
					status == TOKEN_STATUS.BINDING
				),
				stoken: +(
					value === '6' &&
					tokenType == TOKEN_TYPE.SOFTWARE &&
					status == TOKEN_STATUS.BINDING
				),
				wechat: +(value === '16' && haveWechatUnionId),
				custom: +(value == '32'),
			},
		];

		return newSafeAuthFlag;
	}

	render() {
		const len = this.state.config.length;
		return (
			<section>
				<Form.Pure
					label={
						<span style={{ marginRight: '10px', color: '#888' }}>
							{this.type == 'loginFlag' ? t('登录保护__mark__') : t('操作保护__mark__')}
						</span>
					}
				>
					{this.type == 'loginFlag'
						? t('开启后，登录时将先进行身份验证，以保障你的账户安全__mark__')
						: t('开启后，控制台中进行敏感操作时需先完成身份验证，以保障账户资料安全。__mark__')}
				</Form.Pure>
				<Form.Pure
					label={
						<span style={{ visibility: 'hidden', marginRight: '10px' }}>
							{this.type == 'loginFlag' ? t('登录保护__mark__') : t('操作保护__mark__')}
						</span>
					}
				>
					<Radio.Group
						value={this.state.value}
						onChange={value => {
							this.onRadioChange(value);
						}}
						layout="column"
					>
						{this.state.config.map((item, index) => {
							if (!item.visible) {
								return null;
							}
							return (
								<PopConfirm
									title={item.title}
									message={item.message}
									visible={item.tipsVisible}
									placement={item.tipsPosition}
									// onVisibleChange = { (value) => {
									//     this.setConfig(index, {tipsVisible: value})
									// } }
									footer={
										<Fragment>
											<Button
												type="link"
												onClick={() => {
													this.setConfig(index, { tipsVisible: false });
													this.onBtnClick(index);
												}}
												children={item.okText || t('确定__mark__')}
											/>
											<Button
												type="text"
												onClick={() => {
													this.setConfig(index, { tipsVisible: false });
												}}
												children={t('取消__mark__')}
											/>
										</Fragment>
									}
								>
									<Radio
										name={item.value}
										style={{ lineHeight: 'normal', marginBottom: index + 1 < len ? '15px' : '' }}
									>
										{typeof item.description === 'function' ? item.description() : item.description}
									</Radio>
									{item.renderAddon && item.renderAddon(item)}
								</PopConfirm>
							);
						})}
					</Radio.Group>
				</Form.Pure>
			</section>
		);
	}
}

// 修改__mark__登录保护__mark__设置
class LoginSecuritySetting extends SecuritySetting {
	type = 'loginFlag';

	constructor(props) {
		super(props);
		//@ts-ignore 找出当前设置的类型，然后选中
		let key = _.findKey(props.safeAuthFlag[this.type]);
		let value = '0';
		switch (key) {
			case 'phone':
				value = '1';
				break;
			case 'token':
			case 'stoken':
				value = '6';
				break;
			case 'wechat':
				value = '16';
				break;
			case 'custom':
				value = '32';
				break;
		}

		Object.assign(this.state, {
			value: value,
		});
	}
}

// 修改__mark__敏感操作设置
class ActionSecuritySetting extends SecuritySetting {
	type = 'actionFlag';
	constructor(props) {
		super(props);
		//@ts-ignore 找出当前设置的类型，然后选中
		let key = _.findKey(props.safeAuthFlag[this.type]);
		let value = '0';
		switch (key) {
			case 'phone':
				value = '1';
				break;
			case 'token':
			case 'stoken':
				value = '6';
				break;
			case 'wechat':
				value = '16';
				break;
			case 'custom':
				value = '32';
				break;
		}

		Object.assign(this.state, {
			value: value,
		});
	}
}

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Owner extends Base {
	formRef = null;

	constructor(props) {
		super(props);
		this.state = {
			disabled: false,
		};
	}

	async setFlag(type) {
		if (this.state.disabled) {
			return;
		}
		this.setState({ disabled: true });
		const verifyOK = await app.mfa['verify']('cam:SetSafeAuthFlag');
		if (!verifyOK) {
			this.setState({ disabled: false });
			return;
		}
		const queue = [
			developerService.getSafeAuthFlag(),
			developerService.getMFADevice(),
			developerService.getWechatBindInfo(),
		];
		if (this.props.whiteList.THIRDPARTY_MFA_VERIFY) {
			queue.push(developerService.getCustomMfaCallback());
		}
		const [safeAuthFlag, tokenInfo, wechatBindInfo, thirdPartyVerify = {}] = await Promise.all(
			queue,
		);

		this.props.updateSafeAuthFlag({ ...safeAuthFlag, wechatUnionId: wechatBindInfo.unionid });
		this.props.updateTokenInfo(tokenInfo);
		var data = {
			tokenInfo: tokenInfo,
			safeAuthFlag: safeAuthFlag,
			haveBindMFA: tokenInfo.status == TOKEN_STATUS.BINDING,
			hasPhoneNumber: !!this.props.userInfo.tel,
			haveWechatUnionId: !!wechatBindInfo.unionid,
			isIntlUser: this.props.userInfo.isIntl,
			router: this.props.router,
			thirdPartyVerify: thirdPartyVerify,
			THIRDPARTY_MFA_VERIFY: this.props.whiteList.THIRDPARTY_MFA_VERIFY,
		};
		this.showSetFlagDialog(type, data);
		this.setState({ disabled: false });
	}

	async showSetFlagDialog(type, data) {
		let ContentComponent = null;
		if (type == 'action') {
			ContentComponent = ActionSecuritySetting;
		} else if (type == 'login') {
			ContentComponent = LoginSecuritySetting;
		}
		this.props.resetDialogInfo({
			title: t('安全设置__mark__'),
			visible: true,
			size: 'm',
			content: (
				<ContentComponent
					{...data}
					ref={node => {
						this.formRef = node;
					}}
				></ContentComponent>
			),
			buttons: [
				{
					text: t('确定__mark__'),
					onClick: async () => {
						if (this.formRef.check()) {
							const data = this.formRef.getData();
							try {
								await commonService.mfaRequest(
									{
										serviceType: 'cam',
										cmd: 'SetSafeAuthFlag',
										data: { uin: this.props.userInfo.uin, ...data },
									},
									{ version: 2 },
								);
								this.props.resetDialogInfo({ visble: false });
								developerService.getSafeAuthFlag().then(data => {
									this.props.updateSafeAuthFlag(data);
								});
								developerService.getMFADevice().then(data => {
									this.props.updateTokenInfo(data);
								});

								developerService.getWechatBindInfo().then((wechatBindInfo = {}) => {
									this.props.updateSafeAuthFlag({ wechatUnionId: wechatBindInfo.unionid || '' });
								});
							} catch (e) {
								utils.showErrorTips(t('修改安全设置失败__mark__'));
							}
						}
					},
				},
			],
		});
	}

	// 重写父类方法
	getLoginFlagDescription() {
		const baseTpl = super.getLoginFlagDescription();
		const ownerTpl = (
			<a
				href="javascript:;"
				className="ml-5"
				onClick={() => {
					this.setFlag('login');
				}}
			>
				<i className="pencil-icon"></i>
			</a>
		);
		return [].concat(baseTpl, ownerTpl);
	}

	// 重写父类方法
	getActionFlagDescription() {
		const baseTpl = super.getActionFlagDescription();
		const ownerTpl = (
			<a
				href="javascript:;"
				className="ml-5"
				onClick={() => {
					this.setFlag('action');
				}}
			>
				<i className="pencil-icon"></i>
			</a>
		);
		return [].concat(baseTpl, ownerTpl);
	}
}

import React from 'react';
import { connect } from 'react-redux';
import { Base } from './Base';

const mapStateToProps = (state) => {
	return state;
}

// 子用户__mark__不能在账户中心修改__mark__二__mark__次验证配置
@connect(mapStateToProps)
export class SubUser extends Base {}


import React from 'react';
import { user } from '@tea/app/bridge';
import { Layout, Tab, TabWrapper, Row, Col } from '@src/components';
import * as SecurityInfo from '../SecurityInfo';
import * as AccountProtect from '../AccountProtect';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { t, Trans } from '@tea/app/i18n';

import { connect } from 'react-redux';

const mapStateToProps = state => {
	return { isIntl: state.userInfo.isIntl, showGuide: state.showGuide };
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Cooperator extends React.Component {
	getZhTpl() {
		return (
			<Row>
				<Col col="2/3">
					<TabWrapper
						items={[{ components: SecurityInfo.Cooperator, col: '2/3' }]}
						divider={true}
						title={t('基本设置__mark__')}
						// link={{text: t('帮助指引__mark__'), url: 'javascript:;', onClick: () => {
						//     this.props.updateGlobalInfo({showGuide: true});
						// }}}
					></TabWrapper>
				</Col>
				<Col col="1/3">
					<TabWrapper
						title={t('账号保护__mark__')}
						description={t('开启账号保护后，登录或者敏感操作时需要进行二次身份校验__mark__')}
						items={[{ components: AccountProtect.Cooperator, col: '1/3' }]}
					></TabWrapper>
				</Col>
			</Row>
		);
	}

	getEnTpl() {
		return (
			<>
				<Row>
					<Col col="1/1">
						<TabWrapper
							items={[{ components: SecurityInfo.Cooperator, col: '2/3' }]}
							divider={true}
							title={t('基本设置__mark__')}
							// link={{text: t('帮助指引__mark__'), url: 'javascript:;', onClick: () => {
							// 		this.props.updateGlobalInfo({showGuide: true});
							// }}}
						></TabWrapper>
					</Col>
				</Row>
				<Row>
					<Col col="1/1">
						<TabWrapper
							title={t('账号保护__mark__')}
							description={t('开启账号保护后，登录或者敏感操作时需要进行二次身份校验__mark__')}
							items={[{ components: AccountProtect.Cooperator, col: '1/3' }]}
						></TabWrapper>
					</Col>
				</Row>
			</>
		);
	}

	render() {
		return this.props.isIntl ? this.getEnTpl() : this.getZhTpl();
	}
}

// @i18n-noscan
import React from 'react';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { t, Trans } from '@tea/app/i18n';

const mapStateToProps = state => {
	return state;
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export default class Guide extends React.Component {
	render() {
		const { position } = this.props;
		if (!this.props.showGuide) {
			return null;
		}
		return (
			<div className="sidebar-panel help-sidebar-panel">
				<a
					href="javascript:;"
					className="btn-close"
					onClick={() => {
						this.props.updateGlobalInfo({ showGuide: false });
					}}
				>
					关闭
				</a>
				<div className="sidebar-panel-container">
					<div className="sidebar-panel-hd">
						<h3
							title={
								position == 1
									? '账号安全基本说明'
									: position == 2
									? '账号保护__mark__基本说明'
									: '异地登录保护__mark__基本说明'
							}
						>
							{position == 1
								? '账号安全基本说明'
								: position == 2
								? '账号保护__mark__基本说明'
								: '异地登录保护__mark__基本说明'}
						</h3>
					</div>
					<div className="sidebar-panel-bd">
						<div className="help-docs">
							{position == 1 ? (
								<div className="help-docs-section">
									{/* <h4 className="help-docs-section-tit">账号安全基本说明</h4> */}
									<div className="help-docs-section-con">
										<h4>热点问题</h4>
										<ul>
											<li>
												<h6>密码__mark__修改__mark__有次数限制吗？</h6>
												<p>
													如果您的账号绑定__mark__了邮箱，可以在控制台自助修改密码__mark__。密码__mark__修改__mark__没有次数限制，建议密码__mark__至少每90天变更一__mark__次，新密码__mark__不要使用前
													3 次用过的密码__mark__。密码__mark__需要包含字母、数字和标点符号（如. /
													_等，除空格外），8-20 个字符。
												</p>
												<p>
													如果您需要修改__mark__QQ密码__mark__，可以前往
													<a
														href="https://aq.qq.com/v2/uv_aq/html/reset_pwd/pc_reset_pwd_input_account.html"
														target="_blank"
													>
														{' '}
														QQ安全中心{' '}
													</a>
													进行设置。
												</p>
											</li>
											<li>
												<h6>绑定__mark__MFA以后，如何开启MFA验证？</h6>
												<p>
													MFA绑定__mark__成功后，您可以在【账号保护__mark__】里，设置开启保护并选择MFA验证，登录保护__mark__和操作保护__mark__均支持MFA验证。
												</p>
											</li>
											<li>
												<h6>需要验证MFA时，MFA不在身边，该怎么办？</h6>
												<p>
													您可以根据MFA验证弹框里的提示，选择【使用备选校验方式】后，通过安全手机__mark__和安全邮箱__mark__组合的方式进行验证。
												</p>
											</li>
											<li>
												<h6>安全手机__mark__/邮箱 和 访问管理的用户关联手机/邮箱 有什么区别？</h6>
												<p>
													安全手机__mark__/邮箱是账户保护的验证方式，也用于接收账号安全相关通知，例如身份验证的校验码，异地登录等通知。关联手机/邮箱（也称联系手机__mark__/邮箱）用于接收产品服务等消息通知，例如服务到期提醒、功能变更等通知。如果您需要修改__mark__关联手机/邮箱，请前往{' '}
													<a target="_blank" href="https://console.cloud.tencent.com/cam">
														访问管理-用户。
													</a>
												</p>
											</li>
											<li>
												<h6>账号当前绑定__mark__的安全手机__mark__/邮箱遗失或者不再使用，如何修改__mark__？</h6>
												<p>
													如果您的安全手机__mark__或安全邮箱__mark__当前无法使用，可以在修改安全手机__mark__或安全邮箱__mark__时，通过备选校验方式验证通过后，自助完成修改__mark__。
												</p>
											</li>
										</ul>
									</div>
								</div>
							) : null}
							{position == 2 ? (
								<div className="help-docs-section">
									{/* <h4 className="help-docs-section-tit">账号保护__mark__基本说明</h4> */}
									<div className="help-docs-section-con">
										<h4>相关解释</h4>
										<ul>
											<li>
												<h6>登录保护__mark__</h6>
												<p>
													登录保护__mark__指在您使用微信、QQ或微信公众号扫码授权登录或通过账号密码__mark__登录后，需要额外进行身份验证，验证通过后才能成功登录腾讯云。开启登录保护__mark__后，即使他人盗取了您的密码__mark__或QQ等，也无法登录您的账号，能够最大限度地保证您的账号安全。
												</p>
											</li>
											<li>
												<h6>操作保护__mark__</h6>
												<p>
													操作保护__mark__指在您进行敏感操作时，需要进行身份验证。开启操作保护__mark__后，您在控制台进行敏感操作（如修改密码__mark__）前，需要先完成二__mark__次身份验证，以确保是您本人操作。
												</p>
											</li>
										</ul>
										<h4>热点问题</h4>
										<ul>
											<li>
												<h6>登录保护__mark__和操作保护__mark__支持哪些验证方式？</h6>
												<p>登录保护__mark__和操作保护__mark__支持微信扫码校验、MFA设备__mark__校验和手机验证码__mark__校验。</p>
											</li>
											<li>
												<h6>开启登录保护__mark__或操作保护__mark__以后，验证方式遗失或者无法使用怎么办？</h6>
												<p>
													遇到以上情况，如果验证方式为MFA设备__mark__校验或微信扫码校验时，您可以在校验页面选择【使用备选校验方式】；如果验证方式为手机验证码__mark__校验，您可以在校验页面选择【手机不可用】进行自助修改__mark__。
												</p>
											</li>
											{/* <li>
																			<h6>如果有特殊原因，可以更换绑定__mark__注册时使用的第三__mark__方登录方式__mark__吗？ </h6>
																			<p>因人员离职、业务变更等特殊场景需要变更注册方式绑定__mark__的第三__mark__方登录方式__mark__的，请您先设置账号邮箱__mark__。设置成功后，请前往工单入口提交__mark__工单，由客服人工审核后解绑__mark__。提交__mark__工单时，请附上如下资料：


																					
																			</p>
																			<p>企业：需提供企业营业执照的彩色扫描件或照片；</p>
																			<p>个人：需提供手持身份证正面和手持身份证反面的照片；</p>
																	</li>
																	<li>
																			<h6>QQ 和微信都分别注册了腾讯云，能合并吗？</h6>
																			<p>
																					
																							如果您的QQ和微信都分别注册了腾讯云了，那么这两个账号分别独立，无法合并。同理，使用微信公众号注册的腾讯云账号也无法和其他QQ注册或者微信注册的账号合并。
																							但是您可以将QQ注册、或微信公众号注册的账号 关联微信作为第三__mark__方登录方式__mark__。关联成功__mark__后，您就可以使用微信管理两个账号。
																					
																			</p>
																	</li> */}
										</ul>
									</div>
								</div>
							) : null}

							{position == 3 ? (
								<div className="help-docs-section">
									{/* <h4 className="help-docs-section-tit">异地登录保护__mark__基本说明</h4> */}
									<div className="help-docs-section-con">
										<h4>相关解释</h4>
										<ul>
											<li>
												<h6>异地登录</h6>
												<p>
													异地登录是用于保护账号安全的策略。每个账号维护两个常用登录城市__mark__，异地登录会依据登录地IP是否所属常用登录城市__mark__来判断。
												</p>
											</li>
											<li>
												<h6>异地登录校验__mark__</h6>
												<p>
													开启异地登录校验__mark__后，如果您的账号未在常用登录城市__mark__登录，需进行身份验证。此功能仅适用于PC浏览器登录。但如果您开启了登录保护__mark__，账号每次登录都将进行身份验证，因此异地登录校验__mark__功能将失效。
												</p>
											</li>
										</ul>
									</div>
								</div>
							) : null}
						</div>
					</div>
				</div>
			</div>
		);
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { app } from '@tea/app';
import { Layout, Form, List } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { developerService } from '@src/services';
import * as utils from '@src/utils';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import _ from 'underscore';
import { Switch } from '@tea/component/switch';

const mapStateToProps = state => {
	const { offsiteFlag = {} } = state.safeAuthFlag;
	const { verifyFlag } = offsiteFlag;
	const checked = verifyFlag == 1;

	return { checked: checked, uin: state.userInfo.uin, safeAuthFlag: state.safeAuthFlag };
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class LoginException extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			disabled: false,
		};
	}

	async switchFlag() {
		if (this.state.disabled) {
			return;
		}

		this.setState({ disabled: true });
		// 判断是否需要mfa校验
		const verifyOK = await app.mfa['verify']('account:SetOffsiteLoginFlag');
		if (verifyOK) {
			var newStatus = !this.props.checked;
			var data = {
				uin: this.props.uin,
				offsiteFlag: [
					{
						verifyFlag: +newStatus, // 0 | 1
					},
				],
			};
			try {
				await developerService.setLoginVerifyOrNotify(data);
				// 设置成功，更新redux
				const safeAuthFlag = { ...this.props.safeAuthFlag };
				safeAuthFlag.offsiteFlag.verifyFlag = +newStatus;

				this.props.updateSafeAuthFlag({ safeAuthFlag });
			} catch (e) {
				utils.showErrorTips(t('设置失败，请重试__mark__'));
			}
		}
		// 成功失败都需要恢复可点击状态
		this.setState({ disabled: false });
	}

	render() {
		const { disabled } = this.state;
		const { checked } = this.props;

		return (
			<List>
				<Form.Pure label={t('异地登录校验__mark__')} className={'pure-text-row'}>
					<div className="form-unit">
						<div className="form-text">
							{/* <span className={`${checked ? 'text-success' : 'text-danger'} mr-10`}>
                                { checked ? '已开启' : '未开启' }
                            </span> */}
							<Switch
								value={checked}
								disabled={disabled}
								onClick={e => {
									// 先禁止切换状态，校验通过后再切换
									e.preventDefault();
									this.switchFlag();
								}}
							/>
						</div>
					</div>
				</Form.Pure>
				<Form.Pure className={'pure-text-row'}>
					<div className="form-unit">
						<div className="form-text">&nbsp;</div>
					</div>
				</Form.Pure>
			</List>
		);
	}

	async componentDidMount() {}
}

import React, { Fragment } from 'react';
import { Form, List, TabWrapper } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { commonService, developerService } from '@src/services';
import * as utils from '@src/utils';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import _ from 'underscore';
import { app } from '@tea/app';
import { TabStatusHoc } from '@src/components';

const mapStateToProps = state => {
	return state;
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
class Content extends React.Component {
	constructor(props) {
		super(props);
	}

	async onLogoutSessions() {
		const verifyOK = await app.mfa['verify']('account:LogoutSessions');

		// 获取账号关联的信息
		const bindInfo = await developerService.getAccountBindInfo();
		const hasBindMail = bindInfo.mail ? true : false;
		const hasBindOtherAccount = _.some(['wechat', 'weixin', 'qq'], bindType => {
			return bindInfo[bindType];
		});

		let content = null;

		// 绑定__mark__了第三__mark__方登录方式__mark__，未绑定__mark__邮箱
		/* eslint-disable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/

		if (hasBindOtherAccount && !hasBindMail) {
			content = (
				<span>
					确认后将下线所有登录状态__mark__（包括当前登录）。若怀疑当前账号存在登录安全风险，建议优先前往{' '}
					<a href="/developer" target="_blank">
						账号信息__mark__
					</a>{' '}
					更换登录方式__mark__。
				</span>
			);
		}

		// 绑定__mark__了第三__mark__方登录方式__mark__，且绑定__mark__邮箱
		if (hasBindOtherAccount && hasBindMail) {
			content = (
				<span>
					确认后将下线所有登录状态__mark__（包括当前登录）。若怀疑当前账号存在登录安全风险，建议优先前往{' '}
					<a href="/developer" target="_blank">
						账号信息__mark__
					</a>{' '}
					更换登录方式__mark__，并修改__mark__登录密码__mark__。
				</span>
			);
		}

		/* eslint-enable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/
		// 只绑定__mark__了邮箱 或者 国际站
		if ((!hasBindOtherAccount && hasBindMail) || this.props.userInfo.isIntl) {
			content = (
				<Trans>
					确认后将下线所有登录状态（包括当前登录）。若怀疑当前账号存在登录安全风险，建议优先修改账号密码。__mark__
				</Trans>
			);
		}

		if (verifyOK) {
			this.props.resetDialogInfo({
				title: t('确认下线所有登录状态？__mark__'),
				visible: true,
				content: content,
				buttons: [
					{
						text: t('立即下线__mark__'),
						onClick: async () => {
							this.logoutRequest();
						},
					},
				],
			});
		}
	}

	async logoutRequest() {
		try {
			await commonService.mfaRequest(
				{
					serviceType: 'account',
					cmd: 'LogoutSessions',
					data: {
						Version: '2018-12-25',
					},
				},
				{
					version: 3,
				},
			);

			this.props.resetDialogInfo({
				visible: false,
			});

			app.user.logout();
		} catch (error) {
			utils.showErrorTips(t('操作失败，请重试__mark__'));
		}
	}

	render() {
		return (
			<List>
				<Form.Pure label={t('登录状态__mark__')} className={'pure-text-row'}>
					<div className="form-unit">
						<div className="form-text">
							<a
								href="javascript:;"
								className={'tc-link-btn'}
								onClick={() => {
									this.onLogoutSessions();
								}}
							>
								{t('下线所有登录状态__mark__')}
							</a>
						</div>
					</div>
				</Form.Pure>
			</List>
		);
	}

	async componentDidMount() {
		this.props.show && this.props.show();
	}
}

@TabStatusHoc
export class LoginSession extends React.Component {
	render() {
		return (
			<TabWrapper
				title={<span>{t('登录状态管理__mark__')}</span>}
				items={[
					{
						components: Content,
						col: '1/1',
						props: { show: this.props.show, hide: this.props.hide },
					},
				]}
				description={t('若账号的登录行为不可控，您可下线包括当前登录在内的所有登录行为__mark__')}
			></TabWrapper>
		);
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { Layout, Row, Col, TabWrapper, Tab } from '@src/components';
import * as SecurityInfo from '../SecurityInfo';
import * as AccountProtect from '../AccountProtect';
import { LoginException } from '../LoginException';
import { t, Trans } from '@tea/app/i18n';
import { AccountDelete } from '../AccountDelete';
import { LoginSession } from '../LoginSession';
import { connect } from 'react-redux';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';

const mapStateToProps = state => {
	return { isIntl: state.userInfo.isIntl, showGuide: state.showGuide };
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Owner extends React.Component {
	render() {
		return this.props.isIntl ? this.getEnTpl() : this.getZhTpl();
	}

	getZhTpl() {
		return [
			<Row>
				<Col col="1/1">
					<TabWrapper
						items={[{ components: SecurityInfo.Owner, col: '1/1' }]}
						divider={true}
						title={t('基本设置__mark__')}
						link={{
							text: t('帮助指引__mark__'),
							url: 'javascript:;',
							onClick: () => {
								this.props.updateGlobalInfo({ showGuide: true, position: 1 });
							},
						}}
					></TabWrapper>
				</Col>
			</Row>,
			<Row>
				<Col col="1/2">
					<TabWrapper
						title={t('账号保护__mark__')}
						description={t('开启账号保护后，登录或者敏感操作时需要进行二次身份校验__mark__')}
						items={[{ components: AccountProtect.Owner, col: '1/1' }]}
						link={{
							url: 'javascript:;',
							text: t('帮助指引__mark__'),
							onClick: () => {
								this.props.updateGlobalInfo({ showGuide: true, position: 2 });
							},
						}}
					></TabWrapper>
				</Col>
				<Col col="1/2">
					<TabWrapper
						title={t('异地登录保护__mark__')}
						description={t(
							'根据登录IP是否所属常用登录城市进行判断，若账号在非常用城市登录，需进行身份校验__mark__',
						)}
						items={[{ components: LoginException }]}
						link={{
							url: 'javascript:;',
							text: t('帮助指引__mark__'),
							onClick: () => {
								this.props.updateGlobalInfo({ showGuide: true, position: 3 });
							},
						}}
					></TabWrapper>
				</Col>
			</Row>,
			<Row>
				<Col col="1/2">
					<AccountDelete />
				</Col>
				<Col col="1/2">
					<LoginSession />
				</Col>
			</Row>,
		];
	}

	getEnTpl() {
		return [
			<Row>
				<Col col="1/1">
					<TabWrapper
						items={[{ components: SecurityInfo.Owner, col: '1/1' }]}
						divider={true}
						title={t('基本设置__mark__')}
					></TabWrapper>
				</Col>
			</Row>,
			<Row>
				<Col col="1/2">
					<TabWrapper
						title={t('账号保护验证__mark__')}
						items={[{ components: AccountProtect.Owner, col: '1/1' }]}
						description={t(
							'用于设置账号的保护策略，进一步提高您的账号安全，您可以设置验证多种方式__mark__',
						)}
					></TabWrapper>
				</Col>
				<Col col="1/2">
					<LoginSession />
				</Col>
			</Row>,
			<Row>
				<Col col="1/2">
					<AccountDelete />
				</Col>
			</Row>,
		];
	}
}

import React from 'react';
import { Form, List } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import _ from 'underscore';
import { TOKEN_STATUS, TOKEN_TYPE } from '../../constants';

// 包括手机、邮箱、mfa信息
export class Base extends React.Component {
	// 默认只读，适合非主账号__mark__
	getPhone() {
		const { userInfo = {} } = this.props;
		let { countryCode = '', tel = '', isOwner, coll_tel = '', coll_countryCode = '' } = userInfo;

		if (!isOwner) {
			tel = coll_tel;
			countryCode = coll_countryCode;
		}

		if (!/^\d/.test(tel)) {
			tel = '';
		}
		return [<span>{countryCode && tel ? `+${countryCode} ${tel}` : tel || '-'}</span>];
	}

	getMail() {
		const { userInfo } = this.props;
		let { mail = '', isOwner, coll_mail } = userInfo;

		if (!isOwner) {
			mail = coll_mail;
		}

		if (!/@/.test(mail)) {
			mail = '-';
		}

		return [<span>{mail}</span>];
	}

	// 默认只读，适合非主账号__mark__
	getMfaSetting() {
		const { tokenInfo = {} } = this.props;

		let mfaStatus = tokenInfo.status;
		let tokenType = tokenInfo.tokenType;
		let mfaDevice = '';
		let className = '';
		// MFA 未绑定__mark__状态,可以绑定__mark__
		if (mfaStatus == TOKEN_STATUS.UNBINDING || mfaStatus == TOKEN_STATUS.FORZEN) {
			mfaDevice = t('未绑定 MFA 设备__mark__');
			className = 'text-danger';
		} else if (mfaStatus == TOKEN_STATUS.BINDING) {
			// MFA 已绑定__mark__状态，可以重新绑定__mark__或者解绑__mark__
			if (tokenType == TOKEN_TYPE.HARDWARE) {
				mfaDevice = t('已绑定硬件 MFA 设备（SN:{{tokenSn}}）__mark__', {
					tokenSn: tokenInfo.tokenSn || '',
				});
			} else {
				mfaDevice = t('已绑定虚拟 MFA 设备__mark__');
			}
			className = 'text-success';
		} else {
			mfaDevice = '-';
		}
		return [<span className={className}>{mfaDevice}</span>];
	}

	getTpl() {
		return [
			<Form.Pure
				label={t('MFA设备__mark__')}
				className={'pure-text-row'}
				description={t('MFA是一种有效的安全认证方法，绑定后您可以设置通过MFA进行二次校验__mark__')}
			>
				<div className="form-unit">
					<div className="form-text">{this.getMfaSetting()}</div>
				</div>
			</Form.Pure>,
			<Form.Pure
				label={t('安全手机__mark__')}
				className={'pure-text-row'}
				description={t('账号保护的一种验证方式，可以用于校验用户身份__mark__')}
			>
				<div className="form-unit">
					<div className="form-text">{this.getPhone()}</div>
				</div>
			</Form.Pure>,
			<Form.Pure
				label={t('安全邮箱__mark__')}
				className={'pure-text-row'}
				description={t('安全邮箱可以作为账号身份验证的一种辅助校验方式__mark__')}
			>
				<div className="form-unit">
					<div className="form-text">{this.getMail()}</div>
				</div>
			</Form.Pure>,
		];
	}

	render() {
		return <List>{this.getTpl()}</List>;
	}
}

import React from 'react';
import { connect } from 'react-redux';
import { Base } from './Base';
const mapStateToProps = (state) => {
	return state;
}



@connect(mapStateToProps)
export class Cooperator extends Base {}

import React, { Fragment } from 'react';
import { Form } from '@src/components';
import { t, Trans, lng, site } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { developerService, commonService } from '@src/services';
import * as utils from '@src/utils';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import _ from 'underscore';
import { Base } from './Base';
import { app } from '@tea/app';
import cookie from 'js-cookie';
import pify from 'pify';
import login from '@src/libs/login';
import { ModifyPhone, ModifyMail, ModifyPassword, VerifyMail } from './components';
import { TOKEN_STATUS, TOKEN_TYPE, ACCOUNT_BIND_TYPE } from '../../constants';
import { Button } from '@tencent/tea-component';
import { resolve } from 'path';

const mapStateToProps = state => {
	return state;
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class Owner extends Base {
	constructor(props) {
		super(props);
		this.state = { ...this.state, canModifyPwd: false, mail: '' };
	}
	// 没有绑定__mark__mfa，点击绑定__mark__mfa
	async bind() {
		const verifyOK = await app.mfa['verify']('cam:BindToken');
		if (verifyOK) {
			this.props.router.push('/developer/security/mfa');
		}
	}

	// 已经绑定__mark__了mfa，点击重写重新绑定__mark__mfa
	rebind() {
		const { tokenInfo = {} } = this.props;
		const { tokenSn, tokenType } = tokenInfo;
		const tokenSNText = tokenSn ? t('（序列号：{{tokenSn}}）__mark__', { tokenSn }) : '';

		this.props.resetDialogInfo({
			title: '',
			visible: true,
			content: t(
				'该账号已绑定过MFA设备{{tokenSNText}}，若确认修改绑定，新绑定的MFA设备生效后，原MFA设备将自动失效。是否要重新绑定MFA？__mark__',
				{ tokenSNText },
			),
			buttons: [
				{
					text: t('确定继续__mark__'),
					onClick: async () => {
						this.props.resetDialogInfo({ visible: false });
						let interfaceTmp;
						if (tokenType == TOKEN_TYPE.HARDWARE) {
							interfaceTmp = 'ModifyToken';
						} else {
							interfaceTmp = 'ModifyStoken';
						}
						const verifyOK = await app.mfa['verify'](`cam:${interfaceTmp}`);
						if (verifyOK) {
							this.props.router.push('/developer/security/mfa');
						}
					},
				},
			],
		});
	}

	// 已经绑定__mark__mfa，点击解绑__mark__
	unbind() {
		const { tokenInfo, userInfo } = this.props;
		const { tokenSn, tokenType } = tokenInfo;
		const { uin } = userInfo;

		this.props.resetDialogInfo({
			visible: true,
			content: t(
				'解绑MFA设备后，将自动关闭该账号在登录和操作保护中的MFA校验，请谨慎操作。确定要解绑MFA设备？__mark__',
			),
			buttons: [
				{
					text: t('确定解绑__mark__'),
					onClick: async () => {
						this.props.resetDialogInfo({ visible: false });
						let apiName;
						// 硬token
						if (tokenType == TOKEN_TYPE.HARDWARE) {
							apiName = 'UnbindToken';
						} else {
							apiName = 'UnbindStoken';
						}
						const verifyOK = await app.mfa['verify'](`cam:${apiName}`);
						if (verifyOK) {
							let params = {
								serviceType: 'cam',
								cmd: apiName,
								data: {
									uin: uin,
									tokenType: tokenType,
									tokenSn: tokenSn,
									skey: cookie.get('skey'),
								},
							};
							let options = { secure: true, withClientIP: true, withClientUA: true, version: 2 };
							try {
								await commonService.mfaRequest(params, options);
							} catch (e) {
								return;
							}

							developerService.getSafeAuthFlag().then(data => {
								this.props.updateSafeAuthFlag(data);
							});
							developerService.getMFADevice().then(data => {
								this.props.updateTokenInfo(data);
							});

							developerService.getWechatBindInfo().then((wechatBindInfo = {}) => {
								this.props.updateSafeAuthFlag({ wechatUnionId: wechatBindInfo.unionid || '' });
							});
						}
					},
				},
			],
		});
	}

	// 修改__mark__手机
	async modifyPhone() {
		const verifyOK = await app.mfa['verify']('account:ModifyPhoneNum');
		if (!verifyOK) {
			return;
		}

		let form = null;

		this.props.resetDialogInfo({
			title: t('修改安全手机__mark__'),
			visible: true,
			size: this.props.lang == 'zh' ? 500 : 600,
			content: (
				<ModifyPhone
					ref={node => {
						form = node;
					}}
					lang={this.props.lang}
				></ModifyPhone>
			),
			buttons: [
				{
					text: t('确定__mark__'),
					onClick: async () => {
						let data;
						try {
							data = await pify(form.validateFields)();
						} catch (e) {
							return;
						}

						const { code } = data;
						const { countryCode, phoneNumber: phoneNum } = data.phoneInfo;

						try {
							const resp = await commonService.mfaRequest(
								{
									serviceType: 'account',
									cmd: 'ModifyPhoneNum',
									data: {
										Version: '2018-12-25',
										CountryCode: countryCode,
										PhoneNum: phoneNum,
										Code: code,
										Skey: login.getSkey(),
									},
								},
								{
									version: 3,
									withClientIP: true,
									withClientUA: true,
								},
							);

							if (resp.data && resp.data.Response && resp.data.Response.NeedCheckReceiver) {
								this.showContactInfoSyncTip({ contactType: 'phone' });
							} else {
								this.props.resetDialogInfo({ visible: false });
							}
							const { userInfo } = await developerService.getCurrentUserInfoV2();
							this.props.updateUserInfo(userInfo);
						} catch (error) {
							error = error || {};
							if (
								error.code === 'InvalidParameter.CodeError' ||
								error.code === 'InvalidParameter.CodeVerified'
							) {
								form.setFields({ code: { value: code, errors: [new Error(t('验证码错误__mark__'))] } });
								return;
							}
							if (error.code === 'InvalidParameter.CodeExpired') {
								form.setFields({ code: { value: code, errors: [new Error(t('验证码已过期__mark__'))] } });
								return;
							}
							if (error.code === 'LimitExceeded.VerifyFrequency') {
								form.setFields({
									code: { value: code, errors: [new Error(t('您的操作过于频繁，请稍后重试__mark__'))] },
								});
								return;
							}
							if (error.code === 'LimitExceeded.PhoneNumBound') {
								form.setFields({
									code: {
										value: code,
										errors: [new Error(t('当前手机绑定腾讯云账号已超过上限，请更换手机后重试__mark__'))],
									},
								});
								return;
							}
							utils.showErrorTips(t('操作失败，请重试__mark__'));
						}
					},
				},
			],
		});
	}
	//@ts-ignore
	getPhone() {
		const tpl = super.getPhone();
		// J-modify-phone用于其他组件触发修改__mark__手机的行为
		const modifyTpl = (
			<a
				href="javascript:;"
				className="ml-5 J-modify-phone"
				onClick={() => {
					this.modifyPhone();
				}}
			>
				<i className="pencil-icon"></i>
			</a>
		);
		// @ts-ignore
		tpl.push(modifyTpl);
		return tpl;
	}

	// 修改__mark__邮箱
	async modifyMail() {
		const verifyOK = await app.mfa['verify']('account:ModifyMail');
		if (!verifyOK) {
			return;
		}

		let form = null;

		this.props.resetDialogInfo({
			title: t('修改绑定邮箱__mark__'),
			visible: true,
			size: this.props.lang == 'zh' ? 500 : 600,
			content: (
				<ModifyMail
					ref={node => {
						form = node;
					}}
					lang={this.props.lang}
				></ModifyMail>
			),
			buttons: [
				{
					text: t('确定__mark__'),
					onClick: async () => {
						let data;
						try {
							data = await pify(form.validateFields)();
						} catch (e) {
							return;
						}

						try {
							const resp = await commonService.mfaRequest(
								{
									serviceType: 'account',
									cmd: 'ModifyMail',
									data: {
										...data,
										skey: login.getSkey(),
									},
								},
								{
									version: 2,
									withClientIP: true,
									withClientUA: true,
								},
							);
							if (resp.data && resp.data.needCheckReceiver) {
								this.showContactInfoSyncTip({ contactType: 'mail' });
							} else {
								this.props.resetDialogInfo({ visible: false });
							}

							let { userInfo } = await developerService.getCurrentUserInfoV2();
							this.props.updateUserInfo(userInfo);
						} catch (error) {
							error = error || {};
							if (error.code === 711003 || error.code === 711002) {
								form.setFields({
									code: { value: data.code, errors: [new Error(t('验证码错误__mark__'))] },
								});
								return;
							}
							if (error.code === 711004) {
								form.setFields({
									code: { value: data.code, errors: [new Error(t('验证码已过期__mark__'))] },
								});
								return;
							}
							utils.showErrorTips(t('保存失败，请重试__mark__'));
						}
					},
				},
			],
		});
	}

	getMail() {
		const { userInfo } = this.props;
		let { mail = '', mail_verify } = userInfo;
		let tpl = super.getMail();
		const modifyTpl = (
			<a
				href="javascript:;"
				className="ml-5"
				onClick={() => {
					this.modifyMail();
				}}
			>
				<i className="pencil-icon"></i>
			</a>
		);

		// 邮箱有效并且需要验证
		if (mail && mail.indexOf('@') != -1 && mail_verify == 0 && lng === 'zh') {
			tpl.push(<VerifyMail mail={mail}></VerifyMail>);
		}

		tpl.push(modifyTpl);
		return tpl;
	}

	// 修改密码__mark__
	async modifyPwd() {
		const verifyOK = await app.mfa['verify']('account:ChangeMailPassword');
		if (!verifyOK) {
			return;
		}

		// 获取账号关联的信息
		const bindInfo = await developerService.getAccountBindInfo();
		const bindAccountList = [];
		_.each(['weixin', 'qq', 'wechat'], bindType => {
			if (bindInfo[bindType] && bindType != bindInfo.type) {
				bindAccountList.push(ACCOUNT_BIND_TYPE[bindType]);
			}
		});

		const loginAccountList = [];
		_.each(['weixin', 'qq', 'wechat'], bindType => {
			if (bindInfo[bindType]) {
				loginAccountList.push(ACCOUNT_BIND_TYPE[bindType]);
			}
		});
		/* eslint-disable */

		const resetPswLinkMap = {
			QQ:
				'https://aq.qq.com/v2/uv_aq/html/reset_pwd/pc_reset_pwd_input_account.html?v=3.0&old_ver_account=',
			微信: 'https://weixin110.qq.com/security/readtemplate?t=find_password/index',
			微信公众号:
				'https://mp.weixin.qq.com/cgi-bin/readtemplate?t=forgetpwd/index_tmpl&token=&lang=zh_CN',
		};

		/* eslint-enable */
		Promise.resolve()
			.then(() => {
				return new Promise((resolve, reject) => {
					if (this.props.userInfo.isIntl) {
						return resolve();
					}
					/* eslint-disable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/

					if (loginAccountList.length) {
						const ResetPswLinks = () => (
							<Fragment>
								{loginAccountList.map((name, index) => {
									return (
										<Fragment key={index}>
											<a href={resetPswLinkMap[name]} target="blank">
												{name}
											</a>
											{index != loginAccountList.length - 1 && <span> / </span>}
										</Fragment>
									);
								})}
							</Fragment>
						);

						const msgTip = (
							<Fragment>
								修改密码__mark__并不影响您通过 <strong>{loginAccountList.join('/')}</strong>{' '}
								登录，为了账号安全建议先执行如下操作：
								<ul style={{ listStyleType: 'disc', paddingLeft: 20, paddingTop: 8 }}>
									{bindAccountList.length > 0 && (
										<li style={{ listStyleType: 'disc', marginTop: 2 }}>
											前往{' '}
											<a href="/developer?focusIn=accountBind" target="_blank">
												账号信息__mark__
											</a>{' '}
											解绑__mark__其他登录方式__mark__
										</li>
									)}

									{bindInfo.type != 'mail' && (
										<li style={{ listStyleType: 'disc', marginTop: 2 }}>
											修改__mark__ <ResetPswLinks /> 的密码__mark__
										</li>
									)}
								</ul>
							</Fragment>
						);

						this.props.resetDialogInfo({
							title: '重要提醒',
							visible: true,
							content: msgTip,
							buttons: [
								{
									text: '继续修改密码__mark__',
									onClick: () => {
										resolve();
									},
								},
							],
						});
					} else {
						resolve();
					}

					/* eslint-enable @tencent/tea-i18n/no-bare-zh-in-jsx,@tencent/tea-i18n/no-bare-zh-in-js*/
				});
			})
			.then(() => {
				let form = null;

				this.props.resetDialogInfo({
					title: t('修改密码__mark__'),
					visible: true,
					size: 400,
					content: (
						<ModifyPassword
							ref={node => {
								form = node;
							}}
							account={this.state.mail}
						></ModifyPassword>
					),
					buttons: [
						{
							text: t('确定__mark__'),
							onClick: async () => {
								let data;
								try {
									data = await pify(form.validateFields)();
								} catch (e) {
									return;
								}

								try {
									await commonService.mfaRequest(
										{
											serviceType: 'account',
											cmd: 'ChangeMailPassword',
											data: {
												oldPassword: utils.encrypt(data.oldPassword),
												newPassword: utils.encrypt(data.newPassword),
												domain:
													location.host.indexOf('qcloud.com') != -1
														? 'www.qcloud.com'
														: 'cloud.tencent.com',
												lang: this.props.lang,
												skey: login.getSkey(),
											},
										},
										{
											version: 2,
											withClientIP: true,
											withClientUA: true,
										},
									);
									app.user.logout();
									this.props.resetDialogInfo({
										title: t('修改密码成功__mark__'),
										content: t('密码修改成功，请您牢记新的登录密码，重新登录__mark__'),
										visible: true,
										buttons: [
											{
												text: t('确定__mark__'),
												onClick: () => {
													this.props.resetDialogInfo({ visible: false });
													location.href =
														'https://' +
														(site == 1 ? 'cloud.tencent.com' : 'intl.cloud.tencent.com') +
														'/login?loginType=email';
												},
											},
										],
									});
									// utils.showSuccessTips(t('修改密码成功__mark__'));
								} catch (error) {
									error = error || {};
									if (error.code === 11001) {
										form.setFields({
											oldPassword: {
												value: data.oldPassword,
												errors: [new Error(t('旧密码不匹配，请修改__mark__'))],
											},
										});
										return;
									}
									utils.showErrorTips(t('修改失败，请重试__mark__'));
								}
							},
						},
					],
				});
			});
	}

	getTpl() {
		const { canModifyPwd } = this.state;
		const baseTpl = super.getTpl();
		if (!canModifyPwd) {
			return baseTpl;
		}
		const ownerTpl = (
			<Form.Pure
				label={t('账号密码__mark__')}
				className={'pure-text-row'}
				description={t('账号密码为您的腾讯云账号邮箱登录密码，建议您定期更换账号密码__mark__')}
			>
				<div className="form-unit">
					<div className="form-text">
						*********
						<a
							href="javascript:;"
							className="ml-5"
							onClick={() => {
								this.modifyPwd();
							}}
						>
							<i className="pencil-icon"></i>
						</a>
					</div>
				</div>
			</Form.Pure>
		);
		return [].concat(baseTpl, ownerTpl);
	}
	// mfa和安全设置__mark__的数据处理和渲染
	getMfaSetting() {
		const { tokenInfo = {} } = this.props;

		let mfaStatus = tokenInfo.status;
		let tpl = super.getMfaSetting();
		let actions = {
			bind: (
				<a
					href="javascript:;"
					className="tc-link-btn"
					onClick={() => {
						this.bind();
					}}
				>
					<Trans>绑定__mark__</Trans>
				</a>
			),
			rebind: (
				<a
					href="javascript:;"
					style={{ display: 'none' }}
					className="tc-link-btn"
					onClick={() => {
						this.rebind();
					}}
				>
					<Trans>重新绑定__mark__</Trans>
				</a>
			),
			unbind: (
				<a
					href="javascript:;"
					className="tc-link-btn"
					onClick={() => {
						this.unbind();
					}}
				>
					<Trans>解绑__mark__</Trans>
				</a>
			),
		};
		// MFA 未绑定__mark__状态,可以绑定__mark__
		if (mfaStatus == TOKEN_STATUS.UNBINDING || mfaStatus == TOKEN_STATUS.FORZEN) {
			tpl.push(actions.bind);
		} else if (mfaStatus == TOKEN_STATUS.BINDING) {
			// MFA 已绑定__mark__状态，可以重新绑定__mark__或者解绑__mark__
			tpl = tpl.concat(actions.rebind, actions.unbind);
		}
		return tpl;
	}

	showContactInfoSyncTip({ contactType }) {
		const { userInfo } = this.props;
		const { uin } = userInfo;

		const guideContent =
			contactType == 'phone' ? (
				<Trans>
					您的安全手机__mark__已经修改__mark__完成，是否前往修改__mark__联系手机__mark__？
					<br />
					<br />
					注：
					<br />
					安全手机__mark__用于接收登录保护__mark__、操作保护__mark__等验证信息；
					<br />
					联系手机__mark__用于接收您在腾讯云的财务、产品、安全、动态等重要通知。
				</Trans>
			) : (
				<Trans>
					您的安全邮箱__mark__已经修改__mark__完成，是否前往修改__mark__联系邮箱__mark__？
					<br />
					<br />
					注：
					<br />
					安全邮箱__mark__用于接收登录保护__mark__、操作保护__mark__等验证信息；
					<br />
					联系邮箱__mark__用于接收您在腾讯云的财务、产品、安全、动态等重要通知。
				</Trans>
			);

		this.props.resetDialogInfo({
			title: t('温馨提示__mark__'),
			visible: true,
			content: guideContent,
			cancelBtn: false,
			buttons: [
				{
					text: t('前往修改__mark__'),
					onClick: () => {
						this.props.router.push(`/cam/user/${uin}?type=uin`);
					},
				},
				{
					text: t('无需修改__mark__'),
					type: 'weak',
					onClick: () => {
						this.props.resetDialogInfo({ visible: false });
					},
				},
			],
		});
	}

	async componentDidMount() {
		// qq和邮箱账号可以修改密码__mark__
		try {
			let { mail } = await developerService.getAccountBindInfo();
			if (mail) {
				this.setState({ canModifyPwd: true, mail });
			}
		} catch (e) {}
	}
}

import React from 'react';
import { Base } from './Base';
import { connect } from 'react-redux';

const mapStateToProps = (state) => {
	return state;
}

@connect(mapStateToProps)
export class SubUser extends Base {}

import React from 'react';
import { user } from '@tea/app/bridge';
import { Layout, Tab, TabWrapper, Row, Col } from '@src/components';

import * as SecurityInfo from '../SecurityInfo';
import * as AccountProtect from '../AccountProtect';
import { t, Trans } from '@tea/app/i18n';
import { mapDisppatchToProps } from '../../react-redux/reducer/helper';
import { connect } from 'react-redux';

const mapStateToProps = state => {
	return { isIntl: state.userInfo.isIntl, showGuide: state.showGuide };
};

@connect(
	mapStateToProps,
	mapDisppatchToProps,
)
export class SubAccount extends React.Component {
	getZhTpl() {
		return (
			<div>
				<Row>
					<Col col="2/3">
						<TabWrapper
							items={[{ components: SecurityInfo.SubUser, col: '2/3' }]}
							divider={true}
							title={t('基本设置__mark__')}
							// link={{text: t('帮助指引__mark__'), url: 'javascript:;', onClick: () => {
							//     this.props.updateGlobalInfo({showGuide: true});
							// }}}
						></TabWrapper>
					</Col>
					<Col col="1/3">
						<TabWrapper
							title={t('账号保护__mark__')}
							description={t('开启账号保护后，登录或者敏感操作时需要进行二次身份校验__mark__')}
							items={[{ components: AccountProtect.SubUser, col: '1/3' }]}
						></TabWrapper>
					</Col>
				</Row>
			</div>
		);
	}

	getEnTpl() {
		return [
			<Row>
				<Col col="1/1">
					<TabWrapper
						items={[{ components: SecurityInfo.SubUser, col: '2/3' }]}
						divider={true}
						title={t('基本设置__mark__')}
						// link={{text: t('帮助指引__mark__'), url: 'javascript:;', onClick: () => {
						//     this.props.updateGlobalInfo({showGuide: true});
						// }}}
					></TabWrapper>
				</Col>
			</Row>,
			<Row>
				<Col col="1/1">
					<TabWrapper
						title={t('账号保护__mark__')}
						description={t('开启账号保护后，登录或者敏感操作时需要进行二次身份校验__mark__')}
						items={[{ components: AccountProtect.SubUser, col: '1/3' }]}
					></TabWrapper>
				</Col>
			</Row>,
		];
	}
	render() {
		return this.props.isIntl ? this.getEnTpl() : this.getZhTpl();
	}
}

import React, { useEffect, useState } from 'react';
import { user } from '@tea/app/bridge';
import { PageTitle } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { connect } from 'react-redux';
import { developerService } from '@src/services';
import { Text } from '@tencent/tea-component/lib/text';
import { useHistory, useDocumentTitle } from '@tea/app';
import { Alert } from '@tencent/tea-component/lib/alert';
class OwnerDefaultTips extends React.Component {
	render() {
		return (
			<PageTitle>
				<Trans>
					<span>
						安全手机__mark__和邮箱主要用于用户身份校验，保障账号安全。如需设置接收产品消息、告警的手机和邮箱，请前往
					</span>
					<a href="/cam" data-event="nav">
						用户管理
					</a>
					<span>中找到对应用户进行设置。</span>
				</Trans>
			</PageTitle>
		);
	}
}

class SubaccountTips extends React.Component {
	render() {
		return (
			<PageTitle>
				<span>
					<Trans>
						协作者__mark__（子用户__mark__）只能在此页面查看安全设置__mark__内容。如需操作相关设置项目，需要主帐号（或具有管理权限的用户）在{' '}
						<a href="/cam" target="_blank">
							CAM访问管理
						</a>{' '}
						中，进行设置。
					</Trans>
				</span>
			</PageTitle>
		);
	}
}

class LoginExceptionTpl extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			isClosed: false,
		};
	}
	render() {
		// 暂时下掉此提示
		return null;

		// if (this.state.isClosed) {
		// 	return null;
		// }
		// return (
		// 	<PageTitle>
		// 		<span>
		// 			<Trans>
		// 				为了保障您的账号安全，异地登录消息通知将默认开启，发生异地登录行为时将以短信、邮件、微信方式通知您。
		// 			</Trans>
		// 		</span>
		// 		<a
		// 			href="javascript:;"
		// 			// eslint-disable-next-line @tencent/tea-i18n/no-bare-zh-in-js
		// 			title="关闭"
		// 			className="notice-btn-close"
		// 			onClick={() => {
		// 				this.setState({ isClosed: true });
		// 			}}
		// 		>
		// 			关闭
		// 		</a>
		// 	</PageTitle>
		// );
	}
}

class MpTpl extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			showBubble: false,
			isClosed: false,
		};
	}
	render() {
		// 暂时下掉此提示
		return null;

		// if (this.state.isClosed) {
		// 	return null;
		// }

		// return (
		// 	<PageTitle>
		// 		<div className="tip-info">
		// 			为了保障您的账号安全，异地登录消息通知将默认开启，发生异地登录行为时将以短信、邮件方式通知您。您还可以
		// 			<div
		// 				className="tc-text-tips-wrap"
		// 				onMouseLeave={() => {
		// 					this.setState({ showBubble: false });
		// 				}}
		// 				onMouseEnter={() => {
		// 					this.setState({ showBubble: true });
		// 				}}
		// 			>
		// 				<span>开启微信</span>
		// 				<div
		// 					style={{
		// 						top: '20px',
		// 						right: '-76px',
		// 						left: 'auto',
		// 						width: '200px',
		// 						display: this.state.showBubble ? '' : 'none',
		// 					}}
		// 					className="tc-15-bubble  tc-15-bubble-top"
		// 				>
		// 					<div className="tc-15-bubble-inner">
		// 						<div className="qc-wech at-scan-img">
		// 							<img
		// 								style={{ width: '176px' }}
		// 								src={this.props.codeUrl}
		// 								alt="微信扫一__mark__扫，手机管理资源"
		// 							/>
		// 						</div>
		// 						<div className="qc-wechat-scan-text">微信扫一__mark__扫，手机管理资源</div>
		// 					</div>
		// 				</div>
		// 			</div>
		// 			接收异地登录通知。
		// 		</div>
		// 		<a
		// 			href="javascript:;"
		// 			title="关闭"
		// 			className="notice-btn-close"
		// 			onClick={() => {
		// 				this.setState({ isClosed: true });
		// 			}}
		// 		>
		// 			关闭
		// 		</a>
		// 	</PageTitle>
		// );
	}
}

// 安全邮箱__mark__、手机和联系邮箱__mark__、手机不一__mark__致提示
function PhoneOrMailTpl(props) {
	const history = useHistory();
	return (
		<Alert type="warning">
			<Trans>
				请注意您的安全设置__mark__方式（手机/邮箱）与联系方式不一__mark__致，为保护您的账号安全，避免消息遗漏造成的损失，请您再次确认联系方式是否可用，
				<Text>
					<a
						href="javascript:;"
						onClick={() => {
							history.push(`/cam/user/${props.userInfo.uin}?type=uin`);
						}}
					>
						点此修改__mark__联系方式
					</a>
					。
				</Text>
			</Trans>
		</Alert>
	);
}

export const TYPE = {
	empty: 'empty',
	ownerTpl: 'ownerTpl',
	subuserTpl: 'subuserTpl',
	loginExceptionTpl: 'loginExceptionTpl',
	focusMPTpl: 'focusMPTpl',
	phoneOrMailTpl: 'phoneOrMailTpl',
};

export class TopTips extends React.Component {
	render() {
		const { type } = this.props;
		switch (type) {
			case 'ownerTpl':
				return <OwnerDefaultTips {...this.props}></OwnerDefaultTips>;
			case 'subuserTpl':
				return <SubaccountTips {...this.props}></SubaccountTips>;
			case 'loginExceptionTpl':
				return <LoginExceptionTpl {...this.props}></LoginExceptionTpl>;
			case 'focusMPTpl':
				return <MpTpl {...this.props}></MpTpl>;
			case 'phoneOrMailTpl':
				return <PhoneOrMailTpl {...this.props}></PhoneOrMailTpl>;
			default:
				return null;
		}
	}
}


import _ from 'underscore';

import { getReducers, makeReducer, registerReducer } from './helper';

const commonReducers = [
    'safeAuthFlag',
    'securityInfo',
    'tokenInfo',
    'userInfo'
];

_.map(commonReducers, (field) => {
    const action = 'update' + field.replace(/^./, (start) => {return start.toUpperCase()});
    registerReducer(action, makeReducer(field));
});

export const reducer = (state, action) => {
    const reducer = getReducers();
    if (reducer[action.type]) {
        return reducer[action.type](state, action);
    } else {
        console.warn('reducer not found ' + action.type);
        return state;
    }
}

export function getInitState() {
	return {
		router: null,
		showGuide: false,
		position: 0,
		lang: 'zh',
		whiteList: {},
		dialogInfo: {
			visible: false,
		},
		userInfo: {},

		securityInfo: {},
		tokenInfo: {},
		safeAuthFlag: {},
		loginExceptionInfo: {},
	};
}
export let state = getInitState();

import { reducer } from '../reducer';
import { createStore } from 'redux';
import { state } from '../state';
export let store = createStore(reducer, state);


import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import { Modal } from '@tea/component/modal';
import { Stepper } from '@tea/component/stepper';
import { StepBasic } from './StepBasic';
import { StepDetect } from './StepDetect';

const Steps = [{ id: 'basic', label: '填写操作人信息' }, { id: 'detect', label: '进行人脸识别' }];

export function DetectModal(props) {
	const { onSuccess, onCancel, ...modalProps } = props;
	const [current, setCurrent] = useState('basic');
	const [detectInfo, setDetectInfo] = useState(null);
	const [visible, setVisible] = useState(false);

	// 渲染之后，马上显示
	useEffect(() => setVisible(true), []);

	return (
		<Modal
			{...modalProps}
			visible={visible}
			caption="身份验证"
			onClose={() => {
				setVisible(false);
				onCancel();
			}}
		>
			<Modal.Body>
				<div style={{ margin: '-10px 0' }}>
					<Stepper steps={Steps} current={current} />
				</div>
				<hr />
				{current === 'basic' && (
					<StepBasic
						initialValues={detectInfo || {}}
						onNext={detectInfo => {
							setDetectInfo(detectInfo);
							setCurrent('detect');
						}}
					/>
				)}
				{current === 'detect' && (
					<StepDetect
						detectInfo={detectInfo}
						onPrev={() => setCurrent('basic')}
						onNext={() => {
							setVisible(false);
							onSuccess();
						}}
					/>
				)}
			</Modal.Body>
		</Modal>
	);
}

export function detect(options) {
	return new Promise(resolve => {
		const el = document.createElement('div');
		ReactDOM.render(
			<DetectModal
				{...options}
				onSuccess={() => resolve(true)}
				onCancel={() => resolve(false)}
				onExited={() => {
					ReactDOM.unmountComponentAtNode(el);
				}}
			/>,
			el,
		);
	});
}

DetectModal.detect = detect;

export * from './DetectModal';
import React from 'react';
import { app } from '@tea/app';
import { Form as FinalForm, Field } from 'react-final-form';
import { Alert } from '@tea/component/alert';
import { Button } from '@tea/component/button';
import { Form } from '@tea/component/form';
import { Input } from '@tea/component/input';
import { Modal } from '@tea/component/modal';
import { getStatusAndMessage } from '@src/utils';
import { ValidateRules } from '@src/instances/validate-rules';
import { authService } from '@src/services';

export function StepBasic({ initialValues, onNext }) {
	async function handleSubmit(values) {
		try {
			const result = await authService.createAuthDetectToken({
				name: values.name,
				idcard: values.idcard,
			});
			onNext({
				...values,
				detectToken: result.detectToken,
			});
		} catch (e) {
			if (e.code === 'LimitExceeded.DetectAuth') {
				app.tips.error('当前身份可验证的账号已达到上限，请更换身份信息进行验证。');
			} else {
				app.tips.error('创建核身凭据失败，请稍后重试');
			}
		}
	}

	return (
		<FinalForm onSubmit={handleSubmit}>
			{({ handleSubmit, submitting }) => (
				<>
					<Alert type="warning">系统检测该账号需验证操作人身份，请完成验证以继续实名</Alert>
					<Form>
						<Field
							name="name"
							initialValue={initialValues.name || ''}
							parse={value => (value ? value.trim() : '')}
							validate={value => {
								if (!value) {
									return '姓名不能为空__mark__';
								}
								return ValidateRules['personal-name-mainland'].pattern.test(value)
									? undefined
									: '请输入合法名称';
							}}
						>
							{({ input, meta }) => (
								<Form.Item label="姓名" showStatusIcon={false} {...getStatusAndMessage(meta)}>
									<Input size="l" placeholder="请填写身份证上的真实姓名" {...input} />
								</Form.Item>
							)}
						</Field>
						<Field
							name="idcard"
							initialValue={initialValues.idcard || ''}
							parse={value => value && value.trim()}
							validate={value =>
								new Promise(resolve => {
									if (!value) {
										return resolve('身份证号码不能为空__mark__');
									}
									ValidateRules['idcard-mainland'].validator(null, value, resolve);
								})
							}
						>
							{({ input, meta }) => (
								<Form.Item label="身份证" showStatusIcon={false} {...getStatusAndMessage(meta)}>
									<Input size="l" placeholder="请填写18位二__mark__代身份证号码" {...input} />
								</Form.Item>
							)}
						</Field>
					</Form>
					<Modal.Footer>
						<Button type="primary" loading={submitting} onClick={() => handleSubmit()}>
							下一步__mark__
						</Button>
					</Modal.Footer>
				</>
			)}
		</FinalForm>
	);
}

import React from 'react';
import { app } from '@tea/app';
import { Modal } from '@tea/component/modal';
import { DetectQRCode } from '../DetectQRCode';
import { Button } from '@tencent/tea-component';
import { authService } from '@src/services';

export function StepDetect({ detectInfo, onPrev, onNext }) {
	return (
		<div style={{ textAlign: 'center' }}>
			<DetectQRCode
				name={detectInfo.name}
				fetchApi={() =>
					authService
						.createAuthDetectToken({
							name: detectInfo.name,
							idcard: detectInfo.idcard,
						})
						.catch(e => {
							if (e.code === 'LimitExceeded.DetectAuth') {
								app.tips.error(
									'当前身份可验证的账号已达到上限，请返回__mark__上一步__mark__更换身份信息进行验证。',
								);
							} else {
								app.tips.error('创建核身凭据失败，请稍后重试');
							}
							throw e;
						})
				}
				pollingApi={result =>
					authService.getAuthDetectTokenState({ detectToken: result.detectToken })
				}
				onStateChange={onNext}
				bordered={false}
			/>
			<Modal.Footer>
				<Button onClick={onPrev}>返回__mark__修改__mark__个人信息</Button>
			</Modal.Footer>
		</div>
	);
}

import React, { useContext, useEffect, useState, useCallback } from 'react';
import { app, useHistory } from '@tea/app';
import { Button } from '@tea/component/button';
import { Modal } from '@tea/component/modal';
import { Error } from '../../../_shared/components';
import { SessionContext } from '@src/decorators';
import {
	INTERNATIONAL_CREDIT_CARD,
	TENPAY_AUTH_MASKED_WHITELIST,
	TENPAY_AUTH_FULL_MASKED_WHITELIST,
} from '@src/instances/whitelist';
import { useSelector, useDispatch } from 'react-redux';
import { AuthState, AuthMethod, ModifyState } from '@src/instances/auth';
import { CompleteProfileModal } from './CompleteProfileModal';

export const BrokenLevel = {
	/** 完整 */
	None: 0,
	/** 部分打码 */
	Low: 1,
	/** 完全打码 */
	High: 2,
};

export const AuthContext = React.createContext({
	brokenProfileLevel: BrokenLevel.None,
	completeBrokenProfile: () => {},
});

export const WorkOrderLink =
	'/workorder/category?level1_id=1&level2_id=41&source=0&data_title=账号中心&step=1';

export function AuthContextProvider({ children }) {
	const history = useHistory();
	const { authInfo } = useSelector(state => state.auth);
	const {
		auth: { updateAuthInfo, reset },
	} = useDispatch();
	const { isOwner } = useContext(SessionContext);
	const [brokenProfileLevel, setBrokenProfileLevel] = useState(BrokenLevel.None);
	const [completeProfileModalVisible, setCompleteProfileModalVisible] = useState(false);

	// unmount 时清理数据
	useEffect(() => {
		return () => reset();
	}, []);

	useEffect(() => {
		if (!authInfo) {
			return;
		}
		/**
		 * 查询是否是存量国际信用卡认证用户
		 * 如果是，则需要显示阻断弹窗
		 */
		checkCreditCardAuthUser();

		/**
		 * 查询是否实名信息__mark__不完整（主要是财付通认证）
		 * 如果是，则需要显示阻断弹窗
		 */
		checkBrokenProfileUser();
	}, [authInfo]);

	const completeBrokenProfile = useCallback(() => {
		if (brokenProfileLevel !== BrokenLevel.None) {
			setCompleteProfileModalVisible(true);
			return;
		}
	}, [brokenProfileLevel]);

	useEffect(() => {
		if (brokenProfileLevel !== BrokenLevel.None) {
			completeBrokenProfile();
		}
	}, [brokenProfileLevel]);

	/**
	 * 非主账号__mark__拦截
	 */
	if (!isOwner) {
		return <Error message="协作者__mark__或子账号无权限查看实名认证__mark__信息" />;
	}

	return (
		<AuthContext.Provider value={{ brokenProfileLevel, completeBrokenProfile }}>
			{children}
			{brokenProfileLevel !== BrokenLevel.None && (
				<CompleteProfileModal
					visible={completeProfileModalVisible}
					name={authInfo.name}
					idcard={authInfo.idcard}
					onComplete={({ name, idcard }) => {
						// 直接重刷，防止控制台状态缓存
						location.reload();

						// @deprecated
						// setBrokenProfileLevel(0);
						// setCompleteProfileModalVisible(false);
						// updateAuthInfo({ name, idcard, brokenProfile: false });
					}}
					onClose={() => setCompleteProfileModalVisible(false)}
				></CompleteProfileModal>
			)}
		</AuthContext.Provider>
	);

	async function checkCreditCardAuthUser() {
		if (location.pathname !== '/developer/auth') {
			return;
		}

		if (
			!isOwner ||
			!authInfo ||
			authInfo.authState !== AuthState.SUCC ||
			authInfo.authMethod !== AuthMethod.CreditCard
		) {
			return;
		}

		let match = true;

		try {
			match = Boolean(await app.user.checkWhitelist(INTERNATIONAL_CREDIT_CARD));
		} catch (e) {
			return;
		}

		if (!match) {
			return;
		}

		Modal.alert({
			type: 'error',
			message: '实名认证__mark__信息补充提醒',
			description:
				'当前账号实名信息__mark__不完整，请提交__mark__工单补充资料。个人用户请提供护照__mark__首页和护照__mark__号，企业用户请提供营业执照。',
			buttons: [
				<Button type="primary" onClick={() => (location.href = WorkOrderLink)}>
					提交__mark__工单
				</Button>,
				<Button
					onClick={() => {
						const referrer = document.referrer;
						const current = location.href.split('?')[0];

						// 跳回原来页面
						if (referrer !== current) {
							location.href = referrer;
						} else {
							location.href = '/';
						}
					}}
				>
					取消__mark__
				</Button>,
			],
		});
	}

	async function checkBrokenProfileUser() {
		if (location.pathname !== '/developer/auth') {
			return;
		}

		if (
			!isOwner ||
			!authInfo ||
			authInfo.authState !== AuthState.SUCC ||
			// 修改__mark__中不查询
			authInfo.modifyState === ModifyState.STAGE ||
			!authInfo.brokenProfile
		) {
			return;
		}

		let brokenLevel = BrokenLevel.None;

		try {
			const results = await app.user.checkWhitelistBatch([
				TENPAY_AUTH_MASKED_WHITELIST,
				TENPAY_AUTH_FULL_MASKED_WHITELIST,
			]);

			if (results[TENPAY_AUTH_MASKED_WHITELIST]) {
				brokenLevel = BrokenLevel.Low;
			} else if (results[TENPAY_AUTH_FULL_MASKED_WHITELIST]) {
				brokenLevel = BrokenLevel.High;
			}

			setBrokenProfileLevel(brokenLevel);
		} catch (_) {
			/** noop */
		}
	}
}

import React from 'react';
import { Link } from 'react-router-dom';
import { Form as FinalForm, Field } from 'react-final-form';
import { Modal, Form, Text, FormAction, Button } from '@tea/component';
import { Input } from '@src/components';
import { ValidateRules, validateIDCard } from '@src/instances/validate-rules';
import { getStatusAndMessage } from '@src/utils';
import { authService } from '@src/services';
import { app, useHistory } from '@tencent/tea-app';

export const CompleteProfileModal = ({ visible, name, idcard, onComplete, onClose }) => {
	const history = useHistory();
	// 基准信息如果为空或全打码，则当作不存在处理
	const baseName = /^\**$/.test(name) ? '' : name;
	const baseIdcard = /^\**$/.test(idcard) ? '' : idcard;

	return (
		<Modal caption="完善实名信息__mark__" visible={visible} onClose={onClose} disableEscape>
			<p style={{ marginTop: -8, marginBottom: 8 }}>
				请补充
				{baseName && (
					<Text theme="warning" className="tea-ml-1n tea-mr-1n">
						{baseName}
					</Text>
				)}
				本人的身份信息。若账号实名需要变更，请
				<a
					onClick={() => {
						onClose();
						history.push('/developer/auth/modify');
					}}
					className="tea-mr-1n tea-ml-1n"
				>
					修改__mark__实名
				</a>
			</p>
			<FinalForm
				onSubmit={handleSubmit}
				validate={handleValidate}
				render={({ handleSubmit, submitting }) => {
					return (
						<>
							<Form>
								<Field
									name="name"
									defaultValue={baseName}
									parse={v => String(v).trim()}
									render={({ input, meta }) => (
										<Form.Item label="真实姓名" {...getStatusAndMessage(meta)} align="middle">
											<Input {...input} placeholder="请填写身份证上的真实姓名"></Input>
										</Form.Item>
									)}
								/>
								<Field
									name="idcard"
									defaultValue={baseIdcard}
									parse={v => String(v).trim()}
									render={({ input, meta }) => (
										<Form.Item label="身份证号" {...getStatusAndMessage(meta)} align="middle">
											<Input {...input} placeholder="请填写18位二__mark__代身份证号码"></Input>
										</Form.Item>
									)}
								/>
							</Form>
							<Modal.Footer>
								<Button type="primary" loading={submitting} onClick={() => handleSubmit()}>
									提交__mark__信息
								</Button>
								<Button onClick={onClose}>取消__mark__</Button>
							</Modal.Footer>
						</>
					);
				}}
			/>
		</Modal>
	);

	function handleValidate(values) {
		// 财付通异常数据可能含打码或为空,为空则不作模式校验
		const NamePattern = baseName ? new RegExp(`^${baseName.replace(/\*+/g, '\\S+')}$`) : null;
		const IDCardPattern = baseIdcard ? new RegExp(`^${baseIdcard.replace(/\*+/g, '\\S+')}$`) : null;
		const errors = {};

		if (!values.name) {
			Object.assign(errors, { name: '姓名不能为空__mark__' });
		} else if (/\*/.test(values.name)) {
			Object.assign(errors, { name: '请补充姓名信息' });
		} else if (!ValidateRules['personal-name-mainland'].pattern.test(values.name)) {
			Object.assign(errors, { name: '请输入合法姓名' });
		} else if (NamePattern && !NamePattern.test(values.name)) {
			Object.assign(errors, { name: '姓名与原身份不匹配，请核实输入' });
		}

		if (!values.idcard) {
			Object.assign(errors, { idcard: '身份证不能为空__mark__' });
		} else if (/\*/.test(values.idcard)) {
			Object.assign(errors, { idcard: '请补充身份证信息' });
		} else if (!validateIDCard(values.idcard)) {
			Object.assign(errors, { idcard: '请核实身份证号码' });
		} else if (IDCardPattern && !IDCardPattern.test(values.idcard)) {
			Object.assign(errors, { idcard: '身份与原身份不匹配，请核实输入' });
		}

		return errors;
	}

	async function handleSubmit(values) {
		try {
			await authService.completeBrokenProfile({ name: values.name, idcard: values.idcard });
			app.tips.success('完善成功，即将刷新页面...');
			onComplete({ ...values });
		} catch (e) {
			if (e.code === 'ResourceNotFound.AuthInfoNotExist') {
				app.tips.error('实名信息__mark__已完善，无须重新完善，请刷新页面');
			} else if (e.code === 'InvalidParameter.AuthInfoNotMatch') {
				app.tips.error('实名信息__mark__验证不通过，请核实信息后再次尝试或提交__mark__工单');
			} else {
				app.tips.error('实名信息__mark__完善失败，请稍后刷新并重试。若问题无法解决请提交__mark__工单');
				console.error(e);
			}
		}
	}
};

import React, { Component, useState } from 'react';
import { useDispatch } from 'react-redux';
import { Alert } from '@tea/component/alert';
import { Button } from '@tea/component/button';
import { Panel, Layout } from '@src/components';
import { AuthScene, DocCNAuthGuide } from '@src/instances/auth';
import { useHistory } from '@tencent/tea-app';
import { List } from '@tea/component/list';

export function ChooseType() {
	const history = useHistory();
	const {
		auth: { switchScene },
	} = useDispatch();

	return (
		<Layout>
			<Layout.Header title="选择认证类型__mark__" onBack={() => history.push('/developer')} />
			<Layout.Body>
				<Alert type="error">
					若后续需要申请 ICP 备案，请确保实名认证__mark__名称与备案主体名称一__mark__致，否则将无法申请 ICP 备案
				</Alert>
				<Panel>
					<div className="edit-auth-type">
						<div className="edit-auth-type-tit">
							<h1>选择认证类型__mark__</h1>
							<div className="edit-auth-type-des">
								实名认证__mark__决定了账号归属，为了您的账号安全，请根据实际情况进行实名认证__mark__
							</div>
						</div>
						<div className="edit-auth-type-list">
							<div className="edit-auth-type-item">
								<div className="edit-auth-type-icon">
									<i className="icon-auth-type-c"></i>
								</div>
								<div className="edit-auth-type-item-tit">个人认证__mark__</div>
								<div className="edit-auth-type-item-txt">
									<List type="bullet">
										<List.Item>适用个人用户，账号归属于个人</List.Item>
										<List.Item>免费体验云产品15天</List.Item>
										<List.Item>不支持开增值税专用发票</List.Item>
									</List>
								</div>
								<div className="edit-auth-type-item-btn">
									<Button
										type="primary"
										onClick={() =>
											switchScene({
												scene: AuthScene.AuthPersonal,
												resetFlow: true,
											})
										}
									>
										开始认证__mark__
									</Button>
								</div>
							</div>
							<div className="edit-auth-type-item">
								<div className="edit-auth-type-icon">
									<i className="icon-auth-type-b"></i>
								</div>
								<div className="edit-auth-type-item-tit">企业认证__mark__</div>
								<div className="edit-auth-type-item-txt">
									<List type="bullet">
										<List.Item>适用企业、政府、事业单位、学校、组织等，账号归属于企业</List.Item>
										<List.Item>免费体验云产品最长6个月</List.Item>
										<List.Item>可享受企业专享活动，云产品低至2.5折</List.Item>
									</List>
								</div>
								<div className="edit-auth-type-item-btn">
									<Button
										type="primary"
										onClick={() =>
											switchScene({
												scene: AuthScene.AuthEnterprise,
												resetFlow: true,
											})
										}
									>
										开始认证__mark__
									</Button>
								</div>
							</div>
						</div>
						<div className="edit-auth-type-ft">
							若您有任何问题，可查看{' '}
							<a href={`https://${window.QCMAIN_HOST}/document/product/378/3629`} target="_blank">
								实名认证__mark__指引
							</a>
						</div>
					</div>
				</Panel>
			</Layout.Body>
		</Layout>
	);
}

export * from './ChooseType';
import React, { useMemo } from 'react';
import { useHistory } from '@tea/app';
import { useSelector, useDispatch } from 'react-redux';
import { Alert } from '@tea/component/alert';
import { Card } from '@tea/component/card';
import { Text } from '@tea/component/text';
import { Layout } from '@tea/component/layout';
import { Stepper } from '@tea/component/stepper';
import { useFlow } from '@src/hooks/useFlow';
import { EnterpriseAuthFlow } from '@src/instances/auth/flow';
import { AuthStep, AuthScene, convertEnterpriseStagedDataToStepData } from '@src/instances/auth';
import { registry } from '../../steps';
import { StepController } from '../../components/StepController';
import { intersperse } from '@src/utils';

const { Body, Content } = Layout;

export function Enterprise() {
	const history = useHistory();
	const {
		auth: { switchScene, loadMain },
	} = useDispatch();
	const { sceneData } = useSelector(state => state.auth);
	const stagedStepData = useMemo(() => {
		return convertEnterpriseStagedDataToStepData(sceneData);
	}, [sceneData]);
	const { current, steps, stepData, actions } = useFlow({
		flow: EnterpriseAuthFlow,
		data: stagedStepData,
		onBack: () => switchScene({ scene: AuthScene.ChooseAuthType }),
		onDone: () => loadMain(),
	});
	const switchToPersonal = () =>
		switchScene({
			scene: AuthScene.AuthPersonal,
		});

	function renderOperation(flag) {
		const opRender = op => {
			switch (op) {
				default:
					return null;
				case 'restart':
					return (
						<a key={op} onClick={actions.restart} className="tea-ml-1n tea-mr-1n">
							重新认证__mark__
						</a>
					);
				case 'switch-to-person':
					return (
						<a key={op} onClick={switchToPersonal} className="tea-ml-1n tea-mr-1n">
							切换为个人实名认证__mark__
						</a>
					);
			}
		};
		const operation = intersperse(flag.split('|').map(opRender), <span>|</span>);
		return operation;
	}

	function renderAlert() {
		if (current === AuthStep['submit-enterprise-bank-info']) {
			// @ts-ignore
			const { bankAccount } = stepData[current] || {};
			const hasFailed = bankAccount && bankAccount.bankVerifyCount <= 0;
			const hasExpired = bankAccount && bankAccount.bankVerifyExpired;

			if (hasExpired) {
				return (
					<Alert type="error">
						由于您长时间未操作，本次验证未通过__mark__，您可以
						{renderOperation('restart|switch-to-person')}
					</Alert>
				);
			}
			if (hasFailed) {
				return (
					<Alert type="error">
						金额输入错误超过<Text theme="warning">2</Text>
						次，验证未通过__mark__，您可以
						{renderOperation('restart|switch-to-person')}
					</Alert>
				);
			}
		} else if (AuthStep['submit-enterprise-topup-info']) {
			// @ts-ignore
			const { bankReceiver } = stepData[current] || {};

			if (bankReceiver && bankReceiver.topupExpired) {
				return (
					<Alert type="error">
						由于您未成功完成验证，实名认证__mark__失败，您可以
						{renderOperation('restart|switch-to-person')}
					</Alert>
				);
			}
		}
		return null;
	}

	return (
		<Layout>
			<Body>
				<Content>
					<Content.Header
						title="企业实名认证__mark__"
						showBackButton
						onBackButtonClick={() => history.push('/developer')}
					/>
					<Content.Body>
						{renderAlert()}
						<Card>
							<Card.Body>
								<Stepper current={current} steps={steps} />
								<hr />
								<StepController
									flowName={EnterpriseAuthFlow.name}
									current={current}
									data={stepData}
									actions={actions}
									registry={registry}
								/>
							</Card.Body>
						</Card>
					</Content.Body>
				</Content>
			</Body>
		</Layout>
	);
}

export * from './Enterprise';
export * from './ModifyIdentity';
export * from './ModifyIdentityGuide';

import React, { useMemo } from 'react';
import { useSelector } from 'react-redux';
import { useHistory } from '@tea/app';
import { Card } from '@tea/component/card';
import { Layout } from '@tea/component/layout';
import { Stepper } from '@tea/component/stepper';
import { useFlow } from '@src/hooks/useFlow';
import { ApplyModifyAufhFlow, SubmitModifyAuthFlow } from '@src/instances/auth/flow';
import { StepController } from '../../components/StepController';
import { registry } from '../../steps';
import {
	AuthStep,
	convertApprovalFlowToStepData,
	Switch_PersonalSelfModifyFlow,
} from '@src/instances/auth';

const { Body, Content } = Layout;

export function ModifyIdentity() {
	const history = useHistory();
	const { sceneData } = useSelector(state => state.auth);
	const stagedStepData = useMemo(() => {
		return convertApprovalFlowToStepData(sceneData);
	}, []);
	const { current, steps, stepData, actions } = useFlow({
		flow: ApplyModifyAufhFlow,
		data: stagedStepData,
	});

	return (
		<Layout>
			<Body>
				<Content>
					<Content.Header
						title="修改__mark__实名认证__mark__"
						showBackButton
						onBackButtonClick={() => {
							// 作为灰度的标志位
							if (Switch_PersonalSelfModifyFlow) {
								history.push('/developer/auth');
							} else {
								if (current === AuthStep['wait-for-audit']) {
									history.push('/developer');
								} else {
									history.push('/developer/auth');
								}
							}
						}}
					/>
					<Content.Body>
						<Card>
							<Card.Body>
								{current !== AuthStep['wait-for-audit'] && (
									<>
										<Stepper current={current} steps={steps} />
										<hr />
									</>
								)}
								<StepController
									flowName={SubmitModifyAuthFlow.name}
									current={current}
									data={stepData}
									actions={actions}
									registry={registry}
								/>
							</Card.Body>
						</Card>
					</Content.Body>
				</Content>
			</Body>
		</Layout>
	);
}

import React, { useState, Fragment } from 'react';
import { useHistory } from '@tea/app';
import { Check, Button, Card, Layout } from '@tea/component';
import {
	AuthType,
	AuthScene,
	AcceptModidfyIdentityAgreement,
	ModifyIdentityAgreement,
} from '@src/instances/auth';
import { useSelector, useDispatch } from 'react-redux';

const { Body, Content } = Layout;

export function ModifyIdentityGuide() {
	const history = useHistory();
	const originalAuthInfo = useSelector(state => state.auth.authInfo);
	const {
		auth: { switchScene },
	} = useDispatch();
	const { authType } = originalAuthInfo;

	return (
		<Layout>
			<Body>
				<Content>
					<Content.Header
						title="修改__mark__实名认证__mark__"
						showBackButton
						onBackButtonClick={() => history.push('/developer/auth')}
					/>
					<Content.Body>
						<Card>
							<Card.Body className="modify-step-page">
								<div className="auth-modify-step-panel">
									{authType === AuthType.Personal && <PersonalGuide switchScene={switchScene} />}
									{authType === AuthType.Enterprise && (
										<EnterpriseGuide switchScene={switchScene} />
									)}
								</div>
							</Card.Body>
						</Card>
					</Content.Body>
				</Content>
			</Body>
		</Layout>
	);
}

function PersonalGuide({ switchScene }) {
	const [agree, setAgree] = useState(false);

	return (
		<Fragment>
			<div className="modify-step-hd">
				<div className="modify-step-tit">修改__mark__个人实名认证__mark__</div>
				<div className="modify-step-des">
					请根据以下步骤修改__mark__实名认证__mark__，审核通过后即可变更实名信息__mark__。若有任何疑问，请查阅
					<a href={AcceptModidfyIdentityAgreement} target="_blank">
						《修改__mark__实名认证__mark__指引》
					</a>
				</div>
			</div>
			<div className="modify-step-bd">
				<div className="modify-step-list">
					<div className="modify-step-item">
						<div className="modify-step-item-tit">
							<span className="tc-15-step-num">1</span>选择变更类型
						</div>
						<div className="modify-step-item-text">您可以选择变更个人主体或修改__mark__为企业认证__mark__</div>
					</div>
					<div className="modify-step-item">
						<div className="modify-step-item-tit">
							<span className="tc-15-step-num">2</span>提交__mark__证明材料
						</div>
						<div className="modify-step-item-text">
							需提供实名主体变更前后的身份证明材料，以及实名认证__mark__变更申请表
						</div>
					</div>
					<div className="modify-step-item">
						<div className="modify-step-item-tit">
							<span className="tc-15-step-num">3</span>实名信息__mark__审核
						</div>
						<div className="modify-step-item-text">
							审核期间您可以撤销申请。审核结果将于3个工作日反馈，通过后将自动更新实名信息__mark__
						</div>
					</div>
				</div>
			</div>
			<div className="modify-step-ft">
				<p className="form-ctrl-label">
					<Check type="checkbox" value={agree} onChange={setAgree}>
						我已阅读并同意
						<a href={ModifyIdentityAgreement} target="_blank">
							《实名认证__mark__主体变更协议》
						</a>
					</Check>
				</p>
				<div className="step-btn-wrap">
					<Button
						type="primary"
						disabled={!agree}
						onClick={() => switchScene({ scene: AuthScene.ModifyIdentity })}
					>
						开始修改__mark__
					</Button>
				</div>
			</div>
		</Fragment>
	);
}

function EnterpriseGuide({ switchScene }) {
	return (
		<Fragment>
			<div className="modify-step-hd">
				<div className="modify-step-tit">修改__mark__企业实名认证__mark__</div>
				<div className="modify-step-des">
					请根据以下步骤修改__mark__实名认证__mark__，审核通过后即可变更实名信息__mark__。若有任何疑问，请查阅
					<a href={AcceptModidfyIdentityAgreement} target="_blank">
						《修改__mark__实名认证__mark__指引》
					</a>
				</div>
			</div>
			<div className="modify-step-bd">
				<div className="modify-step-list">
					<div className="modify-step-item">
						<div className="modify-step-item-tit">
							<span className="tc-15-step-num">1</span>选择变更类型
						</div>
						<div className="modify-step-item-text">
							您可以选择变更企业主体、企业名称__mark__或修改__mark__为个人认证__mark__
						</div>
					</div>
					<div className="modify-step-item">
						<div className="modify-step-item-tit">
							<span className="tc-15-step-num">2</span>提交__mark__证明材料
						</div>
						<div className="modify-step-item-text">
							需提供实名主体变更前后的身份证明材料，以及实名认证__mark__变更申请表
						</div>
					</div>
					<div className="modify-step-item">
						<div className="modify-step-item-tit">
							<span className="tc-15-step-num">3</span>实名信息__mark__审核
						</div>
						<div className="modify-step-item-text">
							审核期间您可以撤销申请。审核结果将于3个工作日反馈，通过后将自动更新实名信息__mark__
						</div>
					</div>
				</div>
			</div>
			<div className="modify-step-ft">
				<div className="step-btn-wrap">
					<Button type="primary" onClick={() => switchScene({ scene: AuthScene.ModifyIdentity })}>
						开始修改__mark__
					</Button>
				</div>
			</div>
		</Fragment>
	);
}

export * from './ModifyPersonalIdentity';
export * from './ModifyPersonalIdentityGuide';

import React, { useMemo, useEffect, useState, useContext } from 'react';
import objectPath from 'object-path';
import { useHistory } from '@tea/app';
import { useSelector } from 'react-redux';
import { Alert } from '@tea/component/alert';
import { Card } from '@tea/component/card';
import { Button } from '@tea/component/button';
import { Icon } from '@tea/component/icon';
import { Text } from '@tea/component/text';
import { Layout } from '@tea/component/layout';
import { Modal } from '@tea/component/modal';
import { Stepper } from '@tea/component/stepper';
import { useFlow } from '@src/hooks/useFlow';
import { SubmitModifyAuthFlow, Flows } from '@src/instances/auth/flow';
import {
	AuthStep,
	AuthType,
	convertEnterpriseStagedDataToStepData,
	convertPersonalStagedDataToStepData,
} from '@src/instances/auth';
import { registry } from '../../steps';
import { StepController } from '../../components/StepController';
import { useRevoke } from '../../hooks/useRevoke';
import { intersperse } from '@src/utils';
import { useInterval } from '@src/hooks';
import { getModifyDetectToken } from '../../helpers/accessModifyDetectToken';
import { SessionContext } from '@src/decorators';

const { Body, Content } = Layout;

export function ModifyPersonalIdentity() {
	const history = useHistory();
	const { ownerUin } = useContext(SessionContext);
	const { authInfo, sceneData } = useSelector(state => state.auth);
	const stagedStepData = useMemo(() => {
		const data = {};

		Object.assign(
			data,
			sceneData.authType === AuthType.Enterprise
				? convertEnterpriseStagedDataToStepData(sceneData)
				: convertPersonalStagedDataToStepData(sceneData),
		);

		if (Object.entries(data).length) {
			Object.assign(data, {
				[AuthStep['choose-modify-auth-type']]: { authType: sceneData.authType },
			});
		}

		// 如果会话还有人脸核身Token，则直接跳过
		if (getModifyDetectToken(ownerUin)) {
			Object.assign(data, {
				[AuthStep['check-identity']]: {},
			});
		}

		return data;
	}, [sceneData]);
	const { current, steps, stepData, actions } = useFlow({
		flow: SubmitModifyAuthFlow,
		data: stagedStepData,
		onDone: () => {
			history.push('/developer/auth');
		},
	});
	const { loading: revoking, revoke } = useRevoke();
	const [tokenExpired, setTokenExpired] = useState(false);

	const handleRevoke = async (shouldConfirm = false) => {
		if (shouldConfirm) {
			const yes = await Modal.confirm({
				message: '确认撤销修改__mark__实名？',
				description:
					'撤销修改__mark__实名后，您本次提交__mark__的修改__mark__实名申请将失效，实名主体不会发生变更。是否确认撤销修改__mark__实名？',
				okText: '确认撤销',
				cancelText: '取消__mark__',
			});

			if (!yes) {
				return;
			}
		}

		revoke(() => history.push('/developer/auth'));
	};

	const handleRestart = async () => {
		revoke(() => actions.restart());
	};

	function renderOperation(flag) {
		const opRender = op => {
			switch (op) {
				default:
					return null;
				case 'restart':
					return (
						<a key={op} onClick={handleRestart} className="tea-ml-1n tea-mr-1n">
							重新修改__mark__认证
						</a>
					);
				case 'revoke':
					return (
						<a key={op} onClick={() => handleRevoke()} className="tea-ml-1n tea-mr-1n">
							撤销修改__mark__
						</a>
					);
				case 'confirm-revoke':
					return (
						<a key={op} onClick={() => handleRevoke(true)} className="tea-ml-1n tea-mr-1n">
							撤销修改__mark__
						</a>
					);
			}
		};
		const operation = intersperse(flag.split('|').map(opRender), <span>|</span>);
		return revoking ? <Icon className="tea-ml-1n tea-mr-1n" type="loading" /> : operation;
	}

	function renderAlert() {
		if (current === AuthStep['submit-enterprise-bank-info']) {
			// @ts-ignore
			const { bankAccount } = stepData[current] || {};

			if (!bankAccount) {
				return null;
			}

			const hasFailed = bankAccount.bankVerifyCount <= 0;
			const hasExpired = bankAccount.bankVerifyExpired;

			if (hasExpired) {
				return (
					<Alert type="error">
						由于您长时间未操作，本次验证未通过__mark__，您可以
						{renderOperation('restart|revoke')}
					</Alert>
				);
			}
			if (hasFailed) {
				return (
					<Alert type="error">
						金额输入错误超过&nbsp;<Text theme="warning">2</Text>&nbsp;次，验证未通过__mark__，您可以
						{renderOperation('restart|revoke')}
					</Alert>
				);
			}

			return (
				<Alert>
					实名认证__mark__修改__mark__中，您可以
					{renderOperation('confirm-revoke')}
				</Alert>
			);
		} else if (AuthStep['submit-enterprise-topup-info']) {
			// @ts-ignore
			const { bankReceiver } = stepData[current] || {};

			if (!bankReceiver) {
				return null;
			}

			// modifyState 扭转可能会有延时
			if (bankReceiver.topupExpired) {
				return (
					<Alert type="error">
						由于您未成功完成验证，修改__mark__实名认证__mark__失败，您可以
						{renderOperation('restart|revoke')}
					</Alert>
				);
			} else {
				return (
					<Alert>
						实名认证__mark__修改__mark__中，您可以
						{renderOperation('confirm-revoke')}
					</Alert>
				);
			}
		}
	}

	function shouldCheckTokenExpired() {
		if (tokenExpired) {
			return false;
		}
		if (!current) {
			return false;
		}
		if (current === AuthStep['check-identity']) {
			return false;
		}
		if (
			objectPath.get(stepData, `${AuthStep['submit-enterprise-bank-info']}.bankAccount`) ||
			objectPath.get(stepData, `${AuthStep['submit-enterprise-topup-info']}.bankReceiver`)
		) {
			return false;
		}

		return true;
	}

	useInterval(
		() => {
			const token = getModifyDetectToken(ownerUin);

			if (!token && !tokenExpired) {
				setTokenExpired(true);
			}
		},
		shouldCheckTokenExpired() ? 10 * 1000 : null,
	);

	useEffect(() => {
		if (tokenExpired) {
			Modal.error({
				message: '身份验证失效',
				description: '由于您长时间未操作，身份验证已过期，请您重新验证身份。',
				buttons: [
					<Button type="primary" onClick={() => actions.restart()}>
						重新验证
					</Button>,
				],
			});
		}
	}, [tokenExpired]);

	return (
		<Layout>
			<Body>
				<Content>
					<Content.Header
						title="修改__mark__个人实名认证__mark__"
						showBackButton
						onBackButtonClick={() => history.push('/developer/auth')}
					/>
					<Content.Body>
						{renderAlert()}
						<Card>
							<Card.Body>
								<Stepper current={current} steps={steps} />
								<hr />
								<StepController
									flowName={Flows.SubmitModifyAuthFlow}
									current={current}
									data={stepData}
									actions={actions}
									registry={registry}
								/>
							</Card.Body>
						</Card>
					</Content.Body>
				</Content>
			</Body>
		</Layout>
	);
}

import React, { useState } from 'react';
import { useHistory } from '@tea/app';
import { useDispatch } from 'react-redux';
import { Button } from '@tea/component/button';
import { Card } from '@tea/component/card';
import { Check } from '@tea/component/check';
import { Layout } from '@tea/component/layout';
import { Text } from '@tea/component/text';
import {
	AuthScene,
	ModifyIdentityAgreement,
	AcceptModidfyIdentityAgreement,
} from '@src/instances/auth';

const { Body, Content } = Layout;

export function ModifyPersonalIdentityGuide() {
	const history = useHistory();
	const [agree, setAgree] = useState(false);
	const {
		auth: { switchScene },
	} = useDispatch();

	return (
		<Layout className="modify-step-page">
			<Body>
				<Content>
					<Content.Header
						title="修改__mark__个人实名认证__mark__"
						showBackButton
						onBackButtonClick={() => history.push('/developer/auth')}
					/>
					<Content.Body>
						<Card>
							<Card.Body className="auth-modify-step-panel">
								<div className="modify-step-hd">
									<div className="modify-step-tit">修改__mark__个人实名认证__mark__</div>
									<div className="modify-step-des">
										请根据以下步骤修改__mark__实名认证__mark__，审核通过后即可变更实名信息__mark__。若有任何疑问，请查阅
										<a href={AcceptModidfyIdentityAgreement} target="_blank">
											《修改__mark__实名认证__mark__指引》
										</a>
									</div>
								</div>
								<div className="modify-step-bd">
									<div className="modify-step-list">
										<div className="modify-step-item">
											<div className="modify-step-item-tit">
												<span className="tc-15-step-num">1</span>验证身份
											</div>
											<div className="modify-step-item-text">
												当前实名主体需通过人脸识别验证身份
											</div>
										</div>
										<div className="modify-step-item">
											<div className="modify-step-item-tit">
												<span className="tc-15-step-num">2</span>选择变更类型
											</div>
											<div className="modify-step-item-text">人脸识别验证通过后，选择变更类型</div>
										</div>
										<div className="modify-step-item">
											<div className="modify-step-item-tit">
												<span className="tc-15-step-num">3</span>重新认证__mark__
											</div>
											<div className="modify-step-item-text">
												需在<Text theme="warning">1小时内</Text>进行认证，超时将重新验证身份
											</div>
										</div>
									</div>
								</div>
								<div className="modify-step-ft">
									<p className="form-ctrl-label">
										<Check type="checkbox" value={agree} onChange={setAgree}>
											我已阅读并同意
											<a href={ModifyIdentityAgreement} target="_blank">
												《实名认证__mark__主体变更协议》
											</a>
										</Check>
									</p>
									<div className="step-btn-wrap">
										<Button
											type="primary"
											disabled={!agree}
											onClick={() => switchScene({ scene: AuthScene.ModifyPersonalIdentity })}
										>
											开始修改__mark__
										</Button>
									</div>
								</div>
							</Card.Body>
						</Card>
					</Content.Body>
				</Content>
			</Body>
		</Layout>
	);
}

export * from './Personal';
import React, { useMemo } from 'react';
import { useHistory } from '@tea/app';
import { Card } from '@tea/component/card';
import { Layout } from '@tea/component/layout';
import { Stepper } from '@tea/component/stepper';
import { StepController } from '../../components/StepController';
import { useFlow } from '@src/hooks/useFlow';
import { PersonalAuthFlow } from '@src/instances/auth/flow';
import { useSelector, useDispatch } from 'react-redux';
import { convertPersonalStagedDataToStepData, AuthScene, AuthStep } from '@src/instances/auth';
import { registry } from '../../steps';

const { Body, Content } = Layout;

export function Personal() {
	const history = useHistory();
	const { sceneData } = useSelector(state => state.auth);
	const {
		auth: { switchScene, loadMain },
	} = useDispatch();
	const stagedStepData = useMemo(() => {
		return convertPersonalStagedDataToStepData(sceneData);
	}, []);
	const { current, steps, stepData, actions } = useFlow({
		flow: PersonalAuthFlow,
		data: stagedStepData,
		onBack: () => switchScene({ scene: AuthScene.ChooseAuthType }),
		onDone: () => loadMain(),
	});

	return (
		<Layout>
			<Body>
				<Content>
					<Content.Header
						title="个人实名认证__mark__"
						showBackButton
						onBackButtonClick={() => history.push('/developer')}
					/>
					<Content.Body>
						<Card>
							<Card.Body>
								<Stepper current={current} steps={steps} />
								<hr />
								<StepController
									flowName={PersonalAuthFlow.name}
									current={current}
									data={stepData}
									actions={actions}
									registry={registry}
								/>
							</Card.Body>
						</Card>
					</Content.Body>
				</Content>
			</Body>
		</Layout>
	);
}

import React, { Fragment, useState } from 'react';
import { app } from '@tea/app';
import { Icon, Button } from '@tea/component';
import { Form } from '@src/components';

export const editable = ({ label, initialValue, validator, update, format = v => v }) => ele => {
	const [isEdit, setIsEdit] = useState(false);
	const [error, setError] = useState(null);
	const [loading, setLoading] = useState(false);
	const [value, setValue] = useState(initialValue);

	async function handleSubmit() {
		validator(value, async function(error) {
			if (error) {
				setError(true);
				app.tips.error(error);
				return;
			}

			try {
				setLoading(true);
				await update(value);
				setIsEdit(false);
			} catch (e) {
				console.error(e);
			} finally {
				setLoading(false);
			}
		});
	}

	return isEdit ? (
		<Form.Item label={label} validateStatus={error ? 'error' : ''} hideStatusIcon>
			{React.cloneElement(ele, {
				value: value,
				onChange: value => {
					setValue(value);
					setError(null);
				},
			})}
			{loading ? (
				<Icon type="loading" className="ml-10" />
			) : (
				<Fragment>
					<Button type="link" className="tea-ml-2n" onClick={handleSubmit}>
						保存__mark__
					</Button>
					<Button
						type="link"
						className="tea-ml-1n"
						onClick={() => {
							setValue(initialValue);
							setIsEdit(false);
						}}
					>
						取消__mark__
					</Button>
				</Fragment>
			)}
		</Form.Item>
	) : (
		<Form.Pure label={label}>
			{format(initialValue) || '-'}
			<Icon type="pencil" className="ml-10" onClick={() => setIsEdit(true)} />
		</Form.Pure>
	);
};

import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { i18n } from '@tea/app';
import objectPath from 'object-path';
import { Card, Input } from '@tea/component';
import { PBox, Phone, Form } from '@src/components';
import {
	AuthMethodCollection,
	AuthAreaCollection,
	AuthType,
	ModifyState,
} from '@src/instances/auth';
import { ValidateRules } from '@src/instances/validate-rules';
import { ModifyButton } from './ModifyButton';
import { editable } from './editable';

const { t } = i18n;

const EnterpriseCoverUrl =
	'//imgcache.qq.com/open_proj/proj_qcloud_v2/mc_2014/user/auth/css/mod/img/qy.jpg';

export function EnterprisePanel() {
	const authInfo = useSelector(state => state.auth.authInfo);
	const {
		authArea,
		authType,
		modifyState,
		authMethod,
		passTime,
		nextAuthTime,
		name,
		contact,
	} = authInfo;
	const {
		auth: { updateContact },
	} = useDispatch();

	return (
		<Card>
			<Card.Body>
				<div className="auth-status-box">
					<div className="identity-card">
						<img src={EnterpriseCoverUrl} alt="" />
					</div>
					<div className="auth-param-box-wrap ">
						<div className="auth-param-box border-rt">
							<PBox title={t('认证信息')}>
								<PBox.Body>
									<Form>
										<Form.Pure label={t('企业名称__mark__')}>{name}</Form.Pure>
										<Form.Pure label={t('认证地区__mark__')}>
											{AuthAreaCollection.entities[authArea].name}
										</Form.Pure>
										<Form.Pure label={t('认证类型')}>
											{t('企业认证__mark__')}
											{modifyState !== ModifyState.STAGE && modifyState !== ModifyState.FAIL && (
												<ModifyButton
													lastAuthTime={passTime}
													nextAuthTime={nextAuthTime}
													authType={authType}
												/>
											)}
										</Form.Pure>
										<Form.Pure label={t('认证方式')}>
											{objectPath.get(AuthMethodCollection, `entities.${authMethod}.name`, '未知__mark__')}
										</Form.Pure>
									</Form>
								</PBox.Body>
							</PBox>
						</div>
						{authType === AuthType.Enterprise && (
							<div className="auth-param-box">
								<PBox title={t('企业联系人信息')}>
									<PBox.Body>
										<Form>
											{editable({
												label: '真实姓名',
												initialValue: objectPath.get(contact, 'name', ''),
												update: value => updateContact({ name: value }),
												validator: (value, callback) => {
													if (!value) {
														return callback('名字不能为空__mark__');
													}
													if (!ValidateRules['personal-name-mainland'].pattern.test(value)) {
														return callback('请输入正确的姓名');
													}
													callback();
												},
											})(<Input placeholder="请填写身份证上的真实姓名" />)}
											{editable({
												label: '身份证号',
												initialValue: objectPath.get(contact, 'idcard', ''),
												update: value => updateContact({ idcard: value }),
												validator: (value, callback) => {
													if (!value) {
														return '身份证号不能为空__mark__';
													}
													return ValidateRules['idcard-mainland'].validator(null, value, callback);
												},
											})(<Input placeholder="请填写18位二__mark__代身份证号码" />)}
											{editable({
												label: '联系电话',
												initialValue: {
													countryCode: objectPath.get(contact, 'countryCode', 86),
													phoneNumber: objectPath.get(contact, 'phoneNumber', ''),
												},
												format: ({ countryCode, phoneNumber }) =>
													phoneNumber ? `+${countryCode} ${phoneNumber}` : '',
												update: value =>
													updateContact({
														countryCode: value.countryCode,
														phoneNumber: value.phoneNumber,
													}),
												validator: (value, callback) => {
													if (!value) {
														return callback('手机号码__mark__不能为空__mark__');
													}
													return ValidateRules['phone'].validator(null, value, callback);
												},
											})(<Phone placeholder="请填写手机号码__mark__" />)}
										</Form>
									</PBox.Body>
								</PBox>
							</div>
						)}
					</div>
				</div>
			</Card.Body>
		</Card>
	);
}

export * from './Result';
import React, { useState } from 'react';
import { Modal, Icon } from '@tea/component';
import { authService } from '@src/services';
import dateformat from 'dateformat';
import { submitErrorHandler } from '../../helpers';
import { useHistory } from '@tencent/tea-app';
import { AuthType } from '@src/instances/auth';

export function ModifyButton({ lastAuthTime, nextAuthTime, authType }) {
	const history = useHistory();
	const [checking, setChecking] = useState(false);

	async function handleClick() {
		try {
			setChecking(true);
			await authService.checkAuthQualification();
		} catch (e) {
			const { code } = e;

			if (code === 'LimitExceeded.TimeTooShort') {
				// 个人转企业没有时间限制
				if (authType == AuthType.Personal) {
					history.push(`/developer/auth/modify`);
				} else {
					handleTimeTooShort();
				}
			} else {
				submitErrorHandler(e);
			}
			return;
		} finally {
			setChecking(false);
		}

		history.push('/developer/auth/modify');
	}

	function handleTimeTooShort() {
		const pattern = 'yyyy年mm月dd日 HH时MM分';

		let limitTip = (
			<span>30天内仅允许申请/修改__mark__一__mark__次认证信息，您30天内已申请/修改__mark__过一__mark__次，无法继续修改__mark__</span>
		);

		if (lastAuthTime && nextAuthTime) {
			limitTip = (
				<span>
					30天内仅允许申请或重新认证__mark__1次信息，经核实该账号在
					<span className="text-primary"> {dateformat(lastAuthTime, pattern)} </span>
					已有申请认证操作记录，我们建议您
					<span className="text-primary"> {dateformat(nextAuthTime, pattern)} </span>
					之后操作，谢谢！
				</span>
			);
		}

		Modal.alert({
			type: 'error',
			message: '无法修改__mark__',
			description: limitTip,
		});
	}

	return (
		// 固定 80px, 防止切换是布局跳动
		<span style={{ display: 'inline-block', width: 80, marginLeft: 10 }}>
			{checking ? <Icon type="loading" /> : <a onClick={handleClick}>修改__mark__实名认证__mark__</a>}
		</span>
	);
}

import React from 'react';
import { useSelector } from 'react-redux';
import { t } from '@tea/app/i18n';
import objectPath from 'object-path';
import { Card } from '@tea/component';
import { PBox, Form } from '@src/components';
import { AuthMethodCollection, AuthAreaCollection, ModifyState } from '@src/instances/auth';
import { ModifyButton } from './ModifyButton';

const PersonalCoverUrl =
	'//imgcache.qq.com/open_proj/proj_qcloud_v2/mc_2014/user/auth/css/mod/img/sfz.jpg';

export function PersonalPanel() {
	const authInfo = useSelector(state => state.auth.authInfo);
	const {
		authArea,
		authMethod,
		modifyState,
		passTime,
		nextAuthTime,
		name,
		idcard,
		authType,
	} = authInfo;

	return (
		<Card>
			<Card.Body>
				<div className="auth-status-box">
					<div className="identity-card">
						<img src={PersonalCoverUrl} alt="" />
					</div>
					<div className="auth-param-box-wrap">
						<div className="auth-param-box border-rt">
							<PBox title={t('认证信息')}>
								<PBox.Body>
									<Form>
										<Form.Pure label={t('个人名称')}>{name}</Form.Pure>
										<Form.Pure label={t('身份证号')}>{idcard}</Form.Pure>
										<Form.Pure label={t('认证类型')}>
											{t('个人认证__mark__')}
											{modifyState !== ModifyState.STAGE && modifyState !== ModifyState.FAIL && (
												<ModifyButton
													lastAuthTime={passTime}
													nextAuthTime={nextAuthTime}
													authType={authType}
												/>
											)}
										</Form.Pure>
									</Form>
								</PBox.Body>
							</PBox>
						</div>
						<div className="auth-param-box">
							<PBox title={t('认证方式')}>
								<PBox.Body>
									<Form>
										<Form.Pure label={t('认证地区__mark__')}>
											{AuthAreaCollection.entities[authArea].name}
										</Form.Pure>
										<Form.Pure label={t('认证方式')}>
											{objectPath.get(AuthMethodCollection, `entities.${authMethod}.name`, '未知__mark__')}
										</Form.Pure>
									</Form>
								</PBox.Body>
							</PBox>
						</div>
					</div>
				</div>
			</Card.Body>
		</Card>
	);
}

import React, { useState, useEffect, useContext } from 'react';
import { Link } from 'react-router-dom';
import qs from 'query-string';
import { useHistory } from '@tea/app';
import { t } from '@tea/app/i18n';
import cookie from '@src/vendors/cookie';
import { Modal, Layout, Card, Alert, Text } from '@tea/component';
import { AuthType, ActFreeLink, ModifyState } from '@src/instances/auth';
import { commonService } from '@src/services';
import { EnterprisePanel } from './EnterprisePanel';
import { PersonalPanel } from './PersonalPanel';
import { useSelector } from 'react-redux';
import { AuthContext, BrokenLevel } from '../../contexts';

const { Content, Body } = Layout;

// 是否显示过返回__mark__弹窗：一__mark__次页面生命周期只显示一__mark__次
let hasDisplayBack = false;

// 显示返回__mark__弹框
async function showBackModal(backUrl) {
	hasDisplayBack = true;

	const yes = await Modal.confirm({
		message: '认证成功',
		description: '返回__mark__实名认证__mark__流程之前的页面，查看更多__mark__信息。',
		okText: '确认返回__mark__',
		cancelText: '取消__mark__',
	});

	if (yes) {
		// @ts-ignore
		location.href = backUrl;
	}
}

export const Result = () => {
	const history = useHistory();
	const authInfo = useSelector(state => state.auth.authInfo);
	const { authType, isFirstAuth, modifyState, passTime } = authInfo;
	const queryParam = qs.parse(history.location.search);

	useEffect(() => {
		if (hasDisplayBack) {
			return;
		}

		// 是否带了返回__mark__信息
		if (
			queryParam.s_url &&
			/^https?:\/\/([\w-]+?\.)?cloud\.tencent\.com/.test(String(queryParam.s_url))
		) {
			showBackModal(queryParam.s_url);
		}
	}, []);

	return (
		<Layout>
			<Body>
				<Content>
					<Content.Header
						title="认证信息"
						showBackButton
						onBackButtonClick={() => history.push('/developer')}
					></Content.Header>
					<Content.Body>
						<TopBrokenProfileTip modifyState={modifyState} />
						<TopStatusTip
							authType={authType}
							modifyState={modifyState}
							isFirstAuth={isFirstAuth}
							passTime={passTime}
						/>
						{authType === AuthType.Enterprise ? <EnterprisePanel /> : <PersonalPanel />}
						<OperationPanel />
					</Content.Body>
				</Content>
			</Body>
		</Layout>
	);
};

function TopStatusTip({ authType, modifyState, isFirstAuth, passTime }) {
	const HiddenDays = 7 * 24 * 3600 * 1000; // 认证成功 7 天之后不再显示
	// 每次实名成功提示时间应该重新计时，基准使用通过时间
	const cookieName = `hiddenAuthSuccessTip/${passTime.getTime()}`;
	const hiddenFlag = cookie.get(cookieName);
	const hiddenTime = Date.now() - passTime > HiddenDays;
	const [visible, setVisible] = useState(!hiddenTime && !hiddenFlag);

	// 在认证提示有效期内或发生了修改__mark__扭转状态，则不再显示“成功提示条”
	useEffect(() => {
		if ([ModifyState.FAIL, ModifyState.STAGE].includes(modifyState)) {
			if (!hiddenFlag && !hiddenTime) {
				// 设置关闭的 cookie;
				setHiddenFlag();
			}
		}
	}, [modifyState, hiddenFlag, hiddenTime]);

	function setHiddenFlag() {
		try {
			cookie.set(cookieName, '1', {
				path: '/developer',
				expires: new Date(Date.now() + 7 * 24 * 3600 * 1000),
			});
		} catch (e) {
			console.error(e);
		}
	}

	function handleClose() {
		setVisible(false);
		// 设置关闭的 cookie;
		setHiddenFlag();
	}

	if (modifyState === ModifyState.FAIL) {
		return (
			<Alert type="error">
				您提交__mark__的实名认证__mark__变更申请未通过__mark__，可点击
				<Link to="/developer/auth/modify" className="tea-mr-1n tea-ml-1n">
					查看详情
				</Link>
			</Alert>
		);
	} else if (modifyState === ModifyState.STAGE) {
		return (
			<Alert type="info">
				您已提交__mark__实名认证__mark__变更申请，可点击
				<Link to="/developer/auth/modify" className="tea-mr-1n tea-ml-1n">
					查看详情
				</Link>
			</Alert>
		);
	}

	return (
		visible === true && (
			<div className="tc-15-msg succeed">
				<div className="tip-info">
					{authType === AuthType.Personal
						? isFirstAuth
							? t('恭喜您已经完成腾讯云个人实名认证__mark__')
							: t('恭喜您，实名认证__mark__信息已经修改__mark__成功')
						: isFirstAuth
						? t('恭喜您已经完成腾讯云企业实名认证__mark__')
						: t('恭喜您，实名认证__mark__信息已经修改__mark__成功')}
				</div>
				<a className="tc-icon-btn">
					<i className="close-icon" onClick={() => handleClose()}></i>
				</a>
			</div>
		)
	);
}

function TopBrokenProfileTip({ modifyState }) {
	const { brokenProfileLevel, completeBrokenProfile } = useContext(AuthContext);

	// 实名认证__mark__修改__mark__中不显示
	if (modifyState === ModifyState.STAGE) {
		return null;
	}

	switch (brokenProfileLevel) {
		default:
			return null;
		case BrokenLevel.Low:
		case BrokenLevel.High:
			return (
				<Alert type="info">
					因账号安全升级，<Text theme="danger">为避免影响您后续使用云服务</Text>
					，请立即完善您的实名信息__mark__，
					<a onClick={completeBrokenProfile} className="tea-mr-1n tea-ml-1n">
						立即完善
					</a>
				</Alert>
			);
	}
}

function OperationPanel() {
	const [qrcodeUrl, setQRCodeUrl] = useState(null);
	useEffect(() => {
		commonService.createSubscribeQRCode({ from: 'console_auth' }).then(({ qrcodeUrl }) => {
			setQRCodeUrl(qrcodeUrl);
		});
	}, []);

	return (
		<Card>
			<Card.Body>
				<div className="approve-event-box">
					<div className="approve-event-item">
						<h3 className="approve-event-tit">免费套餐__mark__</h3>
						<div className="approve-event-txt">
							领取云资源，免费试用6个月，为您提供0门槛上云实践机会
							<a target="_blank" href={ActFreeLink} className="tea-ml-1n">
								立即领取
							</a>
						</div>
					</div>
					<div className="approve-event-item app-qr-wrap">
						<h3 className="approve-event-tit">关注腾讯云助手</h3>
						<div className="approve-event-txt">
							微信扫一__mark__扫，接收重要通知
							<br />
							关注后立得代金券
						</div>
						<div className="app-qr-img">{qrcodeUrl && <img src={qrcodeUrl} alt="" />}</div>
					</div>
				</div>
			</Card.Body>
		</Card>
	);
}

import React, { useEffect, useState } from 'react';
import { app } from '@tea/app';
import { Button, Text } from '@tea/component';
import { AuthScene } from '@src/instances/auth';
import { useSelector, useDispatch } from 'react-redux';
import { authService } from '@src/services';
import { DetectQRCode } from '../../components';
import { setModifyDetectToken } from '../../helpers/accessModifyDetectToken';

export function CheckIdentity({ onNext }) {
	const { authInfo } = useSelector(state => state.auth);
	const {
		auth: { switchScene },
	} = useDispatch();
	const [detectToken, setDetectToken] = useState(null);

	async function handleStateChange() {
		const { ownerUin } = await app.user.current();

		setModifyDetectToken(ownerUin, detectToken);

		onNext();
	}

	return (
		<div className="modify-qr-page">
			<div className="qr-panel">
				<div className="qr-panel-hd">
					<div className="qr-panel-tit">
						为了验证您的身份，请
						<Text theme="warning" className="tea-ml-1n tea-mr-1n">
							{authInfo.name}
						</Text>
						使用微信扫码进行人脸识别
					</div>
					<div className="qr-panel-desc">扫码完成后勿此关闭页面，验证通过后将自动进入__mark__下一步__mark__</div>
				</div>
				<div className="qr-panel-bd">
					<DetectQRCode
						name={authInfo.name}
						fetchApi={() =>
							authService
								.createAuthDetectTokenWithoutID()
								.then(({ detectToken }) => {
									setDetectToken(detectToken);
									return { detectToken };
								})
								.catch(e => {
									app.tips.error('创建核身凭据失败，请稍后重试');
									throw e;
								})
						}
						pollingApi={result =>
							authService.getAuthDetectTokenState({
								detectToken: result.detectToken,
								scene: 'modifyCheckOld',
							})
						}
						onStateChange={handleStateChange}
						naked
					/>
				</div>
			</div>
			<p style={{ textAlign: 'center', marginTop: 100 }}>
				<a onClick={() => switchScene({ scene: AuthScene.ModifyIdentity })}>
					人脸核身不通过？前往人工审核流程 &gt;
				</a>
			</p>
		</div>
	);
}

export * from './CheckIdentity';

import React, { useState } from 'react';
import classNames from 'classNames';
import { Button, FormAction } from '@tea/component';
import { Form } from '@src/components';
import { AuthMethod, SubmitModifyAuthFlow } from '@src/instances/auth';
import { WXOAAuthFlow } from './WXOAAuthFlow';
import { gotoWXOAAuthPage } from '../../helpers';

const FormItem = Form.Item;

const Methods = [
	{
		name: '微信公众平台认证',
		value: AuthMethod.WXOA,
		description: (
			<p>
				已注册微信公众号且完成微信公众号实名认证__mark__的企业，可使用此方式
				<span className="text-warning">立即完成认证</span>
			</p>
		),
	},
	{
		name: '腾讯云充值认证',
		value: AuthMethod.TopUp,
		description: (
			<p>
				通过企业对公银行账户充值一__mark__笔少于1元的小额验证金（将充入余额），腾讯云收到充值后，即可完成认证，
				<span className="text-warning">1个工作日内完成</span>
			</p>
		),
	},
	{
		name: '企业对公打款认证',
		value: AuthMethod.Bankcard,
		visibility: 'hidden',
		description: (
			<p>
				输入企业对公银行账户信息，待腾讯云打款成功后，回填打款金额完成认证，各商业银行收款时间不同，一__mark__般为{' '}
				<span className="text-warning">1~3个工作日之间</span>
			</p>
		),
	},
];

export function ChooseEnterpriseAuthMethod({ flowName, onPrev, onNext }) {
	const [currMethod, setCurrMethod] = useState(Methods[0].value);
	const [wxOAAuthFlowActived, setWXOAAuthFlowActived] = useState(false);
	const reset = () => setWXOAAuthFlowActived(false);
	const [showHiddenMethod, toggleHiddenMethod] = useState(false);
	const isModifyFlow = flowName === SubmitModifyAuthFlow.name;

	async function handleOnNext() {
		if (AuthMethod.WXOA !== currMethod) {
			onNext({ authMethod: currMethod });
			return;
		}

		gotoWXOAAuthPage();
		setWXOAAuthFlowActived(true);
	}

	return (
		<>
			<div className="cert-form">
				<Form>
					<FormItem label="认证方式" required>
						<div className="rich-radiogroup" role="radiogroup">
							{Methods.map((m, index) =>
								m.visibility !== 'hidden' || showHiddenMethod ? (
									<div
										key={index}
										className={classNames('item', { checked: m.value === currMethod })}
										role="radio"
										aria-checked="true"
										onClick={() => setCurrMethod(m.value)}
									>
										<strong>{m.name}</strong>
										{m.description}
									</div>
								) : null,
							)}
							{!showHiddenMethod && (
								<div className="after-rich-radiogroup">
									<a href="javascript:;" onClick={() => toggleHiddenMethod(true)}>
										更多认证方式
									</a>
								</div>
							)}
						</div>
					</FormItem>
				</Form>
				<FormAction>
					<Button className="mr-10" onClick={onPrev}>
						上一步__mark__
					</Button>
					<Button type="primary" onClick={handleOnNext}>
						下一步__mark__
					</Button>
				</FormAction>
			</div>
			<WXOAAuthFlow
				actived={wxOAAuthFlowActived}
				isModifyFlow={isModifyFlow}
				onCancel={reset}
				onSuccess={() => {
					reset();
				}}
			/>
		</>
	);
}

export * from './ChooseEnterpriseAuthMethod';

import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { app, useHistory } from '@tea/app';
import { Button } from '@tea/component/button';
import { Modal } from '@tea/component/modal';
import { DocCNAuthGuide, AuthState, AuthScene } from '@src/instances/auth';
import { createPollingTask } from '@src/utils';
import { DetectModal } from '../../components/DetectModal';
import { gotoWXOAAuthPage } from '../../helpers';

export function WXOAAuthFlow({ actived, isModifyFlow, onSuccess, onCancel }) {
	const history = useHistory();
	const [flow, setFlow] = useState(null);
	const { authInfo: originalAuthInfo } = useSelector(state => state.auth);
	const {
		auth: { getAuthInfo, switchScene },
	} = useDispatch();

	// 新开公众号页面
	useEffect(() => {
		if (actived) {
			setFlow('confirm');
		} else {
			setFlow(null);
		}
	}, [actived]);

	// 轮循新开页的认证结果
	useEffect(() => {
		if (!actived || flow !== 'confirm') return;

		function handleAuthResult(result) {
			if (
				['to-be-confirmed', 'auth-via-other-method', 'reauth-via-qywechat', 'detect-face'].includes(
					result,
				)
			) {
				switch (result) {
					case 'detect-face': // 进行人脸核身
						handleIdentityInRisk();
						break;
					case 'to-be-confirmed': // 直接进入__mark__结果页（已取消__mark__确认页）
						handleConfirm();
						break;
					case 'auth-via-other-method': // 更换为其他验证方式
					case 'reauth-via-qywechat': // 重新认证__mark__
						onCancel();
						break;
				}
				// 清除 localStorage
				localStorage.removeItem('qywechat_auth_result');
				return true;
			} else {
				return false;
			}
		}

		let pollingTask;

		// 无痕模式可能不支持 localStorage
		if (window.localStorage) {
			localStorage.removeItem('qywechat_auth_result');
			pollingTask = createPollingTask();
			pollingTask.run(async () => {
				// 由 qcmain 公众号验证页设置
				return handleAuthResult(localStorage.getItem('qywechat_auth_result'));
			});
		}

		return function cleanup() {
			if (pollingTask) {
				pollingTask.cancel();
			}
		};
	}, [actived, flow]);

	async function handleConfirm() {
		let authInfo;

		try {
			app.tips.loading();

			authInfo = await getAuthInfo();

			const { authState, passTime } = authInfo;

			if (AuthState.SUCC === authState) {
				// 如果是修改__mark__流程，须校验当前通过时间与上次通过时间是否一__mark__致
				if (
					isModifyFlow &&
					originalAuthInfo.passTime &&
					originalAuthInfo.passTime.getTime() !== passTime.getTime()
				) {
					history.push('/developer/auth');
					return;
				}

				// 初认实名，则直接切换场景
				if (!isModifyFlow) {
					switchScene({ scene: AuthScene.Result });
					onSuccess();
					return;
				}
			}

			setFlow('result');
		} catch (e) {
			console.error(e);
			return;
		} finally {
			app.tips.loading();
		}
	}

	async function handleIdentityInRisk() {
		setFlow(null);

		const pass = await DetectModal.detect();
		if (!pass) {
			// 取消__mark__人脸核身显示“失败结果”
			setFlow('result');
			return;
		}

		// 核身成功走确认流程
		handleConfirm();
	}

	return (
		<>
			{/** 确认阶段 */}
			<Modal
				caption="认证完成前请不要关闭此窗口"
				visible={flow === 'confirm'}
				onClose={onCancel}
				disableEscape
			>
				<Modal.Body>
					请在新开的微信公众平台页面中，使用公众平台绑定__mark__的管理员个人微信号扫码授权认证。认证完成后，返回__mark__此页面进行操作。
				</Modal.Body>
				<Modal.Footer>
					<Button type="primary" onClick={handleConfirm}>
						已完成认证
					</Button>
					<Button onClick={() => window.open(DocCNAuthGuide)}>认证遇到问题</Button>
				</Modal.Footer>
			</Modal>
			{/** 校验结果 */}
			<Modal visible={flow === 'result'} onClose={onCancel}>
				<Modal.Body>
					<Modal.Message
						icon="error"
						message="未完成认证"
						description="微信公众平台实名认证__mark__未完成，您可以继续使用微信公众平台方式认证，或切换其他认证方式"
					/>
				</Modal.Body>
				<Modal.Footer>
					<Button
						type="primary"
						onClick={() => {
							gotoWXOAAuthPage();
							setFlow('confirm');
						}}
					>
						微信公众号平台认证
					</Button>
					<Button onClick={onCancel}>选择其他认证方式</Button>
				</Modal.Footer>
			</Modal>
		</>
	);
}

import React, { useState, useMemo } from 'react';
import dateformat from 'dateformat';
import { Button, FormAction } from '@tea/component';
import { Form } from '@src/components';
import { AuthMethod, AuthType } from '@src/instances/auth';
import { RadioSelector } from '../../components';
import { useSelector } from 'react-redux';

const FormItem = Form.Item;

const Types = [
	{
		name: '变更为企业主体',
		value: AuthType.Enterprise,
		description: '原个人实名认证__mark__的主体变更为企业主体，账号和资源的归属主体发生变更',
	},
	{
		name: '变更为个人主体',
		value: AuthType.Personal,
		description: '原个人实名认证__mark__的主体变更为其他个人主体，账号和资源的归属主体发生变更',
	},
];

export function ChooseModifyAuthType({ onNext }) {
	const { authInfo: originalAuthInfo, modifyLimit } = useSelector(state => state.auth);
	const { nextAuthTime } = originalAuthInfo;
	const types = useMemo(() => {
		return Types.map(type => {
			/**
			 * 30天内被限制变更，但个人转企业不受限制
			 * 后台本身有白名单，故判定以后返回__mark__`modifyLimit`为准，而不是 nextAuthTime
			 * 同 AuthStep['submit-modify-base-info']
			 */
			const disabled =
				modifyLimit === 'LimitExceeded.TimeTooShort' && type.value === AuthType.Personal;
			const tooltip = disabled
				? `实名认证__mark__30天后可变更为其他个人主体，您可以在 ${dateformat(
						nextAuthTime,
						'yyyy年mm月dd日 HH时MM分',
				  )} 之后发起申请，或变更为企业认证__mark__`
				: null;
			return {
				...type,
				disabled,
				tooltip,
			};
		});
	}, [nextAuthTime]);
	const [currType, setCurrType] = useState(Types[0].value);

	return (
		<>
			<Form>
				<FormItem label="变更认证类型" required>
					<RadioSelector options={types} value={currType} onChange={value => setCurrType(value)} />
				</FormItem>
			</Form>
			<FormAction>
				<Button type="primary" onClick={() => onNext({ authType: currType })}>
					下一步__mark__
				</Button>
			</FormAction>
		</>
	);
}

export * from './ChooseModifyAuthType';

import React, { useState, Fragment } from 'react';
import { authService } from '@src/services';
import { Alert } from '@tea/component/alert';
import { Button } from '@tea/component/button';
import { Bubble } from '@tea/component/bubble';
import { Icon } from '@tea/component/icon';
import { Form as TeaForm } from '@tea/component/form';
import { Input } from '@tea/component/input';
import { Modal } from '@tea/component/modal';
import { Text } from '@tea/component/text';
import { Form } from '@src/components';
import { submitErrorHandler } from '../../helpers';
import { useRevoke } from '../../hooks/useRevoke';

export function BankAuth({
	accountName,
	accountId,
	bankVerifyCount,
	bankVerifyExpired,
	onSuccess,
	onFail,
	onRestart,
}) {
	// 输入框
	const [value, setValue] = useState('');
	const [error, setError] = useState(null);
	const [loading, setLoading] = useState(null);

	// 弹窗
	const [modalVisible, setModalVisible] = useState(false);
	const open = () => setModalVisible(true);
	const close = () => {
		setModalVisible(false);
		setError(false);
		setValue('');
	};

	// 剩余次数
	const [remains, setRemains] = useState(bankVerifyExpired ? 0 : bankVerifyCount);

	// 撤销
	const { revoke } = useRevoke();

	async function validate() {
		if (!value) {
			setError('金额数字不能为空__mark__');
			return;
		}

		if (!/^0\.\d{1,2}$/.test(value)) {
			setError('金额数字不合法');
			return;
		}

		try {
			setLoading(true);
			await authService.verifyBankAuthAmount({ Amount: value });
			setModalVisible(false);
			onSuccess();
		} catch (e) {
			const { code } = e;

			if (code === 'FailedOperation.AmountExpired') {
				handleExpired();
			} else if (code === 'LimitExceeded.BankAuth') {
				handleTryOut();
			} else if (code === 'InvalidParameter.Amount') {
				setError('验证失败，仅剩1次机会，请核实金额后再尝试');
				setRemains(1);
			} else {
				submitErrorHandler(e);
			}
			return;
		} finally {
			setLoading(false);
		}
	}

	function handleTryOut() {
		setRemains(0);
		setModalVisible(false);
		Modal.alert({
			type: 'error',
			message: '认证失败',
			description: (
				<Fragment>
					金额输入错误超过<span className="text-warning"> 2 </span>
					次，验证未通过__mark__，请重新进行实名认证__mark__
				</Fragment>
			),
			buttons: [
				<Button type="primary" onClick={() => revoke(onRestart)}>
					确定__mark__
				</Button>,
				<Button onClick={() => onFail({ hasTryout: true })}>取消__mark__</Button>,
			],
		});
	}

	function handleExpired() {
		setRemains(0);
		setModalVisible(false);
		Modal.alert({
			type: 'error',
			message: '认证失败',
			description: <Fragment>由于您长时间未操作，本次验证未通过__mark__，请您重新进行实名认证__mark__</Fragment>,
			buttons: [
				<Button type="primary" onClick={() => onRestart()}>
					确定__mark__
				</Button>,
				<Button onClick={() => onFail({ hasExpired: true })}>取消__mark__</Button>,
			],
		});
	}

	return (
		<>
			<TeaForm.Title>
				校验打款金额
				<Bubble
					placement="top-start"
					content={
						<>
							若超过3个工作日未收到打款，请您
							<a
								target="_blank"
								href="/workorder/category?level1_id=1&level2_id=41&source=0&data_title=账号中心&step=1"
							>
								提交__mark__工单
							</a>
							联系客服协助。提交__mark__工单时需提供“银行账户截图”或者“开户许可证截图”以及公司名称__mark__、银行账号等信息。
						</>
					}
				>
					<Text
						theme="weak"
						style={{ marginLeft: 24, fontSize: 12, fontWeight: 400, borderBottom: '1px dashed' }}
					>
						未收到打款？
					</Text>
				</Bubble>
			</TeaForm.Title>
			<Alert>
				<p>
					• 若银行卡信息填写无误，腾讯云将在
					<span className="text-warning tea-ml-1n tea-mr-1n">1~3个工作日</span>内向 {accountName}
					（账号：{accountId}）转入0.01~0.99元不等。
				</p>
				<p>
					• 请您在收到打款入账提醒后，在此页面输入您收到的金额数字（如：0.01
					元，则输入“0.01”），即可完成认证。若您在7天内未完成验证将实名失败，实名结果将通过短信、邮件、站内信、微信进行通知。
				</p>
			</Alert>
			{remains > 0 && (
				<Button type="primary" onClick={open}>
					我已收到打款，开始校验
				</Button>
			)}
			<Modal caption="校验打款金额" visible={modalVisible} disableEscape onClose={close} size="s">
				<Modal.Body>
					<p className="tea-mb-5n">
						请输入您收到的金额数字（如：0.01 元，则输入“0.01”），您有
						<span className="text-warning"> 2 </span>
						次验证机会，若金额输入错误超过
						<span className="text-warning"> 2 </span>
						次须重新认证__mark__
					</p>
					<Form>
						<Form.Item label="打款金额" validateStatus={error ? 'error' : ''} help={error}>
							<Input
								placeholder="请输入金额数字"
								value={value}
								onChange={value => {
									setError(null);
									setValue(value);
								}}
							/>
							元
						</Form.Item>
					</Form>
				</Modal.Body>
				<Modal.Footer>
					<Button type="primary" loading={loading} onClick={validate}>
						提交认证__mark__
					</Button>
					<Button onClick={close}>取消__mark__</Button>
				</Modal.Footer>
			</Modal>
		</>
	);
}

import React, { Component } from 'react';
import objectPath from 'object-path';
import pify from 'pify';
import { app } from '@tea/app';
import { Button } from '@tea/component/button';
import { Input } from '@tea/component/input';
import { Select } from '@tea/component/select__mark__';
import { Form, Location } from '@src/components';
import { commonService, authService } from '@src/services';
import { BankList, OtherBankId, getBankNameById } from '@src/instances/auth';
import { ValidateRules } from '@src/instances/validate-rules';
import { submitErrorHandler } from '../../helpers';
import { DetectModal } from '../../components/DetectModal';

const FormItem = Form.Item;

@Form.create()
export class BankForm extends Component {
	state = {
		loading: false,
	};

	render() {
		const { form, formData = {} } = this.props;
		const { loading } = this.state;
		const { getFieldDecorator, getFieldValue } = form;

		return (
			<Form>
				<FormItem label="企业名称__mark__" required>
					{getFieldDecorator('accountName', {
						initialValue: formData.name,
						rules: [
							{ required: true, message: '企业名称__mark__不能为空__mark__' },
							ValidateRules['company-name-with-whitelist'],
						],
						clearErrorTrigger: 'onChange',
					})(<Input placeholder="请输入营业执照上的企业名称__mark__" className="xl" />)}
				</FormItem>
				<FormItem label="企业银行卡账号" required>
					{getFieldDecorator('accountId', {
						initialValue: formData.bankAccountId,
						rules: [
							{ required: true, message: '银行卡账号不能为空__mark__' },
							ValidateRules['bank_account_id'],
						],
						clearErrorTrigger: 'onChange',
					})(<Input placeholder="请填写企业对公银行账号" />)}
				</FormItem>
				<FormItem label="开户银行" required>
					{getFieldDecorator('bankId', {
						initialValue: objectPath.get(formData, 'bankId'),
						rules: [
							{ required: true, message: '请选择__mark__开户银行' },
							{
								validator: (_, value, callback) =>
									value && value !== '-1' ? callback() : callback('请选择__mark__开户银行'),
							},
						],
						clearErrorTrigger: 'onChange',
					})(
						<Select
							type="simulate"
							appearence="button"
							options={BankList}
							style={{ width: 200 }}
						/>,
					)}
				</FormItem>
				{getFieldValue('bankId') === OtherBankId && (
					<FormItem required>
						{getFieldDecorator('bankName', {
							initialValue: '',
							rules: [{ required: true, message: '银行名称不能为空__mark__' }, ValidateRules['bank_name']],
							clearErrorTrigger: 'onChange',
						})(<Input placeholder="请填写开户银行名称" />)}
					</FormItem>
				)}
				<FormItem label="银行所在地" className="list-3" required>
					{getFieldDecorator('bankLocation', {
						initialValue: objectPath.get(formData, 'bankLocation'),
						rules: [{ required: true, message: '请选择__mark__开户银行' }, ValidateRules['province_city']],
						clearErrorTrigger: 'onChange',
					})(<Location level={2} itemWidth={200} />)}
				</FormItem>

				<FormItem label="开户支行名">
					{getFieldDecorator('branchName', {
						initialValue: objectPath.get(formData, 'branchName', ''),
						rules: [
							{ required: true, message: '开户支行名不能为空__mark__' },
							ValidateRules['bank_branch_name'],
						],
						clearErrorTrigger: 'onChange',
					})(<Input placeholder="请输入开户支行信息" />)}
				</FormItem>
				<FormItem>
					<Button type="primary" loading={loading} onClick={this.handleSubmit}>
						完成填写
					</Button>
				</FormItem>
			</Form>
		);
	}

	handleSubmit = async () => {
		const { form, onSubmit } = this.props;
		let result;

		try {
			result = await pify(form.validateFields)();
		} catch (e) {
			return;
		}

		try {
			this.setState({ loading: true });
			const L = await commonService.resolveLoctionName(result.bankLocation);

			await authService.submitBankAuthInfo({
				BankAccountID: result.accountId,
				BankAccountName: result.accountName,
				BankInfo: {
					ID: result.bankId,
					Name: result.bankName || getBankNameById(result.bankId),
					BranchName: result.branchName,
					Location: {
						ProvinceId: L.provinceId,
						ProvinceName: L.provinceName,
						CityId: L.cityId,
						CityName: L.cityName,
						DistrictId: L.districtId,
						DistrictName: L.districtName,
					},
				},
			});
		} catch (e) {
			if (e.code === 'FailedOperation.IdentityInRisk') {
				this.handleIdentityInRisk();
			} else {
				submitErrorHandler(e);
			}
			return;
		} finally {
			this.setState({ loading: false });
		}

		onSubmit({ ...result, bankVerifyCount: 2 });
	};

	async handleIdentityInRisk() {
		const pass = await DetectModal.detect();

		if (!pass) return;

		this.handleSubmit();
	}
}

import React, { useState, useEffect } from 'react';
import { Icon } from '@tea/component/icon';
import { Form } from '@src/components';
import { commonService } from '@src/services';
import { BankList, OtherBankId } from '@src/instances/auth';

const PureItem = Form.Pure;

export function BankTable({ accountName, accountId, bankId, bankName, branchName, bankLocation }) {
	const bank = BankList.find(bank => bank.value === String(bankId));
	bankName = (String(bankId) === OtherBankId ? bankName : bank.text) || '未知__mark__';
	const [locationName, setLocationName] = useState(null);
	useEffect(() => {
		(async function() {
			const l = await commonService.resolveLoctionName(bankLocation);
			setLocationName([l.provinceName, l.cityName].filter(Boolean).join(' '));
		})();
	}, [bankLocation]);

	return (
		<Form>
			<PureItem label="企业名称__mark__">{accountName}</PureItem>
			<PureItem label="企业银行卡账号">{accountId}</PureItem>
			<PureItem label="开户银行">{bankName}</PureItem>
			<PureItem label="银行所在地">{locationName || <Icon type="loading" />}</PureItem>
			<PureItem label="开户支行名">{branchName}</PureItem>
		</Form>
	);
}

export * from './SubmitEnterpriseBankInfo';

import React, { useState } from 'react';
import { Modal } from '@tea/component/modal';
import { Form, FormTitle, FormItem } from '@tea/component/Form';
import { BankAuth } from './BankAuth';
import { BankForm } from './BankForm';
import { BankTable } from './BankTable';
import { SubmitModifyAuthFlow } from '@src/instances/auth';

export function SubmitEnterpriseBankInfo(props) {
	const { flowName, stepInfo, onPrev, onNext, onRestart, onUpdate } = props;
	const bankAccount = stepInfo.bankAccount;
	const hasSettled = Boolean(bankAccount);
	const hasFailed = hasSettled && bankAccount.bankVerifyCount <= 0;
	const setBankAccount = account => onUpdate({ bankAccount: account });
	const isModifyFlow = flowName === SubmitModifyAuthFlow.name;

	// TODO: 如果过期，则主动调提交__mark__接口触发后台验证过期逻辑，将认证状态__mark__扭转为 `认证失败`
	// 改为由后台离线扭转
	// useEffect(() => {
	// 	if (hasExpired) {
	// 		authService.verifyBankAuthAmount({ Amount: '0.01' }, { global: false }).catch(() => {
	// 			/** do nothing */
	// 		});
	// 	}
	// }, []);

	async function handlePrev() {
		const yes = await Modal.confirm({
			message: '确定__mark__修改__mark__？',
			description: '修改__mark__认证方式后，已填写的认证信息将被清空，需重新选择认证方式',
		});

		if (yes) {
			onPrev();
		}
	}

	return (
		<>
			<Form>
				<FormItem label="认证方式">
					<Form.Text>
						企业对公打款认证
						{/** 初次认证: 未失败显示 | 修改__mark__认证: 未填写__mark__显示 */}
						{(!isModifyFlow ? !hasFailed : !hasSettled) && (
							<a className="tea-ml-2n" onClick={handlePrev}>
								修改__mark__认证方式
							</a>
						)}
					</Form.Text>
				</FormItem>
			</Form>
			<hr />
			<FormTitle>企业对公打款认证</FormTitle>
			{bankAccount ? (
				<BankTable {...bankAccount} />
			) : (
				<>
					<p className="mb-15">
						请填写正确有效的企业对公银行账户信息，我们将给您所填写的账户进行小额打款以完成验证
					</p>
					<BankForm onSubmit={bankAccount => setBankAccount(bankAccount)} />
				</>
			)}
			{bankAccount && (
				<>
					<hr />
					<BankAuth
						{...bankAccount}
						onSuccess={onNext}
						onRestart={onRestart}
						onFail={({ hasTryout, hasExpired }) => {
							if (hasTryout) {
								setBankAccount({ ...bankAccount, bankVerifyCount: 0 });
							}
							if (hasExpired) {
								setBankAccount({ ...bankAccount, bankVerifyExpired: true });
							}
						}}
					/>
				</>
			)}
		</>
	);
}

export * from './SubmitEnterpriseBaseInfo';

import React, { Component, Fragment } from 'react';
import { connect } from 'react-redux';
import pify from 'pify';
import { Button, FormAction, Form as TeaForm, Check } from '@tea/component';
import { Loader } from '@src/components';
import { authService, commonService } from '@src/services';
import {
	AuthArea,
	SubmitModifyAuthFlow,
	AcceptModidfyIdentityAgreement,
} from '@src/instances/auth';
import { EnterpriseBaseForm } from '../../components';
import login from '@src/libs/login';
import { app } from '@tencent/tea-app';
import { submitErrorHandler } from '../../helpers';
import { withSession } from '@src/decorators';
import { getModifyDetectToken } from '../../helpers/accessModifyDetectToken';

const mapStateToProps = (state, ownProps) => {
	const isModifyFlow = Boolean(ownProps.flowName === SubmitModifyAuthFlow.name);

	return {
		loading: state.loading.effects.auth,
		phoneInfo: state.auth.phoneInfo,
		tradeInfo: state.auth.tradeInfo,
		isModifyFlow,
	};
};

const mapDispatchToProps = dispatch => dispatch.auth;
// @ts-ignoree
@connect(
	mapStateToProps,
	mapDispatchToProps,
)
@withSession()
export class SubmitEnterpriseBaseInfo extends Component {
	state = {
		showContactField: !!this.props.stepInfo.contact,

		saving: false,

		agree: !this.props.isModifyFlow,

		// 是否在这个生命周期内完善了手机 / 行业
		hasJustCompletePhone: false,
		hasJustCompleteTrade: false,
	};

	form;

	get needCompletePhone() {
		// 修改__mark__流程不完善手机
		return !this.props.isModifyFlow && this.props.phoneInfo
			? !this.props.phoneInfo.phoneNumber
			: null;
	}

	get needCompleteTrade() {
		return this.props.tradeInfo
			? !this.props.tradeInfo.tradeOne || !this.props.tradeInfo.tradeTwo
			: null;
	}

	render() {
		const { loading, isModifyFlow, phoneInfo, tradeInfo, stepInfo, onPrev } = this.props;
		const {
			saving,
			agree,
			showContactField,
			hasJustCompletePhone,
			hasJustCompleteTrade,
		} = this.state;

		//避免完善手机或行业通过，但实名信息__mark__不通过，表单消失问题，重复校验没关系，提交__mark__不重复提交__mark__即可
		const showPhoneField = this.needCompletePhone || hasJustCompletePhone;
		const showTradeField = this.needCompleteTrade || hasJustCompleteTrade;

		return (
			<Loader loading={loading.getPhoneInfo || loading.getTradeInfo}>
				{phoneInfo && tradeInfo && (
					<Fragment>
						<EnterpriseBaseForm
							ref={ref => (this.form = ref)}
							formData={stepInfo}
							formFields={['area', 'location', 'contactHint', showContactField ? 'contact' : null]
								.concat(showPhoneField ? 'phoneInfo' : null, showTradeField ? 'tradeInfo' : null)
								.filter(Boolean)}
							onToggleContactField={showContactField => {
								this.setState({ showContactField });
							}}
						/>
						{isModifyFlow && (
							<TeaForm>
								<TeaForm.Item>
									<Check
										type="checkbox"
										style={{ marginLeft: 56, marginTop: 10 }}
										value={agree}
										onChange={value => this.setState({ agree: value })}
									>
										我已阅读并同意
										<a href={AcceptModidfyIdentityAgreement} target="_blank">
											《接受__mark__实名认证__mark__主体变更协议》
										</a>
									</Check>
								</TeaForm.Item>
							</TeaForm>
						)}
						<FormAction>
							<Button className="mr-10" onClick={onPrev}>
								上一步__mark__
							</Button>
							<Button
								type="primary"
								loading={saving}
								onClick={this.handleSubmit}
								disabled={!agree}
								tooltip={!agree && '请勾选“同意协议”'}
							>
								下一步__mark__
							</Button>
						</FormAction>
					</Fragment>
				)}
			</Loader>
		);
	}

	componentDidMount() {
		const { phoneInfo, tradeInfo, getPhoneInfo, getTradeInfo } = this.props;

		if (!phoneInfo) {
			getPhoneInfo();
		}

		if (!tradeInfo) {
			getTradeInfo();
		}
	}

	handleSubmit = async () => {
		const { onNext } = this.props;
		const { showContactField, hasJustCompletePhone, hasJustCompleteTrade } = this.state;
		let result;
		let contact;

		try {
			result = await pify(this.form.validateFields)();
		} catch (e) {
			return;
		}

		// 完善手机 -- 关键路径
		if (this.needCompletePhone === true && !hasJustCompletePhone) {
			const done = await this.completeSecurityPhoneInfo(result);
			if (!done) {
				return;
			}
		}

		// 完善行业 -- 关键路径
		if (this.needCompleteTrade === true && !hasJustCompleteTrade) {
			const done = await this.completeTradeInfo(result);
			if (!done) {
				return;
			}
		}

		this.setState({ saving: true });

		try {
			const L = await commonService.resolveLoctionName(result.location);
			let params = {
				Area: AuthArea.Mainland,
				Location: {
					ProvinceId: L.provinceId,
					ProvinceName: L.provinceName,
					CityId: L.cityId,
					CityName: L.cityName,
					DistrictId: L.districtId,
					DistrictName: L.districtName,
					Address: result.address,
				},
			};

			if (showContactField) {
				contact = result.contact;
				Object.assign(params, {
					Contact: {
						Name: contact.name,
						IDCard: contact.idcard,
						PhoneNumber: contact.phoneInfo.phoneNumber,
						CountryCode: contact.phoneInfo.countryCode,
					},
				});
			}

			await this.doSubmit(params);
		} catch (e) {
			submitErrorHandler(e);
			return;
		} finally {
			this.setState({ saving: false });
		}

		const stepInfo = {
			...result,
			location: {
				...result.location,
				address: result.address,
			},
			contact: showContactField
				? {
						...contact,
						...contact.phoneInfo,
				  }
				: null,
		};

		onNext(stepInfo);
	};

	async completeSecurityPhoneInfo({ phoneInfo, captcha }) {
		const { completePhoneInfo } = this.props;

		try {
			this.setState({ saving: true });
			await completePhoneInfo({
				...phoneInfo,
				captcha,
				skey: login.getSkey(),
			});
			// 成功标记，下次接口不再调接口
			this.setState({ hasJustCompletePhone: true });
			return true;
		} catch (e) {
			const codeError = {
				'InvalidParameter.CodeError': '验证码错误__mark__',
				'InvalidParameter.CodeVerified': '验证码错误__mark__',
				'InvalidParameter.CodeExpired': '验证码已过期__mark__',
				'LimitExceeded.PhoneNumBound': '当前手机绑定腾讯云账号已超过上限，请更换手机后重试__mark__',
			};

			const matchCodeError = codeError[e.code];

			if (matchCodeError) {
				this.form.setFields({
					captcha: {
						value: captcha,
						errors: [{ message: matchCodeError }],
					},
				});

				return false;
			}

			let tip = '完善安全手机__mark__失败';

			if (e.code === 711009) {
				tip = '操作过于频繁，请稍后重试';
			}

			app.tips.error(tip);
			return false;
		} finally {
			this.setState({ saving: false });
		}
	}

	async completeTradeInfo({ tradeInfo }) {
		const { completeTradeInfo } = this.props;

		try {
			this.setState({ saving: true });
			await completeTradeInfo(tradeInfo);
			// 成功标记，下次接口不再调接口
			this.setState({ hasJustCompleteTrade: true });
			return true;
		} catch (e) {
			console.error(e);
			return false;
		} finally {
			this.setState({ saving: false });
		}
	}

	async doSubmit(formData) {
		const {
			isModifyFlow,
			session: { ownerUin },
		} = this.props;
		let payload = { ...formData };

		if (isModifyFlow) {
			const detectToken = getModifyDetectToken(ownerUin);
			payload = { ...payload, DetectToken: detectToken, Scene: 'modifySubmitNew' };
		}

		return authService.submitEnterpriseBaseAuthInfo(payload);
	}
}

export * from './SubmitEnterpriseTopupInfo';

import React, { Fragment, useState, useEffect } from 'react';
import { Button, Input, Modal, Alert, LoadingTip } from '@tea/component';
import { Form } from '@src/components';
import { Form as TeaForm } from '@tea/component/form';
import { Text } from '@tea/component/text';
import { authService } from '@src/services';
import { ValidateRules } from '@src/instances/validate-rules';
import { submitErrorHandler } from '../../helpers';
import { DetectModal } from '../../components/DetectModal';
import { useSelector, useDispatch } from 'react-redux';
import { SubmitModifyAuthFlow } from '@src/instances/auth';

const FormItem = Form.Item;
const PureItem = Form.Pure;

export function SubmitEnterpriseTopupInfo({ flowName, stepInfo, stepData, onPrev, onUpdate }) {
	const hasSettled = Boolean(stepInfo.bankReceiver);
	const hasExpired = stepInfo.bankReceiver && stepInfo.bankReceiver.topupExpired;
	const isModifyFlow = Boolean(flowName === SubmitModifyAuthFlow.name);

	async function handlePrev() {
		if (!hasSettled) {
			onPrev();
			return;
		}
		const yes = await Modal.confirm({
			message: '确定__mark__修改__mark__认证方式？',
			description: '修改__mark__后，已选择的认证方式及信息将被清空。',
		});

		if (yes) {
			onPrev();
		}
	}

	return (
		<>
			<Form>
				<PureItem label="认证方式">
					腾讯云充值认证
					{/** 初次认证: 未过期显示 | 修改__mark__认证: 未填写__mark__显示 */}
					{(!isModifyFlow ? !hasExpired : !hasSettled) && (
						<a className="ml-15" onClick={handlePrev}>
							修改__mark__认证方式
						</a>
					)}
				</PureItem>
			</Form>
			<TopupFlow
				{...stepInfo}
				onUpdate={onUpdate}
				isModifyFlow={isModifyFlow}
				hasExpired={hasExpired}
			/>
		</>
	);
}

function TopupFlow({ name: payName, bankReceiver, isModifyFlow, hasExpired, onUpdate }) {
	const [name, setName] = useState(payName);
	const [error, setError] = useState(null);
	const [receiver, setReceiver] = useState(bankReceiver);
	const [ready, setReady] = useState(Boolean(payName));
	const [loading, setLoading] = useState(false);
	const [smsSent, setSmsSent] = useState(false);
	const { phoneInfo, phoneInfoLoading } = useSelector(state => ({
		phoneInfo: state.auth.phoneInfo,
		phoneInfoLoading: state.loading.effects.auth.getPhoneInfo,
	}));

	const {
		auth: { getPhoneInfo },
	} = useDispatch();

	useEffect(() => {
		if (!phoneInfo) {
			getPhoneInfo();
		}
	}, [phoneInfo]);

	const { countryCode = '', phoneNumber = '' } = phoneInfo || {};

	async function handleSubmit() {
		if (!name || !name.trim()) {
			setError('企业名称__mark__不能为空__mark__');
			return;
		}

		ValidateRules['company-name-with-whitelist'].validator(null, name, async function(error) {
			if (error) {
				setError(error);
				return;
			}

			try {
				setLoading(true);
				const result = await authService.submitTopUpAuthInfo({ BankAccountName: name });
				setReceiver(result);
				setReady(true);
				setSmsSent(false);
				onUpdate({ name, bankReceiver: result });
			} catch (e) {
				// 超出计费关联充值账户数限制（5个）
				if (e.code === 'LimitExceeded.TopUpAccount') {
					handleTopUpAccountLimit();
				}
				if (e.code === 'FailedOperation.IdentityInRisk') {
					handleIdentityInRisk();
				} else {
					submitErrorHandler(e);
				}
				return;
			} finally {
				setLoading(false);
			}
		});
	}

	function handleTopUpAccountLimit() {
		Modal.alert({
			type: 'error',
			message: '提交__mark__失败',
			description: (
				<span>
					您添加的线下汇款账户名超过5个，请前往
					<a href="/expense/recharge" target="_blank">
						充值汇款-对公汇款
					</a>
					页面，删除__mark__部分汇款账户名，再进行操作。
				</span>
			),
			buttons: [
				<Button type="primary" onClick={() => window.open('/account/recharge')}>
					去修改__mark__
				</Button>,
				<Button>取消__mark__</Button>,
			],
		});
	}

	async function handleIdentityInRisk() {
		const pass = await DetectModal.detect();

		if (!pass) return;

		// 重新拉取当前实名认证__mark__信息
		handleSubmit();
	}

	async function handleModify() {
		const yes = await Modal.confirm({
			message: '确定__mark__修改__mark__？',
			description: '企业名称__mark__修改__mark__成功后，转账的金额也将发生变更，请使用新的银行账户进行打款',
		});

		if (yes) {
			setReady(false);
		}
	}

	async function handleSendSms() {
		try {
			await authService.sendAuthRemitInfo({
				corpName: name,
				accountName: '腾讯云计算（北京）有限责任公司',
				accountNumber: receiver.accountID,
				bankName: receiver.accountName,
				remitAmount: receiver.amount,
			});

			setSmsSent(true);
		} catch (e) {}
	}

	return (
		<Fragment>
			{!ready && (
				<>
					<hr />
					<TeaForm.Title>腾讯云充值认证</TeaForm.Title>
					<p className="tea-mb-2n">
						请填写与汇款账户一__mark__致的公司主体或社会机构名称，以便核实企业身份
					</p>
					<Form>
						<FormItem label="企业名称__mark__" validateStatus={error ? 'error' : ''} help={error}>
							<Input
								value={name}
								disabled={ready}
								placeholder="请输入营业执照上的企业名称__mark__"
								onChange={value => {
									setName(value);
									setError(null);
								}}
							/>
						</FormItem>
						<FormItem>
							<Button type="primary" loading={loading} onClick={handleSubmit}>
								完成填写
							</Button>
						</FormItem>
					</Form>
				</>
			)}
			{Boolean(ready && receiver) && (
				<>
					<hr />
					<TeaForm.Title>腾讯云充值认证</TeaForm.Title>
					<Form>
						<PureItem label="企业名称__mark__">
							{name}
							{!isModifyFlow && !hasExpired && (
								<a className="ml-15" onClick={handleModify}>
									修改__mark__企业名称__mark__
								</a>
							)}
						</PureItem>
					</Form>
					{!hasExpired && (
						<>
							<hr />
							<TeaForm.Title>
								请使用<Text theme="warning">&nbsp;{name}&nbsp;</Text>的企业银行账户，打款
								<Text theme="warning">&nbsp;{receiver.amount}元&nbsp;</Text>
								至腾讯云收款账户用于完成实名认证__mark__
							</TeaForm.Title>
							<>
								<p>
									腾讯云为您提供专属收款账户，系统在收到银行汇款后将自动匹配您的腾讯云账户并为您充值。充值成功后将自动完成实名认证__mark__，转账的款项会充值到您的腾讯云账户中。
								</p>
								<div className="cert-processes-em">
									<p className="mt-10">
										转账途径：网上银行 / 手机银行 / 电汇 / 支票 / 北京同城柜台现金存款
									</p>
									<p>打款金额：{receiver.amount} 元</p>
									<p>收款户名：腾讯云计算（北京）有限责任公司</p>
									<p>收款账户：{receiver.accountID}</p>
									<p>收款银行：{receiver.accountName}</p>
								</div>
								<div className="aafter-cert-processes-em">
									将以上信息发送到手机：
									{phoneInfoLoading ? (
										<LoadingTip />
									) : (
										<>
											+{countryCode} {phoneNumber}，
											{smsSent ? (
												<a href="javascript:;" className="disabled">
													已发送
												</a>
											) : (
												<a href="javascript:;" onClick={handleSendSms}>
													发送短信
												</a>
											)}
										</>
									)}
								</div>
							</>
							<hr />
							<TeaForm.Title>充值及实名认证__mark__结果反馈</TeaForm.Title>
							<Alert>
								对公转账（线下汇款）到账时间一__mark__般为
								<Text theme="warning"> 一__mark__个工作日内 </Text>，
								具体到账时间依赖于银行系统，请您耐心等待，您也可以前往
								<a href="/account/rechargeOffline" target="_blank">
									线下汇款
								</a>
								查看您的充值到账进度
								<br />
								充值成功后将自动完成实名认证__mark__，若您在7天内未完成验证将实名失败。实名结果将通过短信、邮件、站内信、微信进行通知。
							</Alert>
						</>
					)}
				</>
			)}
		</Fragment>
	);
}

export * from './SubmitModifyAuthInfo';

import React, { useState } from 'react';
import { useSelector } from 'react-redux';
import { Button, FormAction } from '@tea/component';
import { app } from '@tencent/tea-app';
import { Panel } from '@src/components';
import { authService } from '@src/services';
import { AuthType, ModifyOption, Material, AuthStep } from '@src/instances/auth';
import net from '@src/libs/net';
import login from '@src/libs/login';
import pify from 'pify';
import dateformat from 'dateformat';
import COS from 'cos-js-sdk-v5';
import { UploadBox } from '../../components/UploadBox';
import { RealNameBucket } from '@src/configs/cos';
import { submitErrorHandler } from '../../helpers';

export function SubmitModifyAuthInfo({ stepData, onPrev, onNext }) {
	const originalAuthInfo = useSelector(state => state.auth.authInfo);
	const destAuthInfo = stepData[AuthStep['submit-modify-base-info']];
	const uploadConfig = createAttachmentConfig({ originalAuthInfo, destAuthInfo });
	const [uploadState, setUploadState] = useState(createAttachmentState(uploadConfig));
	const [saving, setSaving] = useState(false);

	async function handleSubmit() {
		const newUploadState = {};
		const attachments = {};
		let pass = true;

		Object.values(uploadState).forEach(uploadItem => {
			const { key, value } = uploadItem;
			if (!value) {
				newUploadState[key] = {
					...uploadItem,
					error: true,
				};
				pass = false;
			} else {
				attachments[key] = value;
			}
		});

		if (!pass) {
			setUploadState({
				...uploadState,
				...newUploadState,
			});
			app.tips.error('请核实认证材料是否全部上传成功');
			return;
		}

		setSaving(true);

		try {
			await authService.submitOnlineApplyAuthInfo(attachments);
			onNext({
				attachments,
				submitTime: Date.now(),
			});
		} catch (e) {
			submitErrorHandler(e);
			return;
		} finally {
			setSaving(false);
		}
	}

	return (
		<div className="upload-page">
			{uploadConfig.map(({ title, description, uploads }, index) => (
				<UploadPanel key={index}>
					<UploadPanel.Header title={title}>
						{description && (
							<ul className="upload-box-desc">
								{description.map((line, index) => (
									<li key={index}>{line}</li>
								))}
							</ul>
						)}
					</UploadPanel.Header>
					<UploadPanel.Body>
						{uploads.map(([uploadKey, fileName, help, accept, size, exampleUrl]) => (
							<UploadBox
								key={uploadKey}
								fileName={fileName}
								accept={accept}
								help={help}
								maxFileSize={size}
								exampleUrl={exampleUrl}
								upload={sliceUploadFile}
								onChange={url => {
									setUploadState(state => ({
										...state,
										[uploadKey]: {
											key: uploadKey,
											value: url,
											error: false,
										},
									}));
								}}
							/>
						))}
					</UploadPanel.Body>
				</UploadPanel>
			))}
			<FormAction>
				<Button className="mr-10" onClick={onPrev}>
					上一步__mark__
				</Button>
				<Button type="primary" loading={saving} onClick={handleSubmit}>
					下一步__mark__
				</Button>
			</FormAction>
		</div>
	);
}

function UploadPanel({ children }) {
	return <div className="upload-panel">{children}</div>;
}

UploadPanel.Header = function({ title, children = null }) {
	return (
		<div className="upload-panel-tit">
			{title}
			{children}
		</div>
	);
};

UploadPanel.Body = function({ children }) {
	return <div className="upload-panel-con">{children}</div>;
};

function createAttachmentConfig({ originalAuthInfo, destAuthInfo }) {
	const { authType: originalAuthType, name: originalName } = originalAuthInfo;
	const { name, modifyOption } = destAuthInfo;
	const configs = [];
	const acceptImage = 'image/jpg,image/jpeg,image/png';
	const acceptFile = acceptImage + ',application/pdf';
	const acceptSize = 5 * 1024 * 1024;

	/**
	 * uploadItem: [key, label, help, accept, size, exampleUrl]
	 */
	// 变更申请表(必传)
	configs.push({
		title: '请上传变更申请表',
		description: [
			<span key="1">
				请下载
				<a
					href={
						originalAuthType === AuthType.Enterprise
							? Material.ApplyForm_Enterprise
							: Material.ApplyForm_Personal
					}
					target="_blank"
				>
					《变更申请表》
				</a>
				，按照模版进行填写
			</span>,
		],
		uploads: [
			['ApplyForm', '变更申请表', 'PDF, JPG 或 PNG 格式，大小不超过 5 M', acceptFile, acceptSize],
		],
	});

	if (modifyOption === ModifyOption.EnterpriseIdentityName) {
		/**
		 * 变更企业名称__mark__
		 */
		configs.push({
			title: `请上传新企业名称__mark__相关材料（${name}）`,
			uploads: [
				[
					'ModifyNameCertificate',
					'工商局或事业单位上级主管单位的变更证明',
					'JPG 或 PNG 格式，大小不超过 5 M',
					acceptImage,
					acceptSize,
				],
				[
					'BusinessLicense',
					'营业执照彩色正面照',
					'JPG 或 PNG 格式，大小不超过 5 M',
					acceptImage,
					acceptSize,
					Material.Example_BusinessLicence,
				],
			],
		});
	} else {
		/**
		 * 变更主体
		 */
		configs.push({
			title: `请上传原实名主体材料（${originalName}）`,
			uploads:
				originalAuthType === AuthType.Personal
					? [
							[
								'IDCardFront',
								'个人手持身份证国徽面彩色照',
								'JPG 或 PNG 格式，大小不超过 5 M',
								acceptImage,
								acceptSize,
								Material.Example_PersonalIDCardFront,
							],
							[
								'IDCardBack',
								'个人手持身份证人像面彩色照',
								'JPG 或 PNG 格式，大小不超过 5 M',
								acceptImage,
								acceptSize,
								Material.Example_PersonalIDCardBack,
							],
					  ]
					: [
							[
								'BusinessLicense',
								'营业执照彩色正面照',
								'JPG 或 PNG 格式，大小不超过 5 M',
								acceptImage,
								acceptSize,
								Material.Example_BusinessLicence,
							],
							[
								'IDCardFront',
								'法人身份证国徽面彩色照',
								'JPG 或 PNG 格式，大小不超过 5 M',
								acceptImage,
								acceptSize,
								Material.Example_EnterpriseOwnerIDCardFront,
							],
							[
								'IDCardBack',
								'法人身份证人像面彩色照',
								'JPG 或 PNG 格式，大小不超过 5 M',
								acceptImage,
								acceptSize,
								Material.Example_EnterpriseOwnerIDCardBack,
							],
					  ],
		});

		configs.push({
			title: `请上传新实名主体材料（${name}）`,
			uploads:
				modifyOption === ModifyOption.PersonalIdentity
					? [
							[
								'NewIDCardFront',
								'个人手持身份证国徽面彩色照',
								'JPG 或 PNG 格式，大小不超过 5 M',
								acceptImage,
								acceptSize,
								Material.Example_PersonalIDCardFront,
							],
							[
								'NewIDCardBack',
								'个人手持身份证人像面彩色照',
								'JPG 或 PNG 格式，大小不超过 5 M',
								acceptImage,
								acceptSize,
								Material.Example_PersonalIDCardBack,
							],
					  ]
					: [
							[
								'NewBusinessLicense',
								'营业执照彩色正面照',
								'JPG 或 PNG 格式，大小不超过 5 M',
								acceptImage,
								acceptSize,
								Material.Example_BusinessLicence,
							],
							[
								'NewIDCardFront',
								'法人身份证国徽面彩色照',
								'JPG 或 PNG 格式，大小不超过 5 M',
								acceptImage,
								acceptSize,
								Material.Example_EnterpriseOwnerIDCardFront,
							],
							[
								'NewIDCardBack',
								'法人身份证人像面彩色照',
								'JPG 或 PNG 格式，大小不超过 5 M',
								acceptImage,
								acceptSize,
								Material.Example_EnterpriseOwnerIDCardBack,
							],
					  ],
		});
	}

	return configs;
}

function createAttachmentState(config) {
	return config.reduce((acc, { uploads }) => {
		uploads.forEach(item => {
			Object.assign(acc, {
				[item[0]]: {
					key: item[0],
					value: '',
					error: false,
				},
			});
		});

		return acc;
	}, {});
}

const cosService = new COS({
	getAuthorization: async function(_, callback) {
		try {
			const result = await net.get('//cloud.tencent.com/services/cos/ajax?action=getAuth', {
				data: JSON.stringify({
					bucket: RealNameBucket.Bucket,
				}),
			});

			const { credentials = {}, expiredTime } = result;
			const { sessionToken, tmpSecretId, tmpSecretKey } = credentials;

			callback({
				TmpSecretId: tmpSecretId,
				TmpSecretKey: tmpSecretKey,
				XCosSecurityToken: sessionToken,
				ExpiredTime: expiredTime,
			});
		} catch (e) {
			console.error(e);
			app.tips.error('获取上传授权失败__mark__');
		}
	},
});

async function sliceUploadFile({ file, fileName, onTask, onProgress }) {
	const { Bucket, Region, Prefix } = RealNameBucket;
	const uin = login.getUin();
	const fileExtname = fileName
		.split('.')
		.pop()
		.toLowerCase();
	const key = `${Prefix}${uin}/real-name-verification/${dateformat(new Date(), 'yyyymmddHHMMss') +
		String(Math.random()).slice(2, 10)}.${fileExtname}`;

	// @ts-ignore
	const result = await pify(cosService.sliceUploadFile.bind(cosService))({
		Bucket,
		Region,
		Body: file,
		Key: key,
		TaskReady: onTask,
		onProgress: onProgress,
	});

	const { Location: url } = result;

	return {
		url: `http://${url}`,
	};
}

export * from './SubmitModifyBaseInfo';

import React, { useRef, useState, useMemo } from 'react';
import { useSelector } from 'react-redux';
import dateformat from 'dateformat';
import pify from 'pify';
import { PBox, Form } from '@src/components';
import { Button, FormAction, Checkbox, Check, Form as TeaForm } from '@tea/component';
import { authService, commonService } from '@src/services';
import { PersonalBaseForm, EnterpriseBaseForm, RadioSelector } from '../../components';
import {
	ModifyType,
	ModifyOption,
	AuthType,
	AcceptModidfyIdentityAgreement,
} from '@src/instances/auth';
import { submitErrorHandler } from '../../helpers';

const EnterpriseModifyOptions = {
	[ModifyOption.EnterpriseIdentity]: {
		value: ModifyOption.EnterpriseIdentity,
		name: '变更企业主体',
		description: '原企业实名认证__mark__的主体变更为其他企业主体，账号和资源的归属主体发生变更',
	},
	[ModifyOption.EnterpriseIdentityName]: {
		value: ModifyOption.EnterpriseIdentityName,
		name: '变更企业名称__mark__（企业主体不变）',
		description: '仅企业名称__mark__发生变更，账号和资源的归属主体不变',
	},
	[ModifyOption.PersonalIdentity]: {
		value: ModifyOption.PersonalIdentity,
		name: '变更为个人认证__mark__',
		description: '原企业实名认证__mark__变更为个人实名认证__mark__，账号和资源的归属主体发生变更',
	},
};

const PersonalModifyOptions = {
	[ModifyOption.EnterpriseIdentity]: {
		value: ModifyOption.EnterpriseIdentity,
		name: '变更为企业认证__mark__',
		description: '原个人实名认证__mark__变更为企业实名认证__mark__，账号和资源的归属主体发生变更',
	},
	[ModifyOption.PersonalIdentity]: {
		value: ModifyOption.PersonalIdentity,
		name: '变更个人主体',
		description: '原个人实名认证__mark__的主体变更为其他个人主体，账号和资源的归属主体发生变更',
	},
};

export function SubmitModifyBaseInfo({ onNext, stepInfo }) {
	const { authInfo: originalAuthInfo, modifyLimit } = useSelector(state => state.auth);
	const { authType: originalAuthType, nextAuthTime } = originalAuthInfo;
	const modifyOptions = useMemo(() => {
		const options = {
			...(originalAuthType === AuthType.Personal ? PersonalModifyOptions : EnterpriseModifyOptions),
		};

		/**
		 * 30天内被限制，但个人转企业不受限制
		 * 后台本身有白名单，故判定以后返回__mark__`modifyLimit`为准，而不是 nextAuthTime
		 * 同 AuthStep['choose-modify-auth-type']
		 */
		if (originalAuthType === AuthType.Personal && modifyLimit === 'LimitExceeded.TimeTooShort') {
			const nextAuthTimeText = dateformat(nextAuthTime, 'yyyy年mm月dd日 HH时MM分');
			options[ModifyOption.PersonalIdentity].disabled = true;
			options[
				ModifyOption.PersonalIdentity
			].tooltip = `实名认证__mark__30天后可变更为其他个人主体，您可以在 ${nextAuthTimeText} 之后发起申请，或变更为企业认证__mark__`;
		}
		return Object.values(options);
	}, [modifyLimit]);
	const [modifyOption, setModifyOption] = useState(
		stepInfo.modifyOption ? stepInfo.modifyOption : ModifyOption.EnterpriseIdentity,
	);
	const [saving, setSaving] = useState(false);
	// 企业不显示“协议”，故默认为 `true`
	const [agree, setAgree] = useState(originalAuthType === AuthType.Enterprise);
	const formRef = useRef(null);

	async function handleSubmit() {
		let result;
		let authType;

		try {
			result = await pify(formRef.current.validateFields)();
		} catch (e) {
			return;
		}

		setSaving(true);

		try {
			const L = result.location ? await commonService.resolveLoctionName(result.location) : null;

			if (modifyOption === ModifyOption.PersonalIdentity) {
				await authService.modifyAuthIdentityToPersonal({
					Name: result.name,
					IDCard: result.idcard,
					Location: {
						ProvinceId: L.provinceId,
						ProvinceName: L.provinceName,
						CityId: L.cityId,
						CityName: L.cityName,
						DistrictId: L.districtId,
						DistrictName: L.districtName,
						Address: result.address,
					},
				});

				authType = AuthType.Personal;
			} else {
				const modifyType =
					ModifyOption.EnterpriseIdentity === modifyOption
						? ModifyType.Identity
						: ModifyType.IdentityName;

				const params = {
					Name: result.name,
					ModifyType: modifyType,
				};

				if (modifyType === ModifyType.Identity) {
					Object.assign(params, {
						Location: {
							ProvinceId: L.provinceId,
							ProvinceName: L.provinceName,
							CityId: L.cityId,
							CityName: L.cityName,
							DistrictId: L.districtId,
							DistrictName: L.districtName,
							Address: result.address,
						},
					});
				}
				await authService.modifyAuthIdentityToEnterprise(params);

				authType = AuthType.Enterprise;
			}
		} catch (e) {
			submitErrorHandler(e);
			console.error(e);
			return;
		} finally {
			setSaving(false);
		}

		const stepInfo = {
			...result,
			location: result.location
				? {
						...result.location,
						address: result.address,
				  }
				: null,
			authType,
			modifyOption,
		};

		// save result;
		onNext(stepInfo);
	}

	return (
		<>
			<PBox title="变更后认证类型">
				<PBox.Body>
					<Form>
						<Form.Item label="变更认证类型" required>
							<RadioSelector
								value={modifyOption}
								options={modifyOptions}
								onChange={value => setModifyOption(value)}
							/>
						</Form.Item>
					</Form>
				</PBox.Body>
			</PBox>
			<PBox title="变更后实名信息__mark__">
				<PBox.Body>
					{modifyOption === ModifyOption.PersonalIdentity && (
						<PersonalBaseForm
							ref={formRef}
							formData={stepInfo.modifyOption === ModifyOption.PersonalIdentity ? stepInfo : {}}
							formFields={['name', 'idcard', 'location']}
						/>
					)}
					{(modifyOption === ModifyOption.EnterpriseIdentity ||
						modifyOption === ModifyOption.EnterpriseIdentityName) && (
						<EnterpriseBaseForm
							ref={formRef}
							formData={stepInfo.modifyOption != ModifyOption.PersonalIdentity ? stepInfo : {}}
							formFields={[
								'name',
								modifyOption === ModifyOption.EnterpriseIdentity ? 'location' : null,
							].filter(Boolean)}
						/>
					)}
					{originalAuthType === AuthType.Personal && (
						<TeaForm>
							<TeaForm.Item>
								<Check
									type="checkbox"
									style={{ marginLeft: 56, marginTop: 10 }}
									value={agree}
									onChange={value => setAgree(value)}
								>
									我已阅读并同意
									<a href={AcceptModidfyIdentityAgreement} target="_blank">
										《接受__mark__实名认证__mark__主体变更协议》
									</a>
								</Check>
							</TeaForm.Item>
						</TeaForm>
					)}
				</PBox.Body>
			</PBox>
			<FormAction>
				<Button
					type="primary"
					loading={saving}
					onClick={handleSubmit}
					disabled={!agree}
					tooltip={!agree && '请勾选“同意协议”'}
				>
					下一步__mark__
				</Button>
			</FormAction>
		</>
	);
}

export * from './SubmitPersonalAuthInfo';

// @ts-nocheck
import React, { useRef, Fragment } from 'react';
import { Text } from '@tea/component/text';
import { StatusTip } from '@tea/component/tips';
import { QRCode } from '@src/components';
import { Midas } from '@src/libs/midas';
import { authService } from '@src/services';
import { usePollingTask } from '@src/hooks';

const debug = process.env.NODE_ENV !== 'production';

export function MidasQRCode({ name, onStateChange }) {
	const iframeRef = useRef(null);
	const { loading, error, retry } = usePollingTask({
		fetchApi: () => setupMidas(),

		pollingApi: result =>
			authService.getWeChatAuthQRCodeState({ QRCode: result.qrcodeId }).then(({ status }) => {
				const done = status === 0;
				if (done) {
					onStateChange();
				}
				return done;
			}),
	});

	function setupMidas() {
		return new Promise(async (resolve, reject) => {
			let timer = setTimeout(() => reject(new Error('Load Midas QRCode Timeout')), 15000);

			try {
				const [order] = await Promise.all([authService.submitMidasAuthInfo(), Midas.prepare()]);

				const { appId, openId, urlParams, transactionId } = order;

				const client = new TEG.Service.EnterprisePay({
					// 多次 new 都是同一__mark__个实例，$target 改成从 pay 传入
					// $target: $(this.iframe),
					appId: appId,
					openId: openId,
					sessionType: TEG.Enum.SessionType.UNL,
					debug,
					env: debug ? 'sandbox' : '',
					epExt: {
						onlyQrCode: true,
						qrCodeSize: 160,
						native_wxpay: true,
						useBizWxAppid: true,
						backUrl: 'https://cloud.tencent.com',
					},
				});

				client.on('data', function({ status }) {
					if (status === '2000') {
						if (timer) {
							clearTimeout(timer);
						}
						resolve(order);
					}
				});

				client.pay({
					$target: $(iframeRef.current),
					isSeparatePage: false,
					token: transactionId,
					tokenUrl: urlParams,
				});
			} catch (e) {
				reject(e);
			}
		});
	}

	return (
		<Fragment>
			<p>
				为了认证您的身份（<Text theme="warning">{name}</Text>），请用微信扫描二维码__mark__并支付
				<span className="text-warning"> 0.01 </span>元
			</p>
			<p>
				认证成功后，0.01元将在2小时内提现至您的原支付账户，您可以在
				<a
					className="tea-ml-1n tea-mr-1n"
					href="https://console.cloud.tencent.com/expense/overview"
					target="_blank"
				>
					控制台-提现
				</a>
				查看
			</p>
			<QRCode
				className="tea-mt-2n"
				size={160}
				loading={loading}
				render={() => (
					<iframe
						width={158}
						height={158}
						ref={iframeRef}
						style={{ opacity: loading ? 0 : 1 }}
					></iframe>
				)}
			/>
			{error ? (
				<p className="text-label tea-mt-2n">
					<span className="text-danger">
						二维码__mark__生成失败，您可以 <a onClick={retry}>刷新重试</a>
					</span>
				</p>
			) : (
				<p className="text-label tea-mt-2n">
					<span>系统将自动审核，并实时反馈审核结果</span>
				</p>
			)}
		</Fragment>
	);
}

import React, { Fragment, useContext, useState, useEffect } from 'react';
import qrcode from 'qrcode';
import { Text } from '@tea/component/text';
import { QRCode } from '@src/components';
import { authService } from '@src/services';
import { SessionContext } from '@src/decorators';
import { usePollingTask } from '@src/hooks/usePollingTask';

export function QQQRCode({ name, onStateChange }) {
	const session = useContext(SessionContext);
	const { loading, error, result, retry } = usePollingTask({
		fetchApi: () => authService.submitQQAuthInfo(),

		pollingApi: result =>
			authService.getQQAuthQRCodeState({ QRCode: result.qrcodeId }).then(({ status }) => {
				const done = status === 0;
				if (done) {
					onStateChange();
				}
				return done;
			}),
	});

	return (
		<Fragment>
			<p>
				为了认证您的身份（<Text theme="warning">{name}</Text>），请用绑定__mark__了本人银行卡的手Q扫描二维码__mark__
			</p>
			<p>
				若手Q没有绑定__mark__银行卡，可查看{' '}
				<a href="//cloud.tencent.com/document/product/378/5336" target="_blank">
					绑卡指引
				</a>
			</p>
			<QRCode
				className="tea-mt-2n"
				size={160}
				loading={loading}
				source={
					result
						? `https://www.qcloud.com/mqq/auth?uin=${session.ownerUin}&qid=${result.qrcodeId}`
						: null
				}
				renderOptions={{ margin: 0, width: 160 }}
			/>
			{error ? (
				<p className="text-label tea-mt-2n">
					<span className="text-danger">
						二维码__mark__生成失败，您可以 <a onClick={retry}>刷新重试</a>
					</span>
				</p>
			) : (
				<p className="text-label tea-mt-2n">
					<span>系统将自动审核，并实时反馈审核结果</span>
				</p>
			)}
		</Fragment>
	);
}

import React, { useState, useEffect } from 'react';
import useAsync from 'react-use/lib/useAsync';
import { Button } from '@tea/component';
import { Segment } from '@tea/component/segment';
import { Card } from '@tea/component/card';
import { Form } from '@tea/component/form';
import { StatusTip } from '@tea/component/tips';
import { AuthMethod, AuthStep } from '@src/instances/auth';
import { authService } from '@src/services';
import { DetectQRCode } from '../../components';
import { MidasQRCode } from './MidasQRCode';
import { QQQRCode } from './QQQRCode';

export function SubmitPersonalAuthInfo({ stepData, onPrev, onNext }) {
	const { name } = stepData[AuthStep['submit-personal-base-info']];
	const [method, setMethod] = useState(null);
	// 此处不作为关键路径
	const checkAbnormalState = useAsync(() => authService.checkAbnormalUser().catch(e => false), []);
	const abnormal = checkAbnormalState.value;
	// 风险用户只能用 `人脸识别` 的方式
	const methods = abnormal
		? [
				{
					text: '人脸识别',
					value: String(AuthMethod.FACE),
				},
		  ]
		: [
				{
					text: '微信',
					value: String(AuthMethod.Wechat),
				},
				{
					text: 'QQ',
					value: String(AuthMethod.QQ),
				},
				{
					text: '人脸识别',
					value: String(AuthMethod.FACE),
				},
		  ];

	// 默认选中第一__mark__个可选项
	useEffect(() => {
		if (checkAbnormalState.value !== undefined) {
			const availableMethod = methods.find(m => !m.disabled);
			if (availableMethod) {
				setMethod(+availableMethod.value);
			}
		}
	}, [checkAbnormalState]);

	return (
		<div className="modify-qr-page">
			{checkAbnormalState.loading && <StatusTip.LoadingTip />}
			{checkAbnormalState.error && <StatusTip.ErrorTip />}
			{checkAbnormalState.value !== undefined && (
				<>
					<Form>
						<Form.Item label="认证方式" required>
							<Segment
								options={methods}
								value={String(method)}
								onChange={value => setMethod(+value)}
							/>
						</Form.Item>
						<Form.Item label="身份验证">
							<Form.Text>
								{method === AuthMethod.Wechat && (
									<MidasQRCode name={name} onStateChange={() => onNext()} />
								)}
								{method === AuthMethod.QQ && (
									<QQQRCode name={name} onStateChange={() => onNext()} />
								)}
								{method === AuthMethod.FACE && (
									<DetectQRCode
										name={name}
										fetchApi={() => authService.submitDetectAuthInfo()}
										pollingApi={result =>
											authService.getAuthDetectTokenState({ detectToken: result.detectToken })
										}
										onStateChange={() => onNext()}
										bordered={true}
									/>
								)}
							</Form.Text>
						</Form.Item>
					</Form>
					<Form.Action>
						<Button onClick={onPrev}>上一步__mark__</Button>
					</Form.Action>
				</>
			)}
		</div>
	);
}

export * from './SubmitPersonalBaseInfo';

import React, { Component } from 'react';
import { connect } from 'react-redux';
import pify from 'pify';
import { app } from '@tea/app';
import { Button, FormAction, Form as TeaForm, Check } from '@tea/component';
import { Loader } from '@src/components';
import {
	AuthArea,
	SubmitModifyAuthFlow,
	AcceptModidfyIdentityAgreement,
} from '@src/instances/auth';
import { authService, commonService } from '@src/services';
import login from '@src/libs/login';
import { PersonalBaseForm } from '../../components';
import { submitErrorHandler } from '../../helpers';
import { withSession } from '@src/decorators';
import { getModifyDetectToken } from '../../helpers/accessModifyDetectToken';

const mapStateToProps = (state, ownProps) => {
	const isModifyFlow = Boolean(ownProps.flowName === SubmitModifyAuthFlow.name);

	return {
		loading: state.loading.effects.auth,
		phoneInfo: state.auth.phoneInfo,
		tradeInfo: state.auth.tradeInfo,
		isModifyFlow,
	};
};

const mapDispatchToProps = dispatch => dispatch.auth;
// @ts-ignoree
@connect(
	mapStateToProps,
	mapDispatchToProps,
)
@withSession()
export class SubmitPersonalBaseInfo extends Component {
	state = {
		saving: false,

		agree: !this.props.isModifyFlow,

		// 是否在这个生命周期内完善了手机 / 行业
		hasJustCompletePhone: false,
		hasJustCompleteTrade: false,
	};

	form;

	get needCompletePhone() {
		// 修改__mark__流程不完善手机
		return !this.props.isModifyFlow && this.props.phoneInfo
			? !this.props.phoneInfo.phoneNumber
			: null;
	}

	get needCompleteTrade() {
		return this.props.tradeInfo
			? !this.props.tradeInfo.tradeOne || !this.props.tradeInfo.tradeTwo
			: null;
	}

	render() {
		const { loading, isModifyFlow, phoneInfo, tradeInfo, stepInfo, onPrev } = this.props;
		const { saving, agree, hasJustCompletePhone, hasJustCompleteTrade } = this.state;

		//避免完善手机或行业通过，但实名信息__mark__不通过，表单消失问题，重复校验没关系，提交__mark__不重复提交__mark__即可
		const showPhoneField = this.needCompletePhone || hasJustCompletePhone;
		const showTradeField = this.needCompleteTrade || hasJustCompleteTrade;

		return (
			<Loader loading={loading.getPhoneInfo || loading.getTradeInfo}>
				{phoneInfo && tradeInfo && (
					<>
						<PersonalBaseForm
							ref={ref => (this.form = ref)}
							formData={stepInfo}
							formFields={['area', 'name', 'idcard', 'location']
								.concat(showPhoneField ? 'phoneInfo' : null, showTradeField ? 'tradeInfo' : null)
								.filter(Boolean)}
						/>
						{/** 个人修改__mark__流程需要同意协议 */}
						{isModifyFlow && (
							<TeaForm>
								<TeaForm.Item>
									<Check
										type="checkbox"
										style={{ marginLeft: 56, marginTop: 10 }}
										value={agree}
										onChange={value => this.setState({ agree: value })}
									>
										我已阅读并同意
										<a href={AcceptModidfyIdentityAgreement} target="_blank">
											《接受__mark__实名认证__mark__主体变更协议》
										</a>
									</Check>
								</TeaForm.Item>
							</TeaForm>
						)}
						<FormAction>
							<Button className="mr-10" onClick={onPrev}>
								上一步__mark__
							</Button>
							<Button
								type="primary"
								loading={saving}
								onClick={this.handleSubmit}
								disabled={!agree}
								tooltip={!agree && '请勾选“同意协议”'}
							>
								下一步__mark__
							</Button>
						</FormAction>
					</>
				)}
			</Loader>
		);
	}

	componentDidMount() {
		const { phoneInfo, tradeInfo, getPhoneInfo, getTradeInfo } = this.props;

		if (!phoneInfo) {
			getPhoneInfo();
		}

		if (!tradeInfo) {
			getTradeInfo();
		}
	}

	handleSubmit = async () => {
		const { onNext } = this.props;
		const { hasJustCompletePhone, hasJustCompleteTrade } = this.state;
		let result;

		try {
			result = await pify(this.form.validateFields)();
		} catch (e) {
			return;
		}

		// 完善手机 -- 关键路径
		if (this.needCompletePhone === true && !hasJustCompletePhone) {
			const done = await this.completeSecurityPhoneInfo(result);
			if (!done) {
				return;
			}
		}

		// 完善行业 -- 关键路径
		if (this.needCompleteTrade === true && !hasJustCompleteTrade) {
			const done = await this.completeTradeInfo(result);
			if (!done) {
				return;
			}
		}

		this.setState({ saving: true });

		try {
			const L = await commonService.resolveLoctionName(result.location);
			await this.doSubmit({
				Area: AuthArea.Mainland,
				Name: result.name,
				IDCard: result.idcard,
				Location: {
					ProvinceId: L.provinceId,
					ProvinceName: L.provinceName,
					CityId: L.cityId,
					CityName: L.cityName,
					DistrictId: L.districtId,
					DistrictName: L.districtName,
					Address: result.address,
				},
			});
		} catch (e) {
			submitErrorHandler(e);
			return;
		} finally {
			this.setState({ saving: false });
		}

		// 将信息暂存
		const stepInfo = {
			...result,
			location: {
				...result.location,
				address: result.address,
			},
		};

		onNext(stepInfo);
	};

	async completeSecurityPhoneInfo({ phoneInfo, captcha }) {
		const { completePhoneInfo } = this.props;

		try {
			this.setState({ saving: true });
			await completePhoneInfo({
				...phoneInfo,
				captcha,
				skey: login.getSkey(),
			});
			// 成功标记，下次接口不再调接口
			this.setState({ hasJustCompletePhone: true });
			return true;
		} catch (e) {
			const codeError = {
				'InvalidParameter.CodeError': '验证码错误__mark__',
				'InvalidParameter.CodeVerified': '验证码错误__mark__',
				'InvalidParameter.CodeExpired': '验证码已过期__mark__',
				'LimitExceeded.PhoneNumBound': '当前手机绑定腾讯云账号已超过上限，请更换手机后重试__mark__',
			};

			const matchCodeError = codeError[e.code];

			if (matchCodeError) {
				this.form.setFields({
					captcha: {
						value: captcha,
						errors: [{ message: matchCodeError }],
					},
				});
				return false;
			}

			let tip = '完善安全手机__mark__失败';

			if (e.code === 'LimitExceeded.VerifyFrequency') {
				tip = '您的操作过于频繁，请稍后重试__mark__';
			}

			app.tips.error(tip);
			return false;
		} finally {
			this.setState({ saving: false });
		}
	}

	async completeTradeInfo({ tradeInfo }) {
		const { completeTradeInfo } = this.props;

		try {
			this.setState({ saving: true });
			await completeTradeInfo(tradeInfo);
			// 成功标记，下次接口不再调接口
			this.setState({ hasJustCompleteTrade: true });
			return true;
		} catch (e) {
			console.error(e);
			return false;
		} finally {
			this.setState({ saving: false });
		}
	}

	async doSubmit(formData) {
		const {
			isModifyFlow,
			session: { ownerUin },
		} = this.props;
		let payload = { ...formData };

		if (isModifyFlow) {
			const detectToken = getModifyDetectToken(ownerUin);
			payload = { ...payload, DetectToken: detectToken, Scene: 'modifySubmitNew' };
		}

		return authService.submitPersonalBaseAuthInfo(payload);
	}
}

export * from './WaitForAudit';

import React, { useState } from 'react';
import { useHistory } from '@tea/app';
import dateformat from 'dateformat';
import { Button, Modal, Icon } from '@tea/component';
import { authService } from '@src/services';
import {
	AuthType,
	ApprovalState,
	AuthStep,
	Switch_PersonalSelfModifyFlow,
	AuthScene,
} from '@src/instances/auth';
import { useDispatch, useSelector } from 'react-redux';
import { useRevoke } from '../../hooks/useRevoke';

export const WaitForAudit = function({ stepInfo, stepData, onRestart }) {
	const history = useHistory();
	const { name, authType } = stepData[AuthStep['submit-modify-base-info']];
	const { submitTime } = stepData[AuthStep['submit-modify-auth-info']];
	const { approvalState, reason: rejectReason } = stepInfo;
	const { loading: revoking, revoke } = useRevoke();
	const [restarting, setRestarting] = useState(false);
	const {
		authInfo: { authType: originalAuthType, brokenProfile: originalBrokenProfile },
	} = useSelector(state => state.auth);
	const {
		auth: { switchScene },
	} = useDispatch();

	async function handleRevoke() {
		const confirm = await Modal.confirm({
			message: '是否要放弃修改__mark__?',
			description: '放弃修改__mark__后，您的实名信息__mark__将不会发生变更',
			size: 's',
		});

		if (confirm) {
			revoke(() => history.replace('/developer/auth'));
		}
	}

	async function handleRestart() {
		// 先撤销申请
		try {
			setRestarting(true);
			await authService.revokeModifyAuthIdentity();
		} finally {
			setRestarting(false);
		}

		// 如果为个人，优先走自助流程
		if (
			Switch_PersonalSelfModifyFlow &&
			originalAuthType === AuthType.Personal &&
			!originalBrokenProfile
		) {
			switchScene({ scene: AuthScene.ModifyPersonalIdentity });
		} else {
			onRestart();
		}
	}

	const NewIdentity = () => (
		<div className="modify-info-box">
			<div className="modify-info-tit">变更后实名信息__mark__</div>
			<div className="modify-info-con">
				<ul>
					<li>
						<span className="modify-info-label">实名类型：</span>
						<span>{authType === AuthType.Enterprise ? '企业' : '个人'}</span>
					</li>
					<li>
						<span className="modify-info-label">主体名称：</span>
						<span>{name}</span>
					</li>
					{submitTime && (
						<li>
							<span className="modify-info-label">提交__mark__时间：</span>
							<span>{dateformat(submitTime, 'yyyy-mm-dd HH:MM:ss')}</span>
						</li>
					)}
				</ul>
			</div>
		</div>
	);

	const Stage = () => (
		<div className="media media-horiz-center page-feedback">
			<div className="media-left">
				<Icon type="pending" size="l" />
			</div>
			<div className="media-body">
				<h4 className="media-heading">实名信息__mark__变更审核中__mark__</h4>
				<p className="page-feedback-text">
					您的修改__mark__实名认证__mark__申请已经成功提交__mark__，审核结果将于
					<span className="text-warning"> 1-3个工作日 </span>
					以邮件，短信和站内信的方式通知您。
					<br />
					审核期间您可以放弃修改__mark__，实名信息__mark__将不会发生变更。审核通过后，您的实名信息__mark__将自动更新。
				</p>
				<NewIdentity />
				<div className="modify-info-btns">
					<Button type="primary" loading={revoking} onClick={handleRevoke}>
						放弃修改__mark__
					</Button>
				</div>
			</div>
		</div>
	);

	const Reject = () => (
		<div className="media media-horiz-center page-feedback">
			<div className="media-left">
				<Icon type="error" size="l" />
			</div>
			<div className="media-body">
				<h4 className="media-heading">实名信息__mark__变更审核未通过__mark__</h4>
				<p className="page-feedback-text">
					您的修改__mark__实名认证__mark__申请审核未通过__mark__，原因如下：
					<br />
					{rejectReason}
				</p>
				<div className="modify-info-btns">
					<Button
						type="primary"
						disabled={revoking}
						loading={restarting}
						className="mr-10"
						onClick={handleRestart}
					>
						重新提交申请__mark__
					</Button>
					<Button className="ml-10" disabled={restarting} loading={revoking} onClick={handleRevoke}>
						放弃修改__mark__
					</Button>
				</div>
			</div>
		</div>
	);

	let result = null;

	// 前端只关注审核通过，驳回，审核中__mark__三__mark__个状态，成功在结果页反映
	switch (approvalState) {
		default:
		case ApprovalState.STAGE:
			result = <Stage />;
			break;
		case ApprovalState.REJECT:
			result = <Reject />;
			break;
	}

	return (
		<div className="modify-review-page" style={{ minHeight: 360 }}>
			{result}
		</div>
	);
};

import React from 'react';
import { useDispatch } from 'react-redux';
import { i18n, useHistory } from '@tea/app';
import { Alert } from '@tea/component/alert';
import { Button } from '@tea/component/button';
import { Card } from '@tea/component/card';
import { ContentView } from '@tea/component/contentview';
import { ExternalLink } from '@tea/component/link';
import { AuthScene } from '@src/instances/auth';

const { Trans, t } = i18n;

export function ChooseType() {
	const history = useHistory();
	const {
		auth: { switchScene },
	} = useDispatch();

	return (
		<ContentView>
			<ContentView.Header
				showBackButton
				onBackButtonClick={() => history.push('/developer')}
				title={t('选择认证类型__mark__')}
			/>
			<ContentView.Body>
				<Alert>
					<Trans>
						根据中国大陆法律法规的要求, 在购买位于中国大陆的产品之前，您需要按照
						<ExternalLink
							href="https://intl.cloud.tencent.com/document/product/378/3629"
							className="tea-ml-1n tea-mr-1n"
							target="_blank"
						>
							此处
						</ExternalLink>
						的说明验证您的身份。 我们将按照
						<ExternalLink
							href="https://intl.cloud.tencent.com/document/product/301/17345"
							className="tea-ml-1n tea-mr-1n"
							target="_blank"
						>
							隐私策略
						</ExternalLink>
						对其进行处理。
					</Trans>
				</Alert>
				<Card>
					<Card.Body>
						<div className="edit-auth-type">
							<div className="edit-auth-type-tit">
								<h1>{t('选择认证类型__mark__')}</h1>
								<div className="edit-auth-type-des">
									{t('完成实名认证后，认证类型可以在30天后再次修改__mark__')}
								</div>
							</div>
							<div className="edit-auth-type-list">
								<div className="edit-auth-type-item">
									<div className="edit-auth-type-icon">
										<i className="icon-auth-type-c"></i>
									</div>
									<div className="edit-auth-type-item-tit">{t('个人认证__mark__')}</div>
									<div className="edit-auth-type-item-txt">{t('适用于个人用户__mark__')}</div>
									<div className="edit-auth-type-item-btn">
										<Button type="primary" onClick={() => switchScene(AuthScene.AuthPersonal)}>
											{t('开始认证__mark__')}
										</Button>
									</div>
								</div>
								<div className="edit-auth-type-item">
									<div className="edit-auth-type-icon">
										<i className="icon-auth-type-b"></i>
									</div>
									<div className="edit-auth-type-item-tit">{t('企业认证__mark__')}</div>
									<div className="edit-auth-type-item-txt">
										{t('适用于企业、政府、组织、团体等用户__mark__')}
									</div>
									<div className="edit-auth-type-item-btn">
										<Button type="primary" onClick={() => switchScene(AuthScene.AuthEnterprise)}>
											{t('开始认证__mark__')}
										</Button>
									</div>
								</div>
							</div>
						</div>
					</Card.Body>
				</Card>
			</ContentView.Body>
		</ContentView>
	);
}

import React, { useState, useMemo } from 'react';
import { useDispatch } from 'react-redux';
import { Form as FinalForm, Field } from 'react-final-form';
import { i18n, app } from '@tea/app';
import { Button } from '@tea/component/button';
import { Card } from '@tea/component/card';
import { Checkbox } from '@tea/component/checkbox';
import { ContentView } from '@tea/component/contentview';
import { Form, FormItem } from '@tea/component/form';
import { Input } from '@tea/component/input';
import { Select } from '@tea/component/select__mark__';
import { Text } from '@tea/component/text';
import { getStatusAndMessage, getStatus, trimValues } from '@src/utils';
import { UploadInput } from '@src/components';
import { RealNameVerification } from '@src/libs/cos/strategy';
import { Sample_BusinessLicense, CertType } from '@src/instances/auth/intl';
import { authService, commonService } from '@src/services';
import useAsync from 'react-use/lib/useAsync';
import { AuthScene, AuthType, AuthState } from '@src/instances/auth';

const { t, lang } = i18n;

const createFormFields = () => ({
	country: {
		name: 'country',
		label: t('注册地区__mark__'),
	},
	name: {
		name: 'name',
		label: t('企业名称__mark__'),
		placeholder: t('请输入企业名称__mark__'),
	},
	idcard: {
		name: 'idcard',
		label: t('公司注册号码__mark__'),
		placeholder: t('请输入公司注册号码__mark__'),
	},
	address: {
		name: 'address',
		label: t('注册地址__mark__'),
		placeholder: t('请输入您的注册地址__mark__'),
	},
	idcardUrl: {
		name: 'idcardUrl',
		label: t('认证照片__mark__'),
		placeholder: '',
	},
});

export function Enterprise() {
	const formFields = useMemo(() => createFormFields(), []);
	const [agreeState, setAgreeState] = useState(false);
	const countryList = useAsync(
		() =>
			commonService.getCountryCodeList().then(list =>
				list.map(i => ({
					text: lang === 'zh' ? i.Name : i.EnName,
					value: lang === 'zh' ? i.Name : i.EnName,
				})),
			),
		[],
	);
	const {
		auth: { switchScene, updateCurrent },
	} = useDispatch();

	async function handleSubmit(values) {
		try {
			const payload = {
				...trimValues(values),
				authType: AuthType.Enterprise,
				idcardType: CertType.BusinessLicense,
			};

			await authService.submitIntlAuthInfo(payload);

			updateCurrent({
				...payload,
				authState: AuthState.STAGE,
			});
			switchScene(AuthScene.Result);
		} catch (e) {
			return;
		}
	}

	function handleFieldValidate(value) {
		value = typeof value === 'string' ? value.trim() : '';
		if (value === '') {
			return t('不能为空__mark__');
		} else if (value.length > 100) {
			return t('不超过100个字符__mark__');
		} else if (/[&<>\\%]/gm.test(value)) {
			return t('不能包含特殊字符("&<>\\%)');
		} else {
			return undefined;
		}
	}

	return (
		<ContentView>
			<ContentView.Header
				title={t('企业实名认证__mark__')}
				showBackButton
				onBackButtonClick={() => switchScene(AuthScene.ChooseAuthType)}
			/>
			<ContentView.Body>
				<Card>
					<Card.Body>
						<FinalForm onSubmit={handleSubmit}>
							{({ handleSubmit, submitting }) => (
								<>
									<Form>
										<Field
											name={formFields.country.name}
											validate={value => (value ? undefined : t('请选择注册地区__mark__'))}
										>
											{({ input, meta }) => (
												<FormItem
													label={formFields.country.label}
													status={countryList.loading ? 'validating' : null}
													{...getStatusAndMessage(meta)}
													required
												>
													<Select
														{...input}
														size="m"
														type="simulate"
														appearence="button"
														disabled={countryList.loading}
														options={countryList.value || []}
													/>
												</FormItem>
											)}
										</Field>
										<Field name={formFields.name.name} validate={handleFieldValidate}>
											{({ input, meta }) => (
												<FormItem
													label={formFields.name.label}
													{...getStatusAndMessage(meta)}
													required
												>
													<Input size="l" placeholder={formFields.name.placeholder} {...input} />
												</FormItem>
											)}
										</Field>
										<Field name={formFields.address.name} validate={handleFieldValidate}>
											{({ input, meta }) => (
												<FormItem
													label={formFields.address.label}
													{...getStatusAndMessage(meta)}
													required
												>
													<Input size="l" placeholder={formFields.address.placeholder} {...input} />
												</FormItem>
											)}
										</Field>
										<Field name={formFields.idcard.name} validate={handleFieldValidate} required>
											{({ input, meta }) => (
												<FormItem
													label={formFields.idcard.label}
													{...getStatusAndMessage(meta)}
													required
												>
													<Input size="l" placeholder={formFields.idcard.placeholder} {...input} />
												</FormItem>
											)}
										</Field>
										<Field
											name={formFields.idcardUrl.name}
											validate={value => (value ? undefined : t('请上传证件照片__mark__'))}
										>
											{({ input, meta }) => (
												<FormItem
													label={formFields.idcardUrl.label}
													showStatusIcon={false}
													status={getStatus(meta)}
													required
												>
													<UploadInput
														{...input}
														strategy={RealNameVerification}
														accept="image/jpg,image/jpeg,image/png"
														maxSize={2 * 1024 * 1024}
														message={
															<Text>
																{t('请上传 JPG 或 PNG 格式的图片，图片大小不超过 2MB__mark__')}
																<a
																	className="tea-ml-2n"
																	target="_blank"
																	href={Sample_BusinessLicense}
																>
																	{t('查看示例__mark__')}
																</a>
															</Text>
														}
													/>
												</FormItem>
											)}
										</Field>
										<FormItem>
											<Checkbox value={agreeState} onChange={value => setAgreeState(value)}>
												<Text style={{ maxWidth: 400, display: 'block' }}>
													{t(
														'我确认，上述信息完整、真实准确并有效。为了符合相关法律法规或政策，我同意将以上信息传输到腾讯云。如果上述信息有任何不实，我愿意承担一切后果责任。__mark__',
													)}
												</Text>
											</Checkbox>
										</FormItem>
									</Form>
									<Form.Action>
										<Button
											type="primary"
											disabled={!agreeState}
											onClick={() => handleSubmit()}
											loading={submitting}
										>
											{t('提交__mark__')}
										</Button>
									</Form.Action>
								</>
							)}
						</FinalForm>
					</Card.Body>
				</Card>
			</ContentView.Body>
		</ContentView>
	);
}

import React, { useState, useMemo } from 'react';
import { useDispatch } from 'react-redux';
import { Form as FinalForm, Field } from 'react-final-form';
import { i18n } from '@tea/app';
import { Button } from '@tea/component/button';
import { Card } from '@tea/component/card';
import { Checkbox } from '@tea/component/checkbox';
import { ContentView } from '@tea/component/contentview';
import { Form, FormItem } from '@tea/component/form';
import { Input } from '@tea/component/input';
import { Segment } from '@tea/component/segment';
import { Text } from '@tea/component/text';
import { getStatusAndMessage, getStatus, trimValues } from '@src/utils';
import { UploadInput } from '@src/components';
import { RealNameVerification } from '@src/libs/cos/strategy';
import { Sample_Passport, Sample_DrivingLicense, CertType } from '@src/instances/auth/intl';
import { authService } from '@src/services';
import { AuthScene, AuthType, AuthState } from '@src/instances/auth';

const { t } = i18n;

const createFormFields = certType => ({
	name: {
		name: 'name',
		label: t('全名__mark__'),
		placeholder: certType === CertType.Passport ? t('请输入护照的姓名__mark__') : t('请输入驾照上的姓名__mark__'),
	},
	address: {
		name: 'address',
		label: t('地址__mark__'),
		placeholder: t('请输入您的地址__mark__'),
	},
	idcard: {
		name: 'idcard',
		label: certType === CertType.Passport ? t('护照__mark__') : t('驾照__mark__'),
		placeholder: certType === CertType.Passport ? t('请输入护照编号__mark__') : t('请输入驾照编号__mark__'),
	},
	idcardUrl: {
		name: 'idcardUrl',
		label: certType === CertType.Passport ? t('护照照片__mark__') : t('驾照照片__mark__'),
		placeholder: '',
	},
});

export function Personal() {
	const [certType, setCertType] = useState(CertType.Passport);
	const formFields = useMemo(() => createFormFields(certType), [certType]);
	const [agreeState, setAgreeState] = useState(false);
	const {
		auth: { switchScene, updateCurrent },
	} = useDispatch();

	async function handleSubmit(values) {
		try {
			const payload = {
				...trimValues(values),
				authType: AuthType.Personal,
				idcardType: certType,
			};
			await authService.submitIntlAuthInfo(payload);

			updateCurrent({
				...payload,
				authState: AuthState.STAGE,
			});
			switchScene(AuthScene.Result);
		} catch (e) {
			return;
		}
	}

	function handleFieldValidate(value) {
		value = typeof value === 'string' ? value.trim() : '';
		if (value === '') {
			return t('不能为空__mark__');
		} else if (value.length > 100) {
			return t('不超过100个字符__mark__');
		} else if (/[&<>\\%]/gm.test(value)) {
			return t('不能包含特殊字符("&<>\\%)');
		} else {
			return undefined;
		}
	}

	return (
		<ContentView>
			<ContentView.Header
				title={t('个人实名认证__mark__')}
				showBackButton
				onBackButtonClick={() => switchScene(AuthScene.ChooseAuthType)}
			/>
			<ContentView.Body>
				<Card>
					<Card.Body>
						<FinalForm onSubmit={handleSubmit}>
							{({ handleSubmit, submitting }) => (
								<>
									<Form>
										<FormItem label={t('证件类型__mark__')}>
											<Segment
												value={String(certType)}
												onChange={value => setCertType(+value)}
												options={[
													{ text: t('护照__mark__'), value: String(CertType.Passport) },
													{ text: t('驾照__mark__'), value: String(CertType.DrivingLicense) },
												]}
											/>
										</FormItem>
										<Field name={formFields.name.name} validate={handleFieldValidate}>
											{({ input, meta }) => (
												<FormItem
													label={formFields.name.label}
													{...getStatusAndMessage(meta)}
													required
												>
													<Input size="l" placeholder={formFields.name.placeholder} {...input} />
												</FormItem>
											)}
										</Field>
										<Field name={formFields.address.name} validate={handleFieldValidate}>
											{({ input, meta }) => (
												<FormItem
													label={formFields.address.label}
													{...getStatusAndMessage(meta)}
													required
												>
													<Input size="l" placeholder={formFields.address.placeholder} {...input} />
												</FormItem>
											)}
										</Field>
										<Field name={formFields.idcard.name} validate={handleFieldValidate}>
											{({ input, meta }) => (
												<FormItem
													label={formFields.idcard.label}
													{...getStatusAndMessage(meta)}
													required
												>
													<Input size="l" placeholder={formFields.idcard.placeholder} {...input} />
												</FormItem>
											)}
										</Field>
										<Field
											name={formFields.idcardUrl.name}
											validate={value => (value ? undefined : t('请上传证件照片__mark__'))}
										>
											{({ input, meta }) => (
												<FormItem
													label={formFields.idcardUrl.label}
													showStatusIcon={false}
													status={getStatus(meta)}
													required
												>
													<UploadInput
														{...input}
														strategy={RealNameVerification}
														accept="image/jpg,image/jpeg,image/png"
														maxSize={2 * 1024 * 1024}
														message={
															<Text>
																{t('请上传 JPG 或 PNG 格式的图片，图片大小不超过 2MB__mark__')}
																<a
																	className="tea-ml-2n"
																	target="_blank"
																	href={
																		certType === CertType.Passport
																			? Sample_Passport
																			: Sample_DrivingLicense
																	}
																>
																	{t('查看示例__mark__')}
																</a>
															</Text>
														}
													/>
												</FormItem>
											)}
										</Field>
										<FormItem>
											<Checkbox value={agreeState} onChange={value => setAgreeState(value)}>
												<Text style={{ maxWidth: 400, display: 'block' }}>
													{t(
														'我确认，上述信息完整、真实准确并有效。为了符合相关法律法规或政策，我同意将以上信息传输到腾讯云。如果上述信息有任何不实，我愿意承担一切后果责任。__mark__',
													)}
												</Text>
											</Checkbox>
										</FormItem>
									</Form>
									<Form.Action>
										<Button
											type="primary"
											disabled={!agreeState}
											onClick={() => handleSubmit()}
											loading={submitting}
										>
											{t('提交__mark__')}
										</Button>
									</Form.Action>
								</>
							)}
						</FinalForm>
					</Card.Body>
				</Card>
			</ContentView.Body>
		</ContentView>
	);
}

import React, { useMemo } from 'react';
import useAsync from 'react-use/lib/useAsync';
import moment from 'moment';
import { t, Trans } from '@tea/app/i18n';
import {
	Alert,
	Button,
	Card,
	ContentView,
	Form,
	ExternalLink,
	Modal,
	MediaObject,
	Text,
} from '@tea/component';
import { useSelector, useDispatch } from 'react-redux';
import { useHistory } from '@tencent/tea-app';
import { AuthScene, AuthState, AuthType } from '@src/instances/auth';
import { CertEntities } from '@src/instances/auth/intl';
import { getInstance } from '@src/libs/cos';
import { RealNameVerification } from '@src/libs/cos/strategy';

const cosService = getInstance(RealNameVerification);

// 由于照片存储在私有 Bucket, 需追回已授权参数
async function getSignedUrl(srcUrl) {
	// 存量已经带了签名参数的链接，直接返回__mark__
	if (srcUrl.indexOf('sign') !== -1) {
		return srcUrl;
	}
	return cosService.getSignedFileUrl(srcUrl.replace(/^https?:\/\/[^\/]*\//, ''));
}

function getDisplayFields(authInfo) {
	const { idcardType, authType } = authInfo;

	let fields;

	if (authType === AuthType.Enterprise) {
		fields = [
			{
				label: t('注册地区__mark__'),
				name: 'country',
			},
			{
				label: t('公司名称__mark__'),
				name: 'name',
			},
			{
				label: t('公司注册号码__mark__'),
				name: 'idcard',
			},
			{
				label: t('注册地址__mark__'),
				name: 'address',
			},
		];
	} else {
		fields = [
			{
				label: t('全名__mark__'),
				name: 'name',
			},
			{
				label: CertEntities[idcardType] ? CertEntities[idcardType].text : 'ID',
				name: 'idcard',
			},
			{
				label: t('地址__mark__'),
				name: 'address',
			},
		];
	}

	return fields.map(field => Object.assign(field, { value: authInfo[field.name] }));
}

export function Result() {
	const history = useHistory();
	const current = useSelector(state => state.auth.current);
	const {
		auth: { switchScene },
	} = useDispatch();
	const { authState, authType, idcardUrl, canReAuth, passTime, nextAuthTime } = current;
	const certUrlState = useAsync(() => getSignedUrl(idcardUrl), []);
	const displayFields = useMemo(() => getDisplayFields(current), [current]);

	return (
		<ContentView>
			<ContentView.Header
				title={t('实名认证__mark__')}
				showBackButton
				onBackButtonClick={() => history.push('/developer')}
			/>
			<ContentView.Body>
				{authState === AuthState.SUCC && (
					<Alert type="success">
						{authType === AuthType.Enterprise ? (
							<Trans>
								恭喜，您已完成腾讯云企业实名认证，如果您的认证信息发生变更，可修改认证。__mark__
							</Trans>
						) : (
							<Trans>
								恭喜，您已完成腾讯云个人实名认证，如果您的认证信息发生变更，可修改认证。__mark__
							</Trans>
						)}
					</Alert>
				)}
				{authState === AuthState.STAGE && (
					<Alert>
						<Trans>
							您的实名认证申请正在处理中，我们将会在2-3个工作日完成审核。审核结果将会以站内信、邮件和短信的方式通知给您。__mark__
						</Trans>
					</Alert>
				)}
				{authState === AuthState.FAIL && (
					<Alert type="error">
						<Trans>
							您的实名认证__mark__申请未能通过，请重新提交__mark__准确的信息。若您有任何疑问，可查看
							<ExternalLink
								href="https://intl.cloud.tencent.com/document/product/378/3629"
								className="tea-mr-1n tea-ml-1n"
							>
								实名认证__mark__指引
							</ExternalLink>
							。
						</Trans>
					</Alert>
				)}
				{authState !== AuthState.STAGE && (
					<Button type="primary" style={{ marginBottom: 20 }} onClick={handleReAuth}>
						{t('重新认证__mark__')}
					</Button>
				)}
				<Card>
					<Card.Body>
						<MediaObject
							media={
								<img
									src={certUrlState.value ? certUrlState.value : null}
									style={{
										width: 280,
										height: 180,
									}}
									alt=""
								/>
							}
							align="middle"
						>
							<div style={{ marginLeft: 20 }}>
								<Form.Title>{t('实名信息__mark__')}</Form.Title>
								<Form>
									{displayFields.map(field => (
										<Form.Item key={field.name} label={field.label}>
											<Form.Text>{field.value}</Form.Text>
										</Form.Item>
									))}
								</Form>
							</div>
						</MediaObject>
					</Card.Body>
				</Card>
			</ContentView.Body>
		</ContentView>
	);

	async function handleReAuth() {
		/**
		 * 一__mark__般为30天内重新认证__mark__
		 */
		if (authState === AuthState.SUCC && !canReAuth) {
			Modal.error({
				message: t('操作失败'),
				description: (
					<>
						{t(
							`您好，30天内仅允许申请或重新认证1次信息，经核实该账号在 {{ passTime }} 已有申请认证操作记录。__mark__`,
							{ passTime: moment(passTime).format('YYYY-MM-DD HH:mm') },
						)}
						{t('我们建议您{{ nextAuthTime }}之后操作，谢谢。', {
							nextAuthTime: moment(nextAuthTime).format('YYYY-MM-DD HH:mm'),
						})}
					</>
				),
			});

			return;
		}

		switchScene(AuthScene.ChooseAuthType);
	}
}


// 展示国际版主账号__mark__联系信息__mark__组件

import React, { Fragment } from 'react';
import { Layout, Tab, TabWrapper, Row, Col, Form, List } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { connect } from 'react-redux';

const mapStateToProps = (state) => {
	return state;
}

/**
 * 表单项配置
 * field => string 返回__mark__的数据中哪个字段，用于取数据
 * label => string 显示的标签名字
 * condition => function 满足条件才显示该组件，返回__mark__false不显示
 * render => function  自定义显示，默认是显示data[filed]的值
 */
const configForView = [
    {   
        field: 'fullName',
        label: 'Full Name'
    },
    {
        field: 'companyName',
        label: 'companyName',
        condition: (data) => {
            return data.uyserType == 2;
        }
    },
    {
        field: 'countryName',
        label: 'countryName',
        
    },
    {
        field: 'address',
        label: 'address',
        render: (data) => {
            return data.addressCon ? `{data.address} {data.addressCon}` : data.address;
        }
    },
    {
        field: 'city',
        label: 'city'
    },
    {
        field: 'state',
        label: 'state'
    },
    {
        field: 'postalCode',
        label: 'postalCode'
    },
    {
        field: 'phonenumber',
        label: 'Full Name',
        render: (data) => {
            return `${data.countryCode} ${data.phoneNumber}`;
        }
    }
]

@connect(mapStateToProps)
export class ContactInfoView extends React.Component {

    render() {

        const { contactInfo__mark__ } = this.props;
        return (
            <Fragment>
                {
                    configForView.map((config) => {
                        if (typeof config.condition == 'function') {
                            if (config.condition(contactInfo__mark__) === false) {
                                return null;
                            }
                        }
                        return (
                            <Form.Pure label = {t(config['label'])} className='pure-text-row'>
                                <div className="form-unit">
                                    <div className="form-text">
                                        { typeof config.render == 'function' ? config.render(contactInfo__mark__) : contactInfo__mark__[config['field']]}
                                    </div>
                                </div>
                            </Form.Pure>
                        )
                    })
                }
            </Fragment>
        )
    }

    
}
// 显示国际版数据保护组件
import React from 'react';
import { connect } from 'react-redux';
import { Form } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { Bubble } from '@tencent/tea-component';

const mapStateToProps = state => {
	return state;
};

// 字段的基类
class Base extends React.Component {
	label = '';
	field = '';

	check(data) {
		return true;
	}

	render() {
		const { contactInfo__mark__ } = this.props;
		if (!this.check(contactInfo__mark__)) {
			return null;
		}
		const content = this['text'] ? this['text'](contactInfo__mark__) : contactInfo__mark__[this['field']] || '-';

		return (
			<Form.Pure label={this.label} className="pure-text-row">
				<div className="form-unit">
					<div className="form-text">
						{/* <Bubble content={content}> */}
						{content}
						{/* </Bubble> */}
					</div>
				</div>
			</Form.Pure>
		);
	}
}

@connect(mapStateToProps)
class FullName extends Base {
	label = t('全名__mark__');
	field = 'fullName';
}

@connect(mapStateToProps)
class CompanyName extends Base {
	label = t('公司名称__mark__');
	field = 'companyName';
	check(data) {
		return data.userType == 2;
	}
}

@connect(mapStateToProps)
class CountryName extends Base {
	label = t('地区__mark__');
	field = 'countryName';
}

@connect(mapStateToProps)
class Address extends Base {
	label = t('地址__mark__');
	field = 'address';
	text(data) {
		return data.addressCon ? `${data.address || ''} ${data.addressCon}` : data.address;
	}
}

@connect(mapStateToProps)
class City extends Base {
	label = t('市__mark__');
	field = 'city';
}

@connect(mapStateToProps)
class State extends Base {
	label = t('州__mark__');
	field = 'state';
}

@connect(mapStateToProps)
class PostalCode extends Base {
	label = t('邮政编码__mark__');
	field = 'postalCode';
}

@connect(mapStateToProps)
class Phonenumber extends Base {
	label = t('手机号码__mark__');
	field = 'phoneNumber';
	text(data) {
		return `${data.countryCode ? '+' + data.countryCode : ''} ${data.phoneNumber || ''}`;
	}
}
export const ContactInfoViewFields = {
	FullName,
	CompanyName,
	CountryName,
	Address,
	City,
	State,
	PostalCode,
	Phonenumber,
};

export * from './ContactInfoView';
export * from './ContactInfoViewFields';
export * from './ModifyContactInfo';

// 修改__mark__国际版主账号__mark__联系信息__mark__组件

import React, { Fragment } from 'react';
import { Layout, Tab, TabWrapper, Row, Col, Form, List } from '@src/components';
import { Input } from '@tea/component/Input';
import { Select } from '@tea/component/Select';
import { t, lng, Trans } from '@tea/app/i18n';
import { developerService, commonService } from '@src/services';
import * as utils from '@src/utils';
import _ from 'underscore';
import { connect } from 'react-redux';
const FormItem = Form.Item;

// 区号加手机号码__mark__组件，区号是根据选择的国家决定的，不是可选的，手机是可填写的
class PhoneInfo extends React.Component {
	render() {
		const { value: phoneInfo } = this.props;

		return (
			<div
				className="fm-dropdown"
				style={{ paddingLeft: phoneInfo.countryCode ? '60px' : '10px', width: '200px' }}
			>
				<div
					className="mobile-code-dropdown"
					style={{ display: phoneInfo.countryCode ? '' : 'none' }}
				>
					<a className="dropdown-link disabled" href="javascript:;" style={{ width: '50px' }}>
						<span className="mobile-code" style={{ verticalAlign: 'inherit' }}>
							+{phoneInfo.countryCode}
						</span>
					</a>
				</div>
				<Input
					value={phoneInfo.phoneNumber}
					className="input-mobile"
					onChange={phoneNumber => {
						this.props.onChange({
							phoneNumber: phoneNumber,
							countryCode: phoneInfo.countryCode,
						});
					}}
				></Input>
			</div>
		);
	}
}

function validator(rule, value, callback) {
	if (!value) {
		return callback(t('请输入内容__mark__'));
	}
	if (value.length > 100) {
		return callback(t('不超过100个字符__mark__'));
	}
	if (/[<>\\%]/gm.test(value)) {
		return callback(t('不能包含特殊字符("&<>\\%)'));
	}
	callback();
}

// 修改__mark__信息弹框
@Form.create()
export class ModifyContactInfo extends React.Component {
	constructor(props) {
		super(props);
		this.state = {
			loading: true,
			errorTips: '',
			countryCodeList: [],
		};
	}
	async componentDidMount() {
		try {
			let countryCodeList = await commonService.getCountryCodeList();

			countryCodeList = _.chain(countryCodeList)
				.filter(function(item) {
					return item.Code != 86;
				})
				.sortBy('EnName')
				.value();
			countryCodeList = countryCodeList.map(({ Name, EnName, Code }) => ({
				text: lng == 'zh' ? Name : EnName,
				value: EnName,
				code: Code,
			}));
			this.setState({ countryCodeList });
		} catch (e) {
			this.setState({ errorTips: t('获取区号失败__mark__') });
		}
		this.setState({ loading: false });
	}

	find(countryName) {
		const item =
			this.state.countryCodeList.find(item => {
				return item.value === countryName;
			}) || {};
		return item.code;
	}
	render() {
		// if (this.state.loading) {
		//     return null;
		// }

		if (this.state.errorTips) {
			return this.state.errorTips;
		}

		const { getFieldDecorator, setFieldsValue, getFieldValue } = this.props.form;
		const { data } = this.props;
		return (
			<List>
				<FormItem label={t('全名__mark__')} className="list-3" required>
					{getFieldDecorator('fullName', {
						initialValue: data['fullName'],
						rules: [
							{
								validator: validator,
							},
						],
					})(<Input placeholder="" />)}
				</FormItem>
				{data.userType == 2 ? (
					<FormItem label={t('公司名称__mark__')} className="list-3" required>
						{getFieldDecorator('companyName', {
							initialValue: data['companyName'],
							rules: [
								{
									validator: validator,
								},
							],
						})(<Input placeholder="" />)}
					</FormItem>
				) : null}
				<FormItem label={t('手机号码__mark__')} className="list-3" required>
					{getFieldDecorator('phoneInfo', {
						initialValue: {
							phoneNumber: data['phoneNumber'],
							countryCode: this.find(data.countryName),
						},
						rules: [
							{
								validator: (rule, phoneInfo, callback) => {
									const { countryCode, phoneNumber } = phoneInfo;
									if (!countryCode) {
										this.props.form.setFields({
											countryName: {
												value: getFieldValue('countryName'),
												errors: [new Error(t('请选择区号__mark__'))],
											},
										});
										return callback();
									}
									if (!phoneNumber) {
										return callback(t('请输入手机号码__mark__'));
									}
									if (countryCode == 86 && /^1[0-9]{4,10}$/.test(phoneNumber)) {
										return callback(t('请输入正确的手机号码__mark__'));
									}
									if (countryCode != 86 && !/^[0-9]{5,11}$/.test(phoneNumber)) {
										return callback(t('请输入正确的手机号码__mark__'));
									}
									callback();
								},
							},
						],
					})(<PhoneInfo></PhoneInfo>)}
				</FormItem>
				<FormItem label={t('地区__mark__')} className="list-3" required>
					{getFieldDecorator('countryName', {
						initialValue: data['countryName'],
						rules: [
							{
								validator: (rule, value, callback) => {
									if (!value) {
										return callback(t('请选择注册地区__mark__'));
									}
									callback();
								},
							},
						],
						onChange: value => {
							const phoneInfo = { ...getFieldValue('phoneInfo'), countryCode: this.find(value) };
							setFieldsValue({ phoneInfo: phoneInfo, countryName: value });
						},
					})(
						<Select
							placeholder={t('请选择__mark__')}
							type="simulate"
							appearence="button"
							disabled={!this.state.countryCodeList.length}
							options={this.state.countryCodeList}
							style={{ width: '200px' }}
						/>,
					)}
				</FormItem>

				<FormItem label={t('州__mark__')} className="list-3" required>
					{getFieldDecorator('state', {
						initialValue: data['state'],
						rules: [
							{
								validator: validator,
							},
						],
					})(<Input placeholder="" />)}
				</FormItem>
				<FormItem label={t('市__mark__')} className="list-3" required>
					{getFieldDecorator('city', {
						initialValue: data['city'],
						rules: [
							{
								validator: validator,
							},
						],
					})(<Input placeholder="" />)}
				</FormItem>

				<FormItem label={t('注册地址__mark__')} className="list-3" required>
					{getFieldDecorator('address', {
						initialValue: data['address'],
						rules: [
							{
								validator: validator,
							},
						],
					})(<Input></Input>)}
				</FormItem>
				<FormItem label={''} className="list-3" required>
					{getFieldDecorator('addressCon', {
						initialValue: data['addressCon'],
						rules: [
							{
								validator: (rule, value, callback) => {
									if (!value) {
										return callback();
									}
									if (value.length > 100) {
										return callback(t('不超过100个字符__mark__'));
									}
									if (/[<>\\%]/gm.test(value)) {
										return callback(t('不能包含特殊字符("&<>\\%)'));
									}
									callback();
								},
							},
						],
					})(<Input></Input>)}
				</FormItem>

				<FormItem label={t('邮政编码__mark__')} className="list-3" required>
					{getFieldDecorator('postalCode', {
						initialValue: data['postalCode'],
						rules: [
							{
								validator: validator,
							},
						],
					})(<Input placeholder="" />)}
				</FormItem>
			</List>
		);
	}
}

// 显示国际版GDPR信息组件
import React from 'react';
import { connect } from 'react-redux';
import { Form } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { Bubble } from '@tencent/tea-component';
const mapStateToProps = state => {
	return state;
};

// 字段的基类
class Base extends React.Component {
	label = '';
	field = '';

	render() {
		const { dataProtect } = this.props;
		const content = dataProtect[this['field']] || '-';
		return (
			<Form.Pure label={t(this.label)} className="pure-text-row">
				<div className="form-unit">
					<div className="form-text">
						{/* <Bubble content={content}> */}
						{content}
						{/* </Bubble> */}
					</div>
				</div>
			</Form.Pure>
		);
	}
}

@connect(mapStateToProps)
class OfficerName extends Base {
	label = t('数据保护官姓名__mark__');
	field = 'officerName';
}

@connect(mapStateToProps)
class OfficerEmail extends Base {
	label = t('数据保护官邮箱地址__mark__');
	field = 'officerEmail';
}

@connect(mapStateToProps)
class DataCategory extends Base {
	label = t('数据分类__mark__');
	field = 'dataCategory';
}

@connect(mapStateToProps)
class SpecialDataCategory extends Base {
	label = t('数据的特殊分类__mark__');
	field = 'specialDataCategory';
}

export const DataProtectFields = {
	OfficerName,
	OfficerEmail,
	DataCategory,
	SpecialDataCategory,
};

export * from './ModifyDataProtect';
export * from './DataProtectFields';

// 修改__mark__GDPR信息组件
import React, { Fragment } from 'react';
import { Form, List } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { Input } from '@tea/component/input';

const FormItem = Form.Item;

@Form.create()
export class ModifyDataProtect extends React.Component {
	render() {
		const { getFieldDecorator } = this.props.form;
		const { data } = this.props;

		return (
			<List>
				<FormItem label={t('数据保护官姓名__mark__')} className="list-3">
					{getFieldDecorator('officerName', {
						initialValue: data['officerName'],
					})(<Input placeholder="" />)}
				</FormItem>
				<FormItem label={t('数据保护官邮箱地址__mark__')} className="list-3">
					{getFieldDecorator('officerEmail', {
						initialValue: data['officerEmail'],
					})(<Input placeholder="" />)}
				</FormItem>
				<FormItem label={t('数据分类__mark__')} className="list-3">
					{getFieldDecorator('dataCategory', {
						initialValue: data['dataCategory'],
					})(<Input placeholder="" />)}
				</FormItem>
				<FormItem label={t('数据的特殊分类__mark__')} className="list-3">
					{getFieldDecorator('specialDataCategory', {
						initialValue: data['specialDataCategory'],
					})(<Input></Input>)}
				</FormItem>
			</List>
		);
	}
}

export * from './ModifyMail';
export * from './ModifyPhone';
export * from './ModifyPassword';
export * from './VerifyMail';
import React, { Fragment } from 'react';
import { Form, List } from '@src/components';
import { TimerButton } from '@src/components/TimerButton';
import { t, Trans } from '@tea/app/i18n';
import { commonService } from '@src/services';
import * as utils from '@src/utils';
import _ from 'underscore';
import { Input } from '@tea/component/input';
import pify from 'pify';
const FormItem = Form.Item;

/**
 * 修改__mark__主账号__mark__邮箱组件
 */
@Form.create()
export class ModifyMail extends React.Component {
	render() {
		const { getFieldDecorator } = this.props.form;

		return (
			<List>
				<FormItem label={t('新绑定邮箱__mark__')} className="list-3" required>
					{getFieldDecorator('mail', {
						initialValue: '',
						rules: [
							{
								validator: (rule, value, callback) => {
									if (!value) {
										return callback(t('邮箱不能为空__mark__'));
									}

									if (utils.checkEmail(value)) {
										callback();
									} else {
										callback(t('请输入有效的邮箱地址__mark__'));
									}
								},
							},
						],
						clearErrorTrigger: 'onChange',
					})(<Input placeholder={t('请输入邮箱__mark__')} />)}
				</FormItem>
				<FormItem label={t('邮箱验证码__mark__')} className="list-3" required>
					{getFieldDecorator('code', {
						initialValue: '',
						rules: [
							{ required: true, message: t('验证码不能为空__mark__') },
							{
								message: t('请输入6位有效验证码__mark__'),
								pattern: /^\d{6}$/,
							},
						],
						clearErrorTrigger: 'onChange',
					})(<Input placeholder={t('请填写6位数字验证码__mark__')} />)}
					<TimerButton
						beforeSend={() => {
							return pify(this.props.form.validateFields)(['mail']);
						}}
						sendCode={async ticket => {
							try {
								const mail = this.props.form.getFieldValue('mail');
								await commonService.sendVerifyCode({
									lang: this.props.lang,
									action: 'ModifyMail',
									mail,
									type: 2, // 验证码__mark__类型
									...ticket,
								});
								return Promise.resolve();
							} catch (e) {
								const code = this.props.form.getFieldValue('code');
								this.props.form.setFields({
									code: { value: code, errors: [new Error(t('发送验证码失败__mark__'))] },
								});
								return Promise.reject();
							}
						}}
					>
						>
					</TimerButton>
				</FormItem>
			</List>
		);
	}
}

import React from 'react';
import { user } from '@tea/app/bridge';
import { Input, Button } from '@tencent/tea-component';
import { Layout, Form, List, MailAndPassword } from '@src/components';
import { t, Trans } from '@tea/app/i18n';
import { commonService } from '@src/services/common';
import * as utils from '@src/utils';
import cookie from 'js-cookie';
import classnames from 'classnames';

const FormItem = Form.Item;

@Form.create()
export class ModifyPassword extends MailAndPassword {
	getTpl() {
		const { getFieldDecorator } = this.props.form;

		const tpl = super.getTpl();

		const oldPasswordTpl = (
			<FormItem label={t('旧密码__mark__')} className="list-3" required hideStatusIcon={true}>
				{getFieldDecorator('oldPassword', {
					initialValue: '',
					rules: [{ required: true, message: t('旧密码不能为空__mark__') }],
					clearErrorTrigger: 'onChange',
				})(<Input type="password" placeholder={t('请输入旧密码__mark__')} />)}
			</FormItem>
		);
		tpl.unshift(oldPasswordTpl);
		return tpl;
	}
}

import React, { Fragment } from 'react';
import { Layout, Form, List, PageTitle, Phone, CountDown } from '@src/components';
import { Button } from '@tea/component/Button';
import { t, Trans } from '@tea/app/i18n';
import { developerService, commonService } from '@src/services';
import * as utils from '@src/utils';
import _ from 'underscore';
import { app } from '@tea/app';
import cookie from 'js-cookie';
import { Input } from '@tea/component/input';
import classnames from 'classnames';
import tcaptcha from '@src/libs/tcaptcha';
import pify from 'pify';
import login from '@src/libs/login';
import { TimerButton } from '@src/components/TimerButton';
const FormItem = Form.Item;
/**
 * 修改__mark__主账号__mark__手机组件
 */
@Form.create()
export class ModifyPhone extends React.Component {
	render() {
		const { getFieldDecorator } = this.props.form;
		return (
			<List>
				<FormItem label={t('新绑定手机__mark__')} className="list-3" required>
					{getFieldDecorator('phoneInfo', {
						initialValue: { countryCode: 86, phoneNumber: '' },
						rules: [
							{
								validator: (rule, value, callback) => {
									const { countryCode, phoneNumber } = value;

									if (!countryCode) {
										return callback(t('请选择区号__mark__'));
									}

									if (!phoneNumber) {
										return callback(t('请输入手机号码__mark__'));
									}

									if (+countryCode === 86 && !/^1[0-9]{10}$/.test(phoneNumber)) {
										return callback(t('请填写有效的手机号码__mark__'));
									} else if (+countryCode !== 86 && !/^\d{8,12}/.test(phoneNumber)) {
										return callback(t('请填写有效的手机号码__mark__'));
									} else {
										callback();
									}
								},
							},
						],
						clearErrorTrigger: 'onChange',
					})(<Phone placeholder={t('请输入手机号码__mark__')} lang={this.props.lang} />)}
				</FormItem>
				<FormItem label={t('手机验证码__mark__')} className="list-3" required>
					{getFieldDecorator('code', {
						initialValue: '',
						rules: [
							{ required: true, message: t('验证码不能为空__mark__') },
							{
								message: t('请输入6位有效验证码__mark__'),
								pattern: /^\d{6}$/,
							},
						],
						clearErrorTrigger: 'onChange',
					})(<Input placeholder={t('请填写6位数字验证码__mark__')} />)}

					<TimerButton
						beforeSend={() => {
							return pify(this.props.form.validateFields)(['phoneInfo']);
						}}
						sendCode={async ticket => {
							const { countryCode, phoneNumber } = this.props.form.getFieldValue('phoneInfo');

							try {
								await commonService.sendVerifyCode({
									lang: this.props.lang,
									action: 'modifyPhone',
									countryCode,
									phoneNum: phoneNumber,
									type: 1, // 验证码__mark__类型
									...ticket,
								});
								return Promise.resolve();
							} catch (e) {
								const code = this.props.form.getFieldValue('code');
								this.props.form.setFields({
									code: { value: code, errors: [new Error(t('发送验证码失败__mark__'))] },
								});
								return Promise.reject();
							}
						}}
					>
						>
					</TimerButton>
				</FormItem>
			</List>
		);
	}
}

import React, { Fragment } from 'react';
import { PopConfirm, Button, Icon } from '@tea/component';
import { developerService } from '@src/services';
import * as utils from '@src/utils';
const { Timer } = utils;
import { t, Trans, lng } from '@tea/app/i18n';
// 验证主账号__mark__邮箱组件
export class VerifyMail extends React.Component {
	timer = null;

	constructor(props) {
		super(props);
		this.state = {
			visible: false, // popup可见性
			btnText: t('发送验证邮件__mark__'), // 发送按钮的文案
			disabled: false, // 按钮是否可点击
		};
	}

	async sendVerifyMail() {
		this.setState({ btnText: t('正在发送中...__mark__'), disabled: true });
		try {
			await developerService.sendVerifyMail({
				type: 'verify_mail',
				mail: this.props.mail,
				lang: lng === 'zh' ? 'zh' : 'en',
			});
			utils.showSuccessTips(t('发送验证码成功__mark__'));
			// 发送成功开启计时

			this.timer = new Timer({
				second: 60,
				work: second => {
					this.setState({ btnText: t(`{{count}} 秒后重新发送验证邮件__mark__`, { count: second }) });
				},
				done: () => {
					this.setState({ btnText: t(`重新发送验证邮件__mark__`), disabled: false });
				},
			}).start();
		} catch (e) {
			utils.showErrorTips(t('发送验证码失败__mark__'));
			this.setState({ btnText: t('发送验证邮件__mark__'), disabled: false });
		}
	}

	render() {
		const { visible, disabled, btnText } = this.state;

		return (
			<PopConfirm
				title={t('邮箱未验证__mark__')}
				message={t('建议您立即验证邮箱，以便及时获取云服务安全、监控告警、资源到期提醒等重要通知__mark__')}
				visible={visible}
				onVisibleChange={value => {
					// popup隐藏时触发，value=false
					this.setState({ visible: value });
				}}
				footer={
					<Fragment>
						<Button
							type="link"
							disabled={disabled}
							onClick={() => {
								disabled == false && this.sendVerifyMail();
							}}
							children={btnText}
						/>
						<Button
							type="link"
							onClick={() => {
								this.setState({ visible: false });
							}}
							children={t('取消__mark__')}
						/>
					</Fragment>
				}
				placement="top-start"
			>
				<Icon
					type="error"
					style={{ marginLeft: '5px' }}
					onMouseEnter={() => {
						this.setState({ visible: true });
					}}
				/>
			</PopConfirm>
		);
	}

	componentWillUnmount() {
		this.timer && this.timer.stop();
	}
}
